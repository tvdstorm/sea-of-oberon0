<?xml version="1.0"?>
<javancss>
  <date>2011-01-30</date>
  <time>14:18:38</time>
  <packages>
    <package>
      <name>AbstractSyntax</name>
      <classes>3</classes>
      <functions>23</functions>
      <ncss>154</ncss>
      <javadocs>16</javadocs>
      <javadoc_lines>56</javadoc_lines>
      <single_comment_lines>26</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>AbstractSyntax.Declarations</name>
      <classes>5</classes>
      <functions>22</functions>
      <ncss>110</ncss>
      <javadocs>12</javadocs>
      <javadoc_lines>42</javadoc_lines>
      <single_comment_lines>10</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>AbstractSyntax.Statements</name>
      <classes>19</classes>
      <functions>60</functions>
      <ncss>353</ncss>
      <javadocs>27</javadocs>
      <javadoc_lines>106</javadoc_lines>
      <single_comment_lines>12</single_comment_lines>
      <multi_comment_lines>3</multi_comment_lines>
    </package>
    <package>
      <name>AbstractSyntax.Structure</name>
      <classes>3</classes>
      <functions>16</functions>
      <ncss>78</ncss>
      <javadocs>6</javadocs>
      <javadoc_lines>21</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>AbstractSyntax.Types</name>
      <classes>2</classes>
      <functions>8</functions>
      <ncss>30</ncss>
      <javadocs>2</javadocs>
      <javadoc_lines>8</javadoc_lines>
      <single_comment_lines>5</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>Execution</name>
      <classes>4</classes>
      <functions>21</functions>
      <ncss>118</ncss>
      <javadocs>10</javadocs>
      <javadoc_lines>45</javadoc_lines>
      <single_comment_lines>20</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <total>
      <classes>36</classes>
      <functions>150</functions>
      <ncss>843</ncss>
      <javadocs>73</javadocs>
      <javadoc_lines>278</javadoc_lines>
      <single_comment_lines>73</single_comment_lines>
      <multi_comment_lines>3</multi_comment_lines>
    </total>
    <table>
      <tr><td>Packages</td><td>Classes</td><td>Functions</td><td>NCSS</td><td>Javadocs</td><td>per</td></tr>
      <tr><td>6.00</td><td>36.00</td><td>150.00</td><td>843.00</td><td>73.00</td><td>Project</td></tr>
      <tr><td></td><td>6.00</td><td>25.00</td><td>140.50</td><td>12.17</td><td>Package</td></tr>
      <tr><td></td><td></td><td>4.17</td><td>23.42</td><td>2.03</td><td>Class</td></tr>
      <tr><td></td><td></td><td></td><td>5.62</td><td>0.49</td><td>Function</td></tr>
    </table>
  </packages>

  <objects>
    <object>
      <name>AbstractSyntax.BaseNode</name>
      <ncss>102</ncss>
      <functions>9</functions>
      <classes>0</classes>
      <javadocs>9</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.BaseNodeWithID</name>
      <ncss>15</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Declarations.BaseDeclaration</name>
      <ncss>3</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Declarations.BaseDeclarationList</name>
      <ncss>16</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Declarations.Const</name>
      <ncss>18</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Declarations.Var</name>
      <ncss>51</ncss>
      <functions>10</functions>
      <classes>0</classes>
      <javadocs>5</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Declarations.VarRef</name>
      <ncss>3</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.ID</name>
      <ncss>29</ncss>
      <functions>9</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.Assign</name>
      <ncss>17</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.BaseStatement</name>
      <ncss>3</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.BaseStatementList</name>
      <ncss>17</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.BaseWithCondition</name>
      <ncss>15</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.BaseWithList</name>
      <ncss>13</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.Call</name>
      <ncss>31</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.CallConcrete</name>
      <ncss>12</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.CallConcreteAssert</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.CallConcreteDefault</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.CallConcreteRead</name>
      <ncss>9</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.CallConcreteWrite</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.CallConcreteWriteLn</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.CallVars</name>
      <ncss>14</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.Expression</name>
      <ncss>91</ncss>
      <functions>8</functions>
      <classes>1</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.If</name>
      <ncss>28</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.IfPartForElse</name>
      <ncss>3</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.IfPartForElsIf</name>
      <ncss>7</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.IfPartForThen</name>
      <ncss>3</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.While</name>
      <ncss>8</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Structure.Body</name>
      <ncss>13</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Structure.Module</name>
      <ncss>26</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Structure.Procedure</name>
      <ncss>23</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Types.Int</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Types.IntValue</name>
      <ncss>14</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>Execution.Scope</name>
      <ncss>63</ncss>
      <functions>10</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>Execution.ScopeValueBase</name>
      <ncss>4</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>Execution.ScopeValueInt</name>
      <ncss>10</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>Execution.ScopeValueIntArray</name>
      <ncss>21</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <averages>
      <ncss>19.72</ncss>
      <functions>4.17</functions>
      <classes>0.03</classes>
      <javadocs>2.03</javadocs>
    </averages>
    <ncss>843.00</ncss>
  </objects>

  <functions>
    <function>
      <name>AbstractSyntax.BaseNode.BaseNode(CommonTree)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNode.implodeParserTree(CommonTree)</name>
      <ncss>21</ncss>
      <ccn>11</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNode.createAbstactSyntaxNode(CommonTree)</name>
      <ncss>68</ncss>
      <ccn>64</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNode.addAbstactSyntaxChildNode(BaseNode,BaseNode)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNode.addChildNode(BaseNode)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNode.isValid()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNode.canSplit()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNode.split()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNode.eval(Execution.Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNodeWithID.BaseNodeWithID(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNodeWithID.getID()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNodeWithID.setID(ID)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNodeWithID.addChildNode(AbstractSyntax.BaseNode)</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNodeWithID.isValid()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.BaseDeclaration.BaseDeclaration(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.BaseDeclarationList.BaseDeclarationList(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.BaseDeclarationList.getItems()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.BaseDeclarationList.getItem(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.BaseDeclarationList.addChildNode(BaseNode)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.BaseDeclarationList.eval(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Const.Const(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Const.getExpression()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Const.addChildNode(AbstractSyntax.BaseNode)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Const.isValid()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Const.eval(Scope)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Var.Var(CommonTree)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Var.isArray()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Var.getArrayLength()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Var.getArrayLength(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Var.getDataType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Var.addChildNode(BaseNode)</name>
      <ncss>15</ncss>
      <ccn>11</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Var.isValid()</name>
      <ncss>2</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Var.canSplit()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Var.split()</name>
      <ncss>14</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Var.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.VarRef.VarRef(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.ID.ID(CommonTree)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.ID.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.ID.getIndex()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.ID.getIndex(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.ID.addChildNode(AbstractSyntax.BaseNode)</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.ID.isValid()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.ID.equals(Object)</name>
      <ncss>6</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.ID.hashCode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.ID.eval(Execution.Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Assign.Assign(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Assign.addChildNode(BaseNode)</name>
      <ncss>8</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Assign.isValid()</name>
      <ncss>2</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Assign.eval(Execution.Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseStatement.BaseStatement(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseStatementList.BaseStatementList(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseStatementList.addChildNode(BaseNode)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseStatementList.isValid()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseStatementList.eval(Scope)</name>
      <ncss>6</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseWithCondition.BaseWithCondition(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseWithCondition.getExpression()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseWithCondition.addChildNode(BaseNode)</name>
      <ncss>7</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseWithCondition.isValid()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseWithList.BaseWithList(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseWithList.getStatements()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseWithList.addChildNode(BaseNode)</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseWithList.isValid()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Call.Call(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Call.getCallVars()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Call.getCallVar(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Call.setCallConcrete(CallConcrete)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Call.addChildNode(BaseNode)</name>
      <ncss>15</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Call.isValid()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Call.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcrete.CallConcrete()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcrete.getCallVar(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcrete.getCallVars()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcrete.setCall(Call)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcrete.addChildNode(BaseNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcreteAssert.CallConcreteAssert(boolean)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcreteAssert.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcreteDefault.CallConcreteDefault(ID)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcreteDefault.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcreteRead.eval(Scope)</name>
      <ncss>8</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcreteWrite.eval(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcreteWriteLn.eval(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallVars.CallVars(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallVars.getItems()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallVars.getItem(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallVars.addChildNode(BaseNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallVars.eval(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Expression.Expression(CommonTree)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Expression.determineOperator(CommonTree)</name>
      <ncss>32</ncss>
      <ccn>29</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Expression.getLeft()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Expression.getRight()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Expression.getOperator()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Expression.addChildNode(BaseNode)</name>
      <ncss>8</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Expression.isValid()</name>
      <ncss>2</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Expression.eval(Execution.Scope)</name>
      <ncss>35</ncss>
      <ccn>40</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.If.If(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.If.getElsIfs()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.If.getElseStatement()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.If.addChildNode(BaseNode)</name>
      <ncss>10</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.If.eval(Scope)</name>
      <ncss>9</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.IfPartForElse.IfPartForElse(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.IfPartForElsIf.IfPartForElsIf(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.IfPartForElsIf.eval(Scope)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.IfPartForThen.IfPartForThen(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.While.While(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.While.eval(Scope)</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Body.Body(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Body.getDeclarations()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Body.addChildNode(BaseNode)</name>
      <ncss>7</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Module.Module(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Module.getDeclarations()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Module.getStatements()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Module.addChildNode(BaseNode)</name>
      <ncss>10</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Module.isValid()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Module.eval()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Module.eval(Execution.Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Procedure.Procedure(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Procedure.getInputVar(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Procedure.getBody()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Procedure.addChildNode(BaseNode)</name>
      <ncss>10</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Procedure.isValid()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Procedure.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Types.Int.Int(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Types.Int.addChildNode(BaseNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Types.Int.eval(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Types.IntValue.IntValue(CommonTree)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Types.IntValue.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Types.IntValue.setValue(String)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Types.IntValue.addChildNode(BaseNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Types.IntValue.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.Scope.Scope(BaseDeclarationList,Scope)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.Scope.Scope(CallVars,Procedure,Scope)</name>
      <ncss>12</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.Scope.addProcedure(Procedure)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.Scope.addValue(ID,ScopeValueBase)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.Scope.createValue(BaseNode,ID)</name>
      <ncss>4</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.Scope.getValue(ID)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>Execution.Scope.getValueReference(ID)</name>
      <ncss>8</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.Scope.setValue(ID,int)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>Execution.Scope.callProcedure(ID,CallVars)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>Execution.Scope.callProcedure(ID,CallVars,Scope)</name>
      <ncss>9</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueBase.getValue(Scope,BaseNode)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueBase.setValue(Scope,BaseNode,int)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueBase.getValueReference(Scope,ID)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueInt.ScopeValueInt(Scope,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueInt.getValue(Scope,BaseNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueInt.setValue(Scope,BaseNode,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueInt.getValueReference(Scope,ID)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueIntArray.ScopeValueIntArray(Scope,Var)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueIntArray.getValue(Scope,BaseNode)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueIntArray.setValue(Scope,BaseNode,int)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueIntArray.getValueReference(Scope,ID)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function_averages>
      <ncss>4.25</ncss>
      <ccn>2.90</ccn>
      <javadocs>0.25</javadocs>
    </function_averages>
    <ncss>843.00</ncss>
  </functions>
</javancss>
