/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.node;

import oberon.analysis.*;

@SuppressWarnings("nls")
public final class ATerm extends PTerm
{
    private PFactor _factor_;
    private PAdditionaloperations _additionaloperations_;

    public ATerm()
    {
        // Constructor
    }

    public ATerm(
        @SuppressWarnings("hiding") PFactor _factor_,
        @SuppressWarnings("hiding") PAdditionaloperations _additionaloperations_)
    {
        // Constructor
        setFactor(_factor_);

        setAdditionaloperations(_additionaloperations_);

    }

    @Override
    public Object clone()
    {
        return new ATerm(
            cloneNode(this._factor_),
            cloneNode(this._additionaloperations_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATerm(this);
    }

    public PFactor getFactor()
    {
        return this._factor_;
    }

    public void setFactor(PFactor node)
    {
        if(this._factor_ != null)
        {
            this._factor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._factor_ = node;
    }

    public PAdditionaloperations getAdditionaloperations()
    {
        return this._additionaloperations_;
    }

    public void setAdditionaloperations(PAdditionaloperations node)
    {
        if(this._additionaloperations_ != null)
        {
            this._additionaloperations_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._additionaloperations_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._factor_)
            + toString(this._additionaloperations_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._factor_ == child)
        {
            this._factor_ = null;
            return;
        }

        if(this._additionaloperations_ == child)
        {
            this._additionaloperations_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._factor_ == oldChild)
        {
            setFactor((PFactor) newChild);
            return;
        }

        if(this._additionaloperations_ == oldChild)
        {
            setAdditionaloperations((PAdditionaloperations) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
