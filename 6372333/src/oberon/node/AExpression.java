/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.node;

import oberon.analysis.*;

@SuppressWarnings("nls")
public final class AExpression extends PExpression
{
    private PSimpleexpression _simpleexpression_;
    private PSimpleexpressionevaluation _simpleexpressionevaluation_;

    public AExpression()
    {
        // Constructor
    }

    public AExpression(
        @SuppressWarnings("hiding") PSimpleexpression _simpleexpression_,
        @SuppressWarnings("hiding") PSimpleexpressionevaluation _simpleexpressionevaluation_)
    {
        // Constructor
        setSimpleexpression(_simpleexpression_);

        setSimpleexpressionevaluation(_simpleexpressionevaluation_);

    }

    @Override
    public Object clone()
    {
        return new AExpression(
            cloneNode(this._simpleexpression_),
            cloneNode(this._simpleexpressionevaluation_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpression(this);
    }

    public PSimpleexpression getSimpleexpression()
    {
        return this._simpleexpression_;
    }

    public void setSimpleexpression(PSimpleexpression node)
    {
        if(this._simpleexpression_ != null)
        {
            this._simpleexpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleexpression_ = node;
    }

    public PSimpleexpressionevaluation getSimpleexpressionevaluation()
    {
        return this._simpleexpressionevaluation_;
    }

    public void setSimpleexpressionevaluation(PSimpleexpressionevaluation node)
    {
        if(this._simpleexpressionevaluation_ != null)
        {
            this._simpleexpressionevaluation_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleexpressionevaluation_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._simpleexpression_)
            + toString(this._simpleexpressionevaluation_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._simpleexpression_ == child)
        {
            this._simpleexpression_ = null;
            return;
        }

        if(this._simpleexpressionevaluation_ == child)
        {
            this._simpleexpressionevaluation_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._simpleexpression_ == oldChild)
        {
            setSimpleexpression((PSimpleexpression) newChild);
            return;
        }

        if(this._simpleexpressionevaluation_ == oldChild)
        {
            setSimpleexpressionevaluation((PSimpleexpressionevaluation) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
