/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.node;

import oberon.analysis.*;

@SuppressWarnings("nls")
public final class AExsmallerExpressionoperator extends PExpressionoperator
{
    private TExst _exst_;

    public AExsmallerExpressionoperator()
    {
        // Constructor
    }

    public AExsmallerExpressionoperator(
        @SuppressWarnings("hiding") TExst _exst_)
    {
        // Constructor
        setExst(_exst_);

    }

    @Override
    public Object clone()
    {
        return new AExsmallerExpressionoperator(
            cloneNode(this._exst_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExsmallerExpressionoperator(this);
    }

    public TExst getExst()
    {
        return this._exst_;
    }

    public void setExst(TExst node)
    {
        if(this._exst_ != null)
        {
            this._exst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exst_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exst_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exst_ == child)
        {
            this._exst_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exst_ == oldChild)
        {
            setExst((TExst) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
