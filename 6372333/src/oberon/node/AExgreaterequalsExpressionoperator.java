/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.node;

import oberon.analysis.*;

@SuppressWarnings("nls")
public final class AExgreaterequalsExpressionoperator extends PExpressionoperator
{
    private TExge _exge_;

    public AExgreaterequalsExpressionoperator()
    {
        // Constructor
    }

    public AExgreaterequalsExpressionoperator(
        @SuppressWarnings("hiding") TExge _exge_)
    {
        // Constructor
        setExge(_exge_);

    }

    @Override
    public Object clone()
    {
        return new AExgreaterequalsExpressionoperator(
            cloneNode(this._exge_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExgreaterequalsExpressionoperator(this);
    }

    public TExge getExge()
    {
        return this._exge_;
    }

    public void setExge(TExge node)
    {
        if(this._exge_ != null)
        {
            this._exge_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exge_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exge_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exge_ == child)
        {
            this._exge_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exge_ == oldChild)
        {
            setExge((TExge) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
