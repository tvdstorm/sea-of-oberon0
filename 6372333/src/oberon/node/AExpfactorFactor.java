/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.node;

import oberon.analysis.*;

@SuppressWarnings("nls")
public final class AExpfactorFactor extends PFactor
{
    private TRPar _rPar_;
    private PExpression _expression_;
    private TLPar _lPar_;

    public AExpfactorFactor()
    {
        // Constructor
    }

    public AExpfactorFactor(
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TLPar _lPar_)
    {
        // Constructor
        setRPar(_rPar_);

        setExpression(_expression_);

        setLPar(_lPar_);

    }

    @Override
    public Object clone()
    {
        return new AExpfactorFactor(
            cloneNode(this._rPar_),
            cloneNode(this._expression_),
            cloneNode(this._lPar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpfactorFactor(this);
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._rPar_)
            + toString(this._expression_)
            + toString(this._lPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
