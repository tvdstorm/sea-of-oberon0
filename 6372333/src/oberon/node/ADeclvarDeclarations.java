/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.node;

import java.util.*;
import oberon.analysis.*;

@SuppressWarnings("nls")
public final class ADeclvarDeclarations extends PDeclarations
{
    private TVartxt _vartxt_;
    private final LinkedList<PVardeclaration> _vardeclaration_ = new LinkedList<PVardeclaration>();

    public ADeclvarDeclarations()
    {
        // Constructor
    }

    public ADeclvarDeclarations(
        @SuppressWarnings("hiding") TVartxt _vartxt_,
        @SuppressWarnings("hiding") List<PVardeclaration> _vardeclaration_)
    {
        // Constructor
        setVartxt(_vartxt_);

        setVardeclaration(_vardeclaration_);

    }

    @Override
    public Object clone()
    {
        return new ADeclvarDeclarations(
            cloneNode(this._vartxt_),
            cloneList(this._vardeclaration_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADeclvarDeclarations(this);
    }

    public TVartxt getVartxt()
    {
        return this._vartxt_;
    }

    public void setVartxt(TVartxt node)
    {
        if(this._vartxt_ != null)
        {
            this._vartxt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._vartxt_ = node;
    }

    public LinkedList<PVardeclaration> getVardeclaration()
    {
        return this._vardeclaration_;
    }

    public void setVardeclaration(List<PVardeclaration> list)
    {
        this._vardeclaration_.clear();
        this._vardeclaration_.addAll(list);
        for(PVardeclaration e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._vartxt_)
            + toString(this._vardeclaration_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._vartxt_ == child)
        {
            this._vartxt_ = null;
            return;
        }

        if(this._vardeclaration_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._vartxt_ == oldChild)
        {
            setVartxt((TVartxt) newChild);
            return;
        }

        for(ListIterator<PVardeclaration> i = this._vardeclaration_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVardeclaration) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
