/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.node;

import oberon.analysis.*;

@SuppressWarnings("nls")
public final class AProcedureheading extends PProcedureheading
{
    private TProceduretxt _proceduretxt_;
    private TIdentifier _identifier_;
    private PFormalparams _formalparams_;

    public AProcedureheading()
    {
        // Constructor
    }

    public AProcedureheading(
        @SuppressWarnings("hiding") TProceduretxt _proceduretxt_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") PFormalparams _formalparams_)
    {
        // Constructor
        setProceduretxt(_proceduretxt_);

        setIdentifier(_identifier_);

        setFormalparams(_formalparams_);

    }

    @Override
    public Object clone()
    {
        return new AProcedureheading(
            cloneNode(this._proceduretxt_),
            cloneNode(this._identifier_),
            cloneNode(this._formalparams_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProcedureheading(this);
    }

    public TProceduretxt getProceduretxt()
    {
        return this._proceduretxt_;
    }

    public void setProceduretxt(TProceduretxt node)
    {
        if(this._proceduretxt_ != null)
        {
            this._proceduretxt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._proceduretxt_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public PFormalparams getFormalparams()
    {
        return this._formalparams_;
    }

    public void setFormalparams(PFormalparams node)
    {
        if(this._formalparams_ != null)
        {
            this._formalparams_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._formalparams_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._proceduretxt_)
            + toString(this._identifier_)
            + toString(this._formalparams_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._proceduretxt_ == child)
        {
            this._proceduretxt_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._formalparams_ == child)
        {
            this._formalparams_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._proceduretxt_ == oldChild)
        {
            setProceduretxt((TProceduretxt) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._formalparams_ == oldChild)
        {
            setFormalparams((PFormalparams) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
