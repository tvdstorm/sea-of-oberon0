/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.analysis;

import oberon.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseADeclconstDeclarations(ADeclconstDeclarations node);
    void caseADecltypeDeclarations(ADecltypeDeclarations node);
    void caseADeclvarDeclarations(ADeclvarDeclarations node);
    void caseADeclproceduredeclarationDeclarations(ADeclproceduredeclarationDeclarations node);
    void caseABegstat(ABegstat node);
    void caseAAssignment(AAssignment node);
    void caseATypedeclaration(ATypedeclaration node);
    void caseAStatementsequence(AStatementsequence node);
    void caseADeclproceduredeclaration(ADeclproceduredeclaration node);
    void caseAVardeclaration(AVardeclaration node);
    void caseAExpression(AExpression node);
    void caseAIdtypeType(AIdtypeType node);
    void caseAArrtypeType(AArrtypeType node);
    void caseARectypeType(ARectypeType node);
    void caseAStatassStatement(AStatassStatement node);
    void caseAStatprocStatement(AStatprocStatement node);
    void caseAStatifStatement(AStatifStatement node);
    void caseAStatwhiStatement(AStatwhiStatement node);
    void caseAStatnoneStatement(AStatnoneStatement node);
    void caseAIdentlist(AIdentlist node);
    void caseAProceduredeclaration(AProceduredeclaration node);
    void caseAAndstatement(AAndstatement node);
    void caseAAndidentifier(AAndidentifier node);
    void caseASimpleexpressionevaluation(ASimpleexpressionevaluation node);
    void caseASimpleexpression(ASimpleexpression node);
    void caseARecordtype(ARecordtype node);
    void caseAArraytype(AArraytype node);
    void caseAWhilestatement(AWhilestatement node);
    void caseAIfstatement(AIfstatement node);
    void caseAProcedurecall(AProcedurecall node);
    void caseAProcedureheading(AProcedureheading node);
    void caseAProcedurebody(AProcedurebody node);
    void caseAExprequalsExpressionoperator(AExprequalsExpressionoperator node);
    void caseAExprhashExpressionoperator(AExprhashExpressionoperator node);
    void caseAExgreaterExpressionoperator(AExgreaterExpressionoperator node);
    void caseAExgreaterequalsExpressionoperator(AExgreaterequalsExpressionoperator node);
    void caseAExsmallerExpressionoperator(AExsmallerExpressionoperator node);
    void caseAExsmallerequalsExpressionoperator(AExsmallerequalsExpressionoperator node);
    void caseAPlusPlusorminus(APlusPlusorminus node);
    void caseAMinusPlusorminus(AMinusPlusorminus node);
    void caseATerm(ATerm node);
    void caseAMoreterms(AMoreterms node);
    void caseAFieldlistFieldlist(AFieldlistFieldlist node);
    void caseAListnoneFieldlist(AListnoneFieldlist node);
    void caseAMorefields(AMorefields node);
    void caseAElsif(AElsif node);
    void caseAElse(AElse node);
    void caseAActualparams(AActualparams node);
    void caseAFormalparams(AFormalparams node);
    void caseAProcedurebodystatements(AProcedurebodystatements node);
    void caseAAdditionaloperations(AAdditionaloperations node);
    void caseAIdfactorFactor(AIdfactorFactor node);
    void caseAIntfactorFactor(AIntfactorFactor node);
    void caseAExpfactorFactor(AExpfactorFactor node);
    void caseATilfactorFactor(ATilfactorFactor node);
    void caseAActualparameters(AActualparameters node);
    void caseAFormalparameters(AFormalparameters node);
    void caseAPlusPlusorminusoror(APlusPlusorminusoror node);
    void caseAMinusPlusorminusoror(AMinusPlusorminusoror node);
    void caseAOrPlusorminusoror(AOrPlusorminusoror node);
    void caseADotselectorSelector(ADotselectorSelector node);
    void caseAArrselectorSelector(AArrselectorSelector node);
    void caseATermmultTermoperator(ATermmultTermoperator node);
    void caseATermdivTermoperator(ATermdivTermoperator node);
    void caseATermmodTermoperator(ATermmodTermoperator node);
    void caseATermampTermoperator(ATermampTermoperator node);
    void caseAFpsection(AFpsection node);
    void caseAMoreactualparameters(AMoreactualparameters node);
    void caseAPlusOperator(APlusOperator node);
    void caseAMinusOperator(AMinusOperator node);
    void caseAMultiplyOperator(AMultiplyOperator node);
    void caseADivOperator(ADivOperator node);
    void caseAModOperator(AModOperator node);

    void caseTDot(TDot node);
    void caseTLBkt(TLBkt node);
    void caseTLBrc(TLBrc node);
    void caseTLPar(TLPar node);
    void caseTRBkt(TRBkt node);
    void caseTRBrc(TRBrc node);
    void caseTRPar(TRPar node);
    void caseTTilde(TTilde node);
    void caseTComma(TComma node);
    void caseTColon(TColon node);
    void caseTPlus(TPlus node);
    void caseTMult(TMult node);
    void caseTMin(TMin node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTAmp(TAmp node);
    void caseTAss(TAss node);
    void caseTSemi(TSemi node);
    void caseTExeq(TExeq node);
    void caseTExha(TExha node);
    void caseTExst(TExst node);
    void caseTExse(TExse node);
    void caseTExgt(TExgt node);
    void caseTExge(TExge node);
    void caseTModuletxt(TModuletxt node);
    void caseTConsttxt(TConsttxt node);
    void caseTTypetxt(TTypetxt node);
    void caseTVartxt(TVartxt node);
    void caseTBegintxt(TBegintxt node);
    void caseTEndtxt(TEndtxt node);
    void caseTRecordtxt(TRecordtxt node);
    void caseTArraytxt(TArraytxt node);
    void caseTOftxt(TOftxt node);
    void caseTWhiletxt(TWhiletxt node);
    void caseTDotxt(TDotxt node);
    void caseTIftxt(TIftxt node);
    void caseTThentxt(TThentxt node);
    void caseTElsiftxt(TElsiftxt node);
    void caseTElsetxt(TElsetxt node);
    void caseTProceduretxt(TProceduretxt node);
    void caseTOrtxt(TOrtxt node);
    void caseTSptxt(TSptxt node);
    void caseTInteger(TInteger node);
    void caseTIdentifier(TIdentifier node);
    void caseTBlankNewline(TBlankNewline node);
    void caseTBlankWhitespace(TBlankWhitespace node);
    void caseTTab(TTab node);
    void caseEOF(EOF node);
}
