/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.parser;

import oberon.lexer.*;
import oberon.node.*;
import oberon.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAwithstatmodule1Module */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAwithstatmodule2Module */
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce ANostatModule */
		    {
			ArrayList list = new2();
			push(goTo(0), list);
		    }
		    break;
                    case 3: /* reduce AAdeclarations1Declarations */
		    {
			ArrayList list = new3();
			push(goTo(1), list);
		    }
		    break;
                    case 4: /* reduce AAdeclarations2Declarations */
		    {
			ArrayList list = new4();
			push(goTo(1), list);
		    }
		    break;
                    case 5: /* reduce AAdeclarations3Declarations */
		    {
			ArrayList list = new5();
			push(goTo(1), list);
		    }
		    break;
                    case 6: /* reduce AAdeclarations4Declarations */
		    {
			ArrayList list = new6();
			push(goTo(1), list);
		    }
		    break;
                    case 7: /* reduce AAdeclarations5Declarations */
		    {
			ArrayList list = new7();
			push(goTo(1), list);
		    }
		    break;
                    case 8: /* reduce AAdeclarations6Declarations */
		    {
			ArrayList list = new8();
			push(goTo(1), list);
		    }
		    break;
                    case 9: /* reduce AAdeclarations7Declarations */
		    {
			ArrayList list = new9();
			push(goTo(1), list);
		    }
		    break;
                    case 10: /* reduce AAdeclarations8Declarations */
		    {
			ArrayList list = new10();
			push(goTo(1), list);
		    }
		    break;
                    case 11: /* reduce AAdeclarations9Declarations */
		    {
			ArrayList list = new11();
			push(goTo(1), list);
		    }
		    break;
                    case 12: /* reduce AAdeclarations10Declarations */
		    {
			ArrayList list = new12();
			push(goTo(1), list);
		    }
		    break;
                    case 13: /* reduce AAdeclarations11Declarations */
		    {
			ArrayList list = new13();
			push(goTo(1), list);
		    }
		    break;
                    case 14: /* reduce AAdeclarations12Declarations */
		    {
			ArrayList list = new14();
			push(goTo(1), list);
		    }
		    break;
                    case 15: /* reduce AAdeclarations13Declarations */
		    {
			ArrayList list = new15();
			push(goTo(1), list);
		    }
		    break;
                    case 16: /* reduce AAdeclarations14Declarations */
		    {
			ArrayList list = new16();
			push(goTo(1), list);
		    }
		    break;
                    case 17: /* reduce AAdeclarations15Declarations */
		    {
			ArrayList list = new17();
			push(goTo(1), list);
		    }
		    break;
                    case 18: /* reduce AAdeclarations16Declarations */
		    {
			ArrayList list = new18();
			push(goTo(1), list);
		    }
		    break;
                    case 19: /* reduce AStatementStatements */
		    {
			ArrayList list = new19();
			push(goTo(2), list);
		    }
		    break;
                    case 20: /* reduce AMoreStatements */
		    {
			ArrayList list = new20();
			push(goTo(2), list);
		    }
		    break;
                    case 21: /* reduce AStatassStatement */
		    {
			ArrayList list = new21();
			push(goTo(3), list);
		    }
		    break;
                    case 22: /* reduce AStatifStatement */
		    {
			ArrayList list = new22();
			push(goTo(3), list);
		    }
		    break;
                    case 23: /* reduce AReadprocStatement */
		    {
			ArrayList list = new23();
			push(goTo(3), list);
		    }
		    break;
                    case 24: /* reduce AWriteprocStatement */
		    {
			ArrayList list = new24();
			push(goTo(3), list);
		    }
		    break;
                    case 25: /* reduce AWritelnprocStatement */
		    {
			ArrayList list = new25();
			push(goTo(3), list);
		    }
		    break;
                    case 26: /* reduce AStatprocStatement */
		    {
			ArrayList list = new26();
			push(goTo(3), list);
		    }
		    break;
                    case 27: /* reduce AStatwhileStatement */
		    {
			ArrayList list = new27();
			push(goTo(3), list);
		    }
		    break;
                    case 28: /* reduce AReadproc */
		    {
			ArrayList list = new28();
			push(goTo(4), list);
		    }
		    break;
                    case 29: /* reduce AWriteproc */
		    {
			ArrayList list = new29();
			push(goTo(5), list);
		    }
		    break;
                    case 30: /* reduce AWritelnproc */
		    {
			ArrayList list = new30();
			push(goTo(6), list);
		    }
		    break;
                    case 31: /* reduce AConstdeclarationConstdeclarations */
		    {
			ArrayList list = new31();
			push(goTo(7), list);
		    }
		    break;
                    case 32: /* reduce AMoreConstdeclarations */
		    {
			ArrayList list = new32();
			push(goTo(7), list);
		    }
		    break;
                    case 33: /* reduce AAconstdecl1Constdecl */
		    {
			ArrayList list = new33();
			push(goTo(8), list);
		    }
		    break;
                    case 34: /* reduce AAconstdecl2Constdecl */
		    {
			ArrayList list = new34();
			push(goTo(8), list);
		    }
		    break;
                    case 35: /* reduce AAconstdeclaration1Constdeclaration */
		    {
			ArrayList list = new35();
			push(goTo(9), list);
		    }
		    break;
                    case 36: /* reduce AAconstdeclaration2Constdeclaration */
		    {
			ArrayList list = new36();
			push(goTo(9), list);
		    }
		    break;
                    case 37: /* reduce ATypedeclarationTypedeclarations */
		    {
			ArrayList list = new37();
			push(goTo(10), list);
		    }
		    break;
                    case 38: /* reduce AMoreTypedeclarations */
		    {
			ArrayList list = new38();
			push(goTo(10), list);
		    }
		    break;
                    case 39: /* reduce AAtypedecl1Typedecl */
		    {
			ArrayList list = new39();
			push(goTo(11), list);
		    }
		    break;
                    case 40: /* reduce AAtypedecl2Typedecl */
		    {
			ArrayList list = new40();
			push(goTo(11), list);
		    }
		    break;
                    case 41: /* reduce AAtypedeclaration1Typedeclaration */
		    {
			ArrayList list = new41();
			push(goTo(12), list);
		    }
		    break;
                    case 42: /* reduce AAtypedeclaration2Typedeclaration */
		    {
			ArrayList list = new42();
			push(goTo(12), list);
		    }
		    break;
                    case 43: /* reduce AVardeclarationVardeclarations */
		    {
			ArrayList list = new43();
			push(goTo(13), list);
		    }
		    break;
                    case 44: /* reduce AMoreVardeclarations */
		    {
			ArrayList list = new44();
			push(goTo(13), list);
		    }
		    break;
                    case 45: /* reduce AAvardecl1Vardecl */
		    {
			ArrayList list = new45();
			push(goTo(14), list);
		    }
		    break;
                    case 46: /* reduce AAvardecl2Vardecl */
		    {
			ArrayList list = new46();
			push(goTo(14), list);
		    }
		    break;
                    case 47: /* reduce AVardeclaration */
		    {
			ArrayList list = new47();
			push(goTo(15), list);
		    }
		    break;
                    case 48: /* reduce AAssignment */
		    {
			ArrayList list = new48();
			push(goTo(16), list);
		    }
		    break;
                    case 49: /* reduce AArrayType */
		    {
			ArrayList list = new49();
			push(goTo(17), list);
		    }
		    break;
                    case 50: /* reduce ARecordType */
		    {
			ArrayList list = new50();
			push(goTo(17), list);
		    }
		    break;
                    case 51: /* reduce AIdentifierType */
		    {
			ArrayList list = new51();
			push(goTo(17), list);
		    }
		    break;
                    case 52: /* reduce AIdentifierIdentifiers */
		    {
			ArrayList list = new52();
			push(goTo(18), list);
		    }
		    break;
                    case 53: /* reduce AMoreIdentifiers */
		    {
			ArrayList list = new53();
			push(goTo(18), list);
		    }
		    break;
                    case 54: /* reduce AProceduredeclaration */
		    {
			ArrayList list = new54();
			push(goTo(19), list);
		    }
		    break;
                    case 55: /* reduce AAprocedurecall1Procedurecall */
		    {
			ArrayList list = new55();
			push(goTo(20), list);
		    }
		    break;
                    case 56: /* reduce AAprocedurecall2Procedurecall */
		    {
			ArrayList list = new56();
			push(goTo(20), list);
		    }
		    break;
                    case 57: /* reduce AAprocedureheading1Procedureheading */
		    {
			ArrayList list = new57();
			push(goTo(21), list);
		    }
		    break;
                    case 58: /* reduce AAprocedureheading2Procedureheading */
		    {
			ArrayList list = new58();
			push(goTo(21), list);
		    }
		    break;
                    case 59: /* reduce AAwithstatprocedurebody1Procedurebody */
		    {
			ArrayList list = new59();
			push(goTo(22), list);
		    }
		    break;
                    case 60: /* reduce AAwithstatprocedurebody2Procedurebody */
		    {
			ArrayList list = new60();
			push(goTo(22), list);
		    }
		    break;
                    case 61: /* reduce ANostatProcedurebody */
		    {
			ArrayList list = new61();
			push(goTo(22), list);
		    }
		    break;
                    case 62: /* reduce AActualparameters */
		    {
			ArrayList list = new62();
			push(goTo(23), list);
		    }
		    break;
                    case 63: /* reduce AFormalparameters */
		    {
			ArrayList list = new63();
			push(goTo(24), list);
		    }
		    break;
                    case 64: /* reduce AFpsectionFpsections */
		    {
			ArrayList list = new64();
			push(goTo(25), list);
		    }
		    break;
                    case 65: /* reduce AMoreFpsections */
		    {
			ArrayList list = new65();
			push(goTo(25), list);
		    }
		    break;
                    case 66: /* reduce AAfpsection1Fpsection */
		    {
			ArrayList list = new66();
			push(goTo(26), list);
		    }
		    break;
                    case 67: /* reduce AAfpsection2Fpsection */
		    {
			ArrayList list = new67();
			push(goTo(26), list);
		    }
		    break;
                    case 68: /* reduce AWhilestatement */
		    {
			ArrayList list = new68();
			push(goTo(27), list);
		    }
		    break;
                    case 69: /* reduce AAifstatement1Ifstatement */
		    {
			ArrayList list = new69();
			push(goTo(28), list);
		    }
		    break;
                    case 70: /* reduce AAifstatement2Ifstatement */
		    {
			ArrayList list = new70();
			push(goTo(28), list);
		    }
		    break;
                    case 71: /* reduce AAifstatement3Ifstatement */
		    {
			ArrayList list = new71();
			push(goTo(28), list);
		    }
		    break;
                    case 72: /* reduce AAifstatement4Ifstatement */
		    {
			ArrayList list = new72();
			push(goTo(28), list);
		    }
		    break;
                    case 73: /* reduce AElsif */
		    {
			ArrayList list = new73();
			push(goTo(29), list);
		    }
		    break;
                    case 74: /* reduce AElse */
		    {
			ArrayList list = new74();
			push(goTo(30), list);
		    }
		    break;
                    case 75: /* reduce AAfieldlst1Fieldlst */
		    {
			ArrayList list = new75();
			push(goTo(31), list);
		    }
		    break;
                    case 76: /* reduce AAfieldlst2Fieldlst */
		    {
			ArrayList list = new76();
			push(goTo(31), list);
		    }
		    break;
                    case 77: /* reduce AFieldlstFieldlsts */
		    {
			ArrayList list = new77();
			push(goTo(32), list);
		    }
		    break;
                    case 78: /* reduce AMoreFieldlsts */
		    {
			ArrayList list = new78();
			push(goTo(32), list);
		    }
		    break;
                    case 79: /* reduce AFieldlist */
		    {
			ArrayList list = new79();
			push(goTo(33), list);
		    }
		    break;
                    case 80: /* reduce AExpExps */
		    {
			ArrayList list = new80();
			push(goTo(34), list);
		    }
		    break;
                    case 81: /* reduce AMoreExps */
		    {
			ArrayList list = new81();
			push(goTo(34), list);
		    }
		    break;
                    case 82: /* reduce AAddExp */
		    {
			ArrayList list = new82();
			push(goTo(35), list);
		    }
		    break;
                    case 83: /* reduce ASubExp */
		    {
			ArrayList list = new83();
			push(goTo(35), list);
		    }
		    break;
                    case 84: /* reduce AExeqExp */
		    {
			ArrayList list = new84();
			push(goTo(35), list);
		    }
		    break;
                    case 85: /* reduce AExhaExp */
		    {
			ArrayList list = new85();
			push(goTo(35), list);
		    }
		    break;
                    case 86: /* reduce AExstExp */
		    {
			ArrayList list = new86();
			push(goTo(35), list);
		    }
		    break;
                    case 87: /* reduce AExseExp */
		    {
			ArrayList list = new87();
			push(goTo(35), list);
		    }
		    break;
                    case 88: /* reduce AExgtExp */
		    {
			ArrayList list = new88();
			push(goTo(35), list);
		    }
		    break;
                    case 89: /* reduce AExgeExp */
		    {
			ArrayList list = new89();
			push(goTo(35), list);
		    }
		    break;
                    case 90: /* reduce AFactorExp */
		    {
			ArrayList list = new90();
			push(goTo(35), list);
		    }
		    break;
                    case 91: /* reduce AMulFactor */
		    {
			ArrayList list = new91();
			push(goTo(36), list);
		    }
		    break;
                    case 92: /* reduce ADivFactor */
		    {
			ArrayList list = new92();
			push(goTo(36), list);
		    }
		    break;
                    case 93: /* reduce AModFactor */
		    {
			ArrayList list = new93();
			push(goTo(36), list);
		    }
		    break;
                    case 94: /* reduce AAmpFactor */
		    {
			ArrayList list = new94();
			push(goTo(36), list);
		    }
		    break;
                    case 95: /* reduce ATilFactor */
		    {
			ArrayList list = new95();
			push(goTo(36), list);
		    }
		    break;
                    case 96: /* reduce AUnaryFactor */
		    {
			ArrayList list = new96();
			push(goTo(36), list);
		    }
		    break;
                    case 97: /* reduce AIntegerUnary */
		    {
			ArrayList list = new97();
			push(goTo(37), list);
		    }
		    break;
                    case 98: /* reduce ASelectorUnary */
		    {
			ArrayList list = new98();
			push(goTo(37), list);
		    }
		    break;
                    case 99: /* reduce AParenUnary */
		    {
			ArrayList list = new99();
			push(goTo(37), list);
		    }
		    break;
                    case 100: /* reduce ARecordselectorSelector */
		    {
			ArrayList list = new100();
			push(goTo(38), list);
		    }
		    break;
                    case 101: /* reduce AIdentifierSelector */
		    {
			ArrayList list = new101();
			push(goTo(38), list);
		    }
		    break;
                    case 102: /* reduce AArrayexpressionSelector */
		    {
			ArrayList list = new102();
			push(goTo(38), list);
		    }
		    break;
                    case 103: /* reduce ATerminal$Sptxt */
		    {
			ArrayList list = new103();
			push(goTo(39), list);
		    }
		    break;
                    case 104: /* reduce ANonTerminal$Sptxt */
		    {
			ArrayList list = new104();
			push(goTo(39), list);
		    }
		    break;
                    case 105: /* reduce ATerminal$Proceduredeclaration */
		    {
			ArrayList list = new105();
			push(goTo(40), list);
		    }
		    break;
                    case 106: /* reduce ANonTerminal$Proceduredeclaration */
		    {
			ArrayList list = new106();
			push(goTo(40), list);
		    }
		    break;
                    case 107: /* reduce ATerminal$Constdeclaration */
		    {
			ArrayList list = new107();
			push(goTo(41), list);
		    }
		    break;
                    case 108: /* reduce ANonTerminal$Constdeclaration */
		    {
			ArrayList list = new108();
			push(goTo(41), list);
		    }
		    break;
                    case 109: /* reduce ATerminal$Typedeclaration */
		    {
			ArrayList list = new109();
			push(goTo(42), list);
		    }
		    break;
                    case 110: /* reduce ANonTerminal$Typedeclaration */
		    {
			ArrayList list = new110();
			push(goTo(42), list);
		    }
		    break;
                    case 111: /* reduce ATerminal$Vardeclaration */
		    {
			ArrayList list = new111();
			push(goTo(43), list);
		    }
		    break;
                    case 112: /* reduce ANonTerminal$Vardeclaration */
		    {
			ArrayList list = new112();
			push(goTo(43), list);
		    }
		    break;
                    case 113: /* reduce ATerminal$Elsif */
		    {
			ArrayList list = new113();
			push(goTo(44), list);
		    }
		    break;
                    case 114: /* reduce ANonTerminal$Elsif */
		    {
			ArrayList list = new114();
			push(goTo(44), list);
		    }
		    break;
                    case 115: /* reduce ATerminal$Fieldlist */
		    {
			ArrayList list = new115();
			push(goTo(45), list);
		    }
		    break;
                    case 116: /* reduce ANonTerminal$Fieldlist */
		    {
			ArrayList list = new116();
			push(goTo(45), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PModule node1 = (PModule) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAwithstatmodule1Module */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModule pmoduleNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PDeclarations pdeclarationsNode3;
        LinkedList listNode5 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pdeclarationsNode3 = (PDeclarations)nodeArrayList4.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pmoduleNode1 = new AModule(tidentifierNode2, pdeclarationsNode3, listNode5);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAwithstatmodule2Module */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModule pmoduleNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PDeclarations pdeclarationsNode3;
        LinkedList listNode5 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pdeclarationsNode3 = (PDeclarations)nodeArrayList4.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList7.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pmoduleNode1 = new AModule(tidentifierNode2, pdeclarationsNode3, listNode5);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce ANostatModule */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModule pmoduleNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PDeclarations pdeclarationsNode3;
        LinkedList listNode4 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pdeclarationsNode3 = (PDeclarations)nodeArrayList4.get(0);
        {
            // Block
        }

        pmoduleNode1 = new AModule(tidentifierNode2, pdeclarationsNode3, listNode4);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAdeclarations1Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PDeclarations pdeclarationsNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        @SuppressWarnings("unused") Object nullNode3 = null;
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList listNode5 = new LinkedList();
        {
            // Block
        }

        pdeclarationsNode1 = new ADeclarations(null, null, null, listNode5);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAdeclarations2Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        PConstdecl pconstdeclNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList listNode5 = new LinkedList();
        pconstdeclNode2 = (PConstdecl)nodeArrayList1.get(0);
        {
            // Block
        }

        pdeclarationsNode1 = new ADeclarations(pconstdeclNode2, null, null, listNode5);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAdeclarations3Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PTypedecl ptypedeclNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList listNode5 = new LinkedList();
        ptypedeclNode3 = (PTypedecl)nodeArrayList1.get(0);
        {
            // Block
        }

        pdeclarationsNode1 = new ADeclarations(null, ptypedeclNode3, null, listNode5);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAdeclarations4Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        PConstdecl pconstdeclNode2;
        PTypedecl ptypedeclNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList listNode5 = new LinkedList();
        pconstdeclNode2 = (PConstdecl)nodeArrayList1.get(0);
        ptypedeclNode3 = (PTypedecl)nodeArrayList2.get(0);
        {
            // Block
        }

        pdeclarationsNode1 = new ADeclarations(pconstdeclNode2, ptypedeclNode3, null, listNode5);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAdeclarations5Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PVardecl pvardeclNode4;
        LinkedList listNode5 = new LinkedList();
        pvardeclNode4 = (PVardecl)nodeArrayList1.get(0);
        {
            // Block
        }

        pdeclarationsNode1 = new ADeclarations(null, null, pvardeclNode4, listNode5);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AAdeclarations6Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        PConstdecl pconstdeclNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PVardecl pvardeclNode4;
        LinkedList listNode5 = new LinkedList();
        pconstdeclNode2 = (PConstdecl)nodeArrayList1.get(0);
        pvardeclNode4 = (PVardecl)nodeArrayList2.get(0);
        {
            // Block
        }

        pdeclarationsNode1 = new ADeclarations(pconstdeclNode2, null, pvardeclNode4, listNode5);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAdeclarations7Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PTypedecl ptypedeclNode3;
        PVardecl pvardeclNode4;
        LinkedList listNode5 = new LinkedList();
        ptypedeclNode3 = (PTypedecl)nodeArrayList1.get(0);
        pvardeclNode4 = (PVardecl)nodeArrayList2.get(0);
        {
            // Block
        }

        pdeclarationsNode1 = new ADeclarations(null, ptypedeclNode3, pvardeclNode4, listNode5);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAdeclarations8Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        PConstdecl pconstdeclNode2;
        PTypedecl ptypedeclNode3;
        PVardecl pvardeclNode4;
        LinkedList listNode5 = new LinkedList();
        pconstdeclNode2 = (PConstdecl)nodeArrayList1.get(0);
        ptypedeclNode3 = (PTypedecl)nodeArrayList2.get(0);
        pvardeclNode4 = (PVardecl)nodeArrayList3.get(0);
        {
            // Block
        }

        pdeclarationsNode1 = new ADeclarations(pconstdeclNode2, ptypedeclNode3, pvardeclNode4, listNode5);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAdeclarations9Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        @SuppressWarnings("unused") Object nullNode3 = null;
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList listNode6 = new LinkedList();
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList1.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pdeclarationsNode1 = new ADeclarations(null, null, null, listNode6);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAdeclarations10Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        PConstdecl pconstdeclNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList listNode6 = new LinkedList();
        pconstdeclNode2 = (PConstdecl)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList2.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pdeclarationsNode1 = new ADeclarations(pconstdeclNode2, null, null, listNode6);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAdeclarations11Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PTypedecl ptypedeclNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList listNode6 = new LinkedList();
        ptypedeclNode3 = (PTypedecl)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList2.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pdeclarationsNode1 = new ADeclarations(null, ptypedeclNode3, null, listNode6);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AAdeclarations12Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        PConstdecl pconstdeclNode2;
        PTypedecl ptypedeclNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList listNode6 = new LinkedList();
        pconstdeclNode2 = (PConstdecl)nodeArrayList1.get(0);
        ptypedeclNode3 = (PTypedecl)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pdeclarationsNode1 = new ADeclarations(pconstdeclNode2, ptypedeclNode3, null, listNode6);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAdeclarations13Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PVardecl pvardeclNode4;
        LinkedList listNode6 = new LinkedList();
        pvardeclNode4 = (PVardecl)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList2.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pdeclarationsNode1 = new ADeclarations(null, null, pvardeclNode4, listNode6);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAdeclarations14Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        PConstdecl pconstdeclNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PVardecl pvardeclNode4;
        LinkedList listNode6 = new LinkedList();
        pconstdeclNode2 = (PConstdecl)nodeArrayList1.get(0);
        pvardeclNode4 = (PVardecl)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pdeclarationsNode1 = new ADeclarations(pconstdeclNode2, null, pvardeclNode4, listNode6);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAdeclarations15Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PTypedecl ptypedeclNode3;
        PVardecl pvardeclNode4;
        LinkedList listNode6 = new LinkedList();
        ptypedeclNode3 = (PTypedecl)nodeArrayList1.get(0);
        pvardeclNode4 = (PVardecl)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pdeclarationsNode1 = new ADeclarations(null, ptypedeclNode3, pvardeclNode4, listNode6);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AAdeclarations16Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        PConstdecl pconstdeclNode2;
        PTypedecl ptypedeclNode3;
        PVardecl pvardeclNode4;
        LinkedList listNode6 = new LinkedList();
        pconstdeclNode2 = (PConstdecl)nodeArrayList1.get(0);
        ptypedeclNode3 = (PTypedecl)nodeArrayList2.get(0);
        pvardeclNode4 = (PVardecl)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pdeclarationsNode1 = new ADeclarations(pconstdeclNode2, ptypedeclNode3, pvardeclNode4, listNode6);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AStatementStatements */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AMoreStatements */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AStatassStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PAssignment passignmentNode2;
        passignmentNode2 = (PAssignment)nodeArrayList1.get(0);

        pstatementNode1 = new AStatassStatement(passignmentNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AStatifStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIfstatement pifstatementNode2;
        pifstatementNode2 = (PIfstatement)nodeArrayList1.get(0);

        pstatementNode1 = new AStatifStatement(pifstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AReadprocStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PReadproc preadprocNode2;
        preadprocNode2 = (PReadproc)nodeArrayList1.get(0);

        pstatementNode1 = new AReadprocStatement(preadprocNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AWriteprocStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PWriteproc pwriteprocNode2;
        pwriteprocNode2 = (PWriteproc)nodeArrayList1.get(0);

        pstatementNode1 = new AWriteprocStatement(pwriteprocNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AWritelnprocStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PWritelnproc pwritelnprocNode2;
        pwritelnprocNode2 = (PWritelnproc)nodeArrayList1.get(0);

        pstatementNode1 = new AWritelnprocStatement(pwritelnprocNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AStatprocStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PProcedurecall pprocedurecallNode2;
        pprocedurecallNode2 = (PProcedurecall)nodeArrayList1.get(0);

        pstatementNode1 = new AStatprocStatement(pprocedurecallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AStatwhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PWhilestatement pwhilestatementNode2;
        pwhilestatementNode2 = (PWhilestatement)nodeArrayList1.get(0);

        pstatementNode1 = new AStatwhileStatement(pwhilestatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AReadproc */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReadproc preadprocNode1;
        {
            // Block
        PSelector pselectorNode2;
        pselectorNode2 = (PSelector)nodeArrayList3.get(0);

        preadprocNode1 = new AReadproc(pselectorNode2);
        }
	nodeList.add(preadprocNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AWriteproc */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PWriteproc pwriteprocNode1;
        {
            // Block
        PSelector pselectorNode2;
        pselectorNode2 = (PSelector)nodeArrayList3.get(0);

        pwriteprocNode1 = new AWriteproc(pselectorNode2);
        }
	nodeList.add(pwriteprocNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AWritelnproc */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PWritelnproc pwritelnprocNode1;
        {
            // Block

        pwritelnprocNode1 = new AWritelnproc();
        }
	nodeList.add(pwritelnprocNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AConstdeclarationConstdeclarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PConstdeclaration pconstdeclarationNode1;
        pconstdeclarationNode1 = (PConstdeclaration)nodeArrayList1.get(0);
	if(pconstdeclarationNode1 != null)
	{
	  listNode2.add(pconstdeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AMoreConstdeclarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PConstdeclaration pconstdeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pconstdeclarationNode2 = (PConstdeclaration)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pconstdeclarationNode2 != null)
	{
	  listNode3.add(pconstdeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AAconstdecl1Constdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConstdecl pconstdeclNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pconstdeclNode1 = new AConstdecl(listNode2);
        }
	nodeList.add(pconstdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AAconstdecl2Constdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConstdecl pconstdeclNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pconstdeclNode1 = new AConstdecl(listNode3);
        }
	nodeList.add(pconstdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AAconstdeclaration1Constdeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConstdeclaration pconstdeclarationNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExp pexpNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pconstdeclarationNode1 = new AConstdeclaration(tidentifierNode2, pexpNode3);
        }
	nodeList.add(pconstdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AAconstdeclaration2Constdeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConstdeclaration pconstdeclarationNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExp pexpNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList4.get(0);

        pconstdeclarationNode1 = new AConstdeclaration(tidentifierNode2, pexpNode3);
        }
	nodeList.add(pconstdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce ATypedeclarationTypedeclarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PTypedeclaration ptypedeclarationNode1;
        ptypedeclarationNode1 = (PTypedeclaration)nodeArrayList1.get(0);
	if(ptypedeclarationNode1 != null)
	{
	  listNode2.add(ptypedeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AMoreTypedeclarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PTypedeclaration ptypedeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ptypedeclarationNode2 = (PTypedeclaration)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ptypedeclarationNode2 != null)
	{
	  listNode3.add(ptypedeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AAtypedecl1Typedecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypedecl ptypedeclNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        ptypedeclNode1 = new ATypedecl(listNode2);
        }
	nodeList.add(ptypedeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AAtypedecl2Typedecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypedecl ptypedeclNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        ptypedeclNode1 = new ATypedecl(listNode3);
        }
	nodeList.add(ptypedeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AAtypedeclaration1Typedeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypedeclaration ptypedeclarationNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PType ptypeNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList3.get(0);

        ptypedeclarationNode1 = new ATypedeclaration(tidentifierNode2, ptypeNode3);
        }
	nodeList.add(ptypedeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AAtypedeclaration2Typedeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypedeclaration ptypedeclarationNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PType ptypeNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList4.get(0);

        ptypedeclarationNode1 = new ATypedeclaration(tidentifierNode2, ptypeNode3);
        }
	nodeList.add(ptypedeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AVardeclarationVardeclarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PVardeclaration pvardeclarationNode1;
        pvardeclarationNode1 = (PVardeclaration)nodeArrayList1.get(0);
	if(pvardeclarationNode1 != null)
	{
	  listNode2.add(pvardeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AMoreVardeclarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PVardeclaration pvardeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardeclarationNode2 = (PVardeclaration)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardeclarationNode2 != null)
	{
	  listNode3.add(pvardeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AAvardecl1Vardecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVardecl pvardeclNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pvardeclNode1 = new AVardecl(listNode2);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AAvardecl2Vardecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVardecl pvardeclNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pvardeclNode1 = new AVardecl(listNode3);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AVardeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVardeclaration pvardeclarationNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PType ptypeNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        ptypeNode4 = (PType)nodeArrayList3.get(0);

        pvardeclarationNode1 = new AVardeclaration(listNode3, ptypeNode4);
        }
	nodeList.add(pvardeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AAssignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        PSelector pselectorNode2;
        PExp pexpNode3;
        pselectorNode2 = (PSelector)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        passignmentNode1 = new AAssignment(pselectorNode2, pexpNode3);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AArrayType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PExp pexpNode2;
        PType ptypeNode3;
        pexpNode2 = (PExp)nodeArrayList2.get(0);
        ptypeNode3 = (PType)nodeArrayList4.get(0);

        ptypeNode1 = new AArrayType(pexpNode2, ptypeNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce ARecordType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        ptypeNode1 = new ARecordType(listNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AIdentifierType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        ptypeNode1 = new AIdentifierType(tidentifierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AIdentifierIdentifiers */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode1;
        tidentifierNode1 = (TIdentifier)nodeArrayList1.get(0);
	if(tidentifierNode1 != null)
	{
	  listNode2.add(tidentifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AMoreIdentifiers */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TIdentifier tidentifierNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tidentifierNode2 != null)
	{
	  listNode3.add(tidentifierNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AProceduredeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProceduredeclaration pproceduredeclarationNode1;
        {
            // Block
        PProcedureheading pprocedureheadingNode2;
        PProcedurebody pprocedurebodyNode3;
        TIdentifier tidentifierNode4;
        pprocedureheadingNode2 = (PProcedureheading)nodeArrayList1.get(0);
        pprocedurebodyNode3 = (PProcedurebody)nodeArrayList3.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList4.get(0);

        pproceduredeclarationNode1 = new AProceduredeclaration(pprocedureheadingNode2, pprocedurebodyNode3, tidentifierNode4);
        }
	nodeList.add(pproceduredeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AAprocedurecall1Procedurecall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProcedurecall pprocedurecallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode3 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        pprocedurecallNode1 = new AProcedurecall(tidentifierNode2, listNode3);
        }
	nodeList.add(pprocedurecallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce AAprocedurecall2Procedurecall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProcedurecall pprocedurecallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode4 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprocedurecallNode1 = new AProcedurecall(tidentifierNode2, listNode4);
        }
	nodeList.add(pprocedurecallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AAprocedureheading1Procedureheading */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProcedureheading pprocedureheadingNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode3 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }

        pprocedureheadingNode1 = new AProcedureheading(tidentifierNode2, listNode3);
        }
	nodeList.add(pprocedureheadingNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AAprocedureheading2Procedureheading */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProcedureheading pprocedureheadingNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode4 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprocedureheadingNode1 = new AProcedureheading(tidentifierNode2, listNode4);
        }
	nodeList.add(pprocedureheadingNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce AAwithstatprocedurebody1Procedurebody */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProcedurebody pprocedurebodyNode1;
        {
            // Block
        PDeclarations pdeclarationsNode2;
        LinkedList listNode4 = new LinkedList();
        pdeclarationsNode2 = (PDeclarations)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprocedurebodyNode1 = new AProcedurebody(pdeclarationsNode2, listNode4);
        }
	nodeList.add(pprocedurebodyNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AAwithstatprocedurebody2Procedurebody */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProcedurebody pprocedurebodyNode1;
        {
            // Block
        PDeclarations pdeclarationsNode2;
        LinkedList listNode4 = new LinkedList();
        pdeclarationsNode2 = (PDeclarations)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprocedurebodyNode1 = new AProcedurebody(pdeclarationsNode2, listNode4);
        }
	nodeList.add(pprocedurebodyNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce ANostatProcedurebody */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProcedurebody pprocedurebodyNode1;
        {
            // Block
        PDeclarations pdeclarationsNode2;
        LinkedList listNode3 = new LinkedList();
        pdeclarationsNode2 = (PDeclarations)nodeArrayList1.get(0);
        {
            // Block
        }

        pprocedurebodyNode1 = new AProcedurebody(pdeclarationsNode2, listNode3);
        }
	nodeList.add(pprocedurebodyNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce AActualparameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        listNode1 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce AFormalparameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        listNode1 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce AFpsectionFpsections */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PFpsection pfpsectionNode1;
        pfpsectionNode1 = (PFpsection)nodeArrayList1.get(0);
	if(pfpsectionNode1 != null)
	{
	  listNode2.add(pfpsectionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce AMoreFpsections */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PFpsection pfpsectionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfpsectionNode2 = (PFpsection)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfpsectionNode2 != null)
	{
	  listNode3.add(pfpsectionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce AAfpsection1Fpsection */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFpsection pfpsectionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        LinkedList listNode4 = new LinkedList();
        PType ptypeNode5;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ptypeNode5 = (PType)nodeArrayList3.get(0);

        pfpsectionNode1 = new AFpsection(null, listNode4, ptypeNode5);
        }
	nodeList.add(pfpsectionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce AAfpsection2Fpsection */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFpsection pfpsectionNode1;
        {
            // Block
        TVartxt tvartxtNode2;
        LinkedList listNode4 = new LinkedList();
        PType ptypeNode5;
        tvartxtNode2 = (TVartxt)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ptypeNode5 = (PType)nodeArrayList4.get(0);

        pfpsectionNode1 = new AFpsection(tvartxtNode2, listNode4, ptypeNode5);
        }
	nodeList.add(pfpsectionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce AWhilestatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PWhilestatement pwhilestatementNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList listNode4 = new LinkedList();
        pexpNode2 = (PExp)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pwhilestatementNode1 = new AWhilestatement(pexpNode2, listNode4);
        }
	nodeList.add(pwhilestatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce AAifstatement1Ifstatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfstatement pifstatementNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        pexpNode2 = (PExp)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }
        {
            // Block
        }

        pifstatementNode1 = new AIfstatement(pexpNode2, listNode4, listNode5, listNode6);
        }
	nodeList.add(pifstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce AAifstatement2Ifstatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfstatement pifstatementNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        pexpNode2 = (PExp)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        }

        pifstatementNode1 = new AIfstatement(pexpNode2, listNode4, listNode6, listNode7);
        }
	nodeList.add(pifstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce AAifstatement3Ifstatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfstatement pifstatementNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        pexpNode2 = (PExp)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pifstatementNode1 = new AIfstatement(pexpNode2, listNode4, listNode5, listNode7);
        }
	nodeList.add(pifstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce AAifstatement4Ifstatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfstatement pifstatementNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        LinkedList listNode8 = new LinkedList();
        pexpNode2 = (PExp)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pifstatementNode1 = new AIfstatement(pexpNode2, listNode4, listNode6, listNode8);
        }
	nodeList.add(pifstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce AElsif */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfstatement pifstatementNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        pexpNode2 = (PExp)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }
        {
            // Block
        }

        pifstatementNode1 = new AIfstatement(pexpNode2, listNode4, listNode5, listNode6);
        }
	nodeList.add(pifstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce AElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        listNode1 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce AAfieldlst1Fieldlst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PFieldlst pfieldlstNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pfieldlstNode1 = new AFieldlst(listNode2);
        }
	nodeList.add(pfieldlstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce AAfieldlst2Fieldlst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFieldlst pfieldlstNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pfieldlstNode1 = new AFieldlst(listNode3);
        }
	nodeList.add(pfieldlstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce AFieldlstFieldlsts */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PFieldlst pfieldlstNode1;
        pfieldlstNode1 = (PFieldlst)nodeArrayList1.get(0);
	if(pfieldlstNode1 != null)
	{
	  listNode2.add(pfieldlstNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce AMoreFieldlsts */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PFieldlst pfieldlstNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfieldlstNode2 = (PFieldlst)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfieldlstNode2 != null)
	{
	  listNode3.add(pfieldlstNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce AFieldlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFieldlist pfieldlistNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PType ptypeNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        ptypeNode4 = (PType)nodeArrayList3.get(0);

        pfieldlistNode1 = new AFieldlist(listNode3, ptypeNode4);
        }
	nodeList.add(pfieldlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce AExpExps */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce AMoreExps */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce AAddExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAddExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce ASubExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ASubExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce AExeqExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AExeqExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce AExhaExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AExhaExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new86() /* reduce AExstExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AExstExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new87() /* reduce AExseExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AExseExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new88() /* reduce AExgtExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AExgtExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new89() /* reduce AExgeExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AExgeExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new90() /* reduce AFactorExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new91() /* reduce AMulFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMulExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new92() /* reduce ADivFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new93() /* reduce AModFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AModExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new94() /* reduce AAmpFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAmpExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new95() /* reduce ATilFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAmpExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new96() /* reduce AUnaryFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new97() /* reduce AIntegerUnary */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        pexpNode1 = new AIntegerExp(tintegerNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new98() /* reduce ASelectorUnary */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PSelector pselectorNode2;
        pselectorNode2 = (PSelector)nodeArrayList1.get(0);

        pexpNode1 = new ASelectorExp(pselectorNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new99() /* reduce AParenUnary */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AParenExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new100() /* reduce ARecordselectorSelector */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSelector pselectorNode1;
        {
            // Block
        PSelector pselectorNode2;
        TIdentifier tidentifierNode3;
        pselectorNode2 = (PSelector)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);

        pselectorNode1 = new ARecordSelector(pselectorNode2, tidentifierNode3);
        }
	nodeList.add(pselectorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new101() /* reduce AIdentifierSelector */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSelector pselectorNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pselectorNode1 = new AIdentifierSelector(tidentifierNode2);
        }
	nodeList.add(pselectorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new102() /* reduce AArrayexpressionSelector */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSelector pselectorNode1;
        {
            // Block
        PSelector pselectorNode2;
        PExp pexpNode3;
        pselectorNode2 = (PSelector)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pselectorNode1 = new AArrayexpressionSelector(pselectorNode2, pexpNode3);
        }
	nodeList.add(pselectorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new103() /* reduce ATerminal$Sptxt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TSptxt tsptxtNode1;
        tsptxtNode1 = (TSptxt)nodeArrayList1.get(0);
	if(tsptxtNode1 != null)
	{
	  listNode2.add(tsptxtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new104() /* reduce ANonTerminal$Sptxt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TSptxt tsptxtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tsptxtNode2 = (TSptxt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tsptxtNode2 != null)
	{
	  listNode3.add(tsptxtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new105() /* reduce ATerminal$Proceduredeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PProceduredeclaration pproceduredeclarationNode1;
        pproceduredeclarationNode1 = (PProceduredeclaration)nodeArrayList1.get(0);
	if(pproceduredeclarationNode1 != null)
	{
	  listNode2.add(pproceduredeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new106() /* reduce ANonTerminal$Proceduredeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PProceduredeclaration pproceduredeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pproceduredeclarationNode2 = (PProceduredeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pproceduredeclarationNode2 != null)
	{
	  listNode3.add(pproceduredeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new107() /* reduce ATerminal$Constdeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PConstdeclaration pconstdeclarationNode1;
        pconstdeclarationNode1 = (PConstdeclaration)nodeArrayList1.get(0);
	if(pconstdeclarationNode1 != null)
	{
	  listNode2.add(pconstdeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new108() /* reduce ANonTerminal$Constdeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PConstdeclaration pconstdeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pconstdeclarationNode2 = (PConstdeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pconstdeclarationNode2 != null)
	{
	  listNode3.add(pconstdeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new109() /* reduce ATerminal$Typedeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PTypedeclaration ptypedeclarationNode1;
        ptypedeclarationNode1 = (PTypedeclaration)nodeArrayList1.get(0);
	if(ptypedeclarationNode1 != null)
	{
	  listNode2.add(ptypedeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new110() /* reduce ANonTerminal$Typedeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PTypedeclaration ptypedeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ptypedeclarationNode2 = (PTypedeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ptypedeclarationNode2 != null)
	{
	  listNode3.add(ptypedeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new111() /* reduce ATerminal$Vardeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PVardeclaration pvardeclarationNode1;
        pvardeclarationNode1 = (PVardeclaration)nodeArrayList1.get(0);
	if(pvardeclarationNode1 != null)
	{
	  listNode2.add(pvardeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new112() /* reduce ANonTerminal$Vardeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PVardeclaration pvardeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardeclarationNode2 = (PVardeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardeclarationNode2 != null)
	{
	  listNode3.add(pvardeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new113() /* reduce ATerminal$Elsif */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PIfstatement pifstatementNode1;
        pifstatementNode1 = (PIfstatement)nodeArrayList1.get(0);
	if(pifstatementNode1 != null)
	{
	  listNode2.add(pifstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new114() /* reduce ANonTerminal$Elsif */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PIfstatement pifstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pifstatementNode2 = (PIfstatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pifstatementNode2 != null)
	{
	  listNode3.add(pifstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new115() /* reduce ATerminal$Fieldlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PFieldlist pfieldlistNode1;
        pfieldlistNode1 = (PFieldlist)nodeArrayList1.get(0);
	if(pfieldlistNode1 != null)
	{
	  listNode2.add(pfieldlistNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new116() /* reduce ANonTerminal$Fieldlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PFieldlist pfieldlistNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfieldlistNode2 = (PFieldlist)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfieldlistNode2 != null)
	{
	  listNode3.add(pfieldlistNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {18, SHIFT, 1}, },
			{{-1, ERROR, 1}, {45, SHIFT, 3}, },
			{{-1, ERROR, 2}, {46, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {17, SHIFT, 4}, },
			{{-1, REDUCE, 3}, {19, SHIFT, 5}, {20, SHIFT, 6}, {21, SHIFT, 7}, {36, SHIFT, 8}, },
			{{-1, REDUCE, 33}, {45, SHIFT, 16}, },
			{{-1, REDUCE, 39}, {45, SHIFT, 19}, },
			{{-1, REDUCE, 45}, {45, SHIFT, 22}, },
			{{-1, ERROR, 8}, {45, SHIFT, 26}, },
			{{-1, ERROR, 9}, {22, SHIFT, 27}, {23, SHIFT, 28}, },
			{{-1, REDUCE, 4}, {20, SHIFT, 6}, {21, SHIFT, 7}, {36, SHIFT, 8}, },
			{{-1, REDUCE, 5}, {21, SHIFT, 7}, {36, SHIFT, 8}, },
			{{-1, REDUCE, 7}, {36, SHIFT, 8}, },
			{{-1, REDUCE, 105}, },
			{{-1, ERROR, 14}, {17, SHIFT, 35}, },
			{{-1, REDUCE, 11}, {36, SHIFT, 8}, },
			{{-1, ERROR, 16}, {8, SHIFT, 37}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 34}, {45, SHIFT, 16}, },
			{{-1, ERROR, 19}, {8, SHIFT, 39}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 40}, {45, SHIFT, 19}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 111}, },
			{{-1, ERROR, 24}, {14, SHIFT, 41}, {15, SHIFT, 42}, },
			{{-1, REDUCE, 46}, {45, SHIFT, 22}, },
			{{-1, REDUCE, 57}, {3, SHIFT, 44}, },
			{{-1, ERROR, 27}, {27, SHIFT, 46}, {29, SHIFT, 47}, {33, SHIFT, 48}, {34, SHIFT, 49}, {35, SHIFT, 50}, {37, SHIFT, 51}, {45, SHIFT, 52}, },
			{{-1, ERROR, 28}, {45, SHIFT, 64}, },
			{{-1, REDUCE, 6}, {21, SHIFT, 7}, {36, SHIFT, 8}, },
			{{-1, REDUCE, 8}, {36, SHIFT, 8}, },
			{{-1, REDUCE, 12}, {36, SHIFT, 8}, },
			{{-1, REDUCE, 9}, {36, SHIFT, 8}, },
			{{-1, REDUCE, 13}, {36, SHIFT, 8}, },
			{{-1, REDUCE, 15}, {36, SHIFT, 8}, },
			{{-1, REDUCE, 3}, {19, SHIFT, 5}, {20, SHIFT, 6}, {21, SHIFT, 7}, {36, SHIFT, 8}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 37}, {3, SHIFT, 71}, {37, SHIFT, 51}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, REDUCE, 108}, },
			{{-1, ERROR, 39}, {24, SHIFT, 79}, {25, SHIFT, 80}, {37, SHIFT, 51}, {45, SHIFT, 81}, },
			{{-1, REDUCE, 110}, },
			{{-1, ERROR, 41}, {45, SHIFT, 84}, },
			{{-1, ERROR, 42}, {24, SHIFT, 79}, {25, SHIFT, 80}, {45, SHIFT, 81}, },
			{{-1, REDUCE, 112}, },
			{{-1, ERROR, 44}, {21, SHIFT, 86}, {45, SHIFT, 22}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 46}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, ERROR, 47}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, ERROR, 48}, {3, SHIFT, 92}, },
			{{-1, ERROR, 49}, {3, SHIFT, 93}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 55}, {0, REDUCE, 101}, {1, REDUCE, 101}, {3, SHIFT, 94}, {16, REDUCE, 101}, },
			{{-1, ERROR, 53}, {17, SHIFT, 96}, {23, SHIFT, 97}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 62}, {0, SHIFT, 98}, {1, SHIFT, 99}, {16, SHIFT, 100}, },
			{{-1, ERROR, 63}, {27, SHIFT, 46}, {29, SHIFT, 47}, {33, SHIFT, 48}, {34, SHIFT, 49}, {35, SHIFT, 50}, {37, SHIFT, 101}, {45, SHIFT, 52}, },
			{{-1, ERROR, 64}, {0, SHIFT, 103}, },
			{{-1, REDUCE, 10}, {36, SHIFT, 8}, },
			{{-1, REDUCE, 14}, {36, SHIFT, 8}, },
			{{-1, REDUCE, 16}, {36, SHIFT, 8}, },
			{{-1, REDUCE, 17}, {36, SHIFT, 8}, },
			{{-1, ERROR, 69}, {22, SHIFT, 105}, {23, SHIFT, 106}, },
			{{-1, ERROR, 70}, {45, SHIFT, 107}, },
			{{-1, ERROR, 71}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 101}, },
			{{-1, ERROR, 74}, {8, SHIFT, 109}, {9, SHIFT, 110}, {10, SHIFT, 111}, {11, SHIFT, 112}, {12, SHIFT, 113}, {13, SHIFT, 114}, {17, SHIFT, 115}, {38, SHIFT, 116}, {39, SHIFT, 117}, },
			{{-1, REDUCE, 90}, {7, SHIFT, 118}, {40, SHIFT, 119}, {41, SHIFT, 120}, {42, SHIFT, 121}, {43, SHIFT, 122}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 98}, {0, SHIFT, 98}, {1, SHIFT, 99}, },
			{{-1, ERROR, 78}, {3, SHIFT, 71}, {37, SHIFT, 101}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, REDUCE, 75}, {45, SHIFT, 22}, },
			{{-1, ERROR, 80}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 82}, {17, SHIFT, 130}, },
			{{-1, ERROR, 83}, {24, SHIFT, 79}, {25, SHIFT, 80}, {37, SHIFT, 101}, {45, SHIFT, 81}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 85}, {17, SHIFT, 132}, },
			{{-1, ERROR, 86}, {45, SHIFT, 22}, },
			{{-1, ERROR, 87}, {14, SHIFT, 41}, {15, SHIFT, 134}, },
			{{-1, ERROR, 88}, {6, SHIFT, 135}, {17, SHIFT, 136}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 90}, {8, SHIFT, 109}, {9, SHIFT, 110}, {10, SHIFT, 111}, {11, SHIFT, 112}, {12, SHIFT, 113}, {13, SHIFT, 114}, {28, SHIFT, 137}, {38, SHIFT, 116}, {39, SHIFT, 117}, },
			{{-1, ERROR, 91}, {8, SHIFT, 109}, {9, SHIFT, 110}, {10, SHIFT, 111}, {11, SHIFT, 112}, {12, SHIFT, 113}, {13, SHIFT, 114}, {30, SHIFT, 138}, {38, SHIFT, 116}, {39, SHIFT, 117}, },
			{{-1, ERROR, 92}, {45, SHIFT, 73}, },
			{{-1, ERROR, 93}, {45, SHIFT, 73}, },
			{{-1, ERROR, 94}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 96}, {27, SHIFT, 46}, {29, SHIFT, 47}, {33, SHIFT, 48}, {34, SHIFT, 49}, {35, SHIFT, 50}, {45, SHIFT, 52}, },
			{{-1, ERROR, 97}, {45, SHIFT, 144}, },
			{{-1, ERROR, 98}, {45, SHIFT, 145}, },
			{{-1, ERROR, 99}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, ERROR, 100}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, REDUCE, 104}, },
			{{-1, ERROR, 102}, {17, SHIFT, 96}, {23, SHIFT, 148}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 18}, {36, SHIFT, 8}, },
			{{-1, ERROR, 105}, {27, SHIFT, 46}, {29, SHIFT, 47}, {33, SHIFT, 48}, {34, SHIFT, 49}, {35, SHIFT, 50}, {37, SHIFT, 51}, {45, SHIFT, 52}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 107}, {17, SHIFT, 151}, },
			{{-1, ERROR, 108}, {6, SHIFT, 152}, {8, SHIFT, 109}, {9, SHIFT, 110}, {10, SHIFT, 111}, {11, SHIFT, 112}, {12, SHIFT, 113}, {13, SHIFT, 114}, {38, SHIFT, 116}, {39, SHIFT, 117}, },
			{{-1, ERROR, 109}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, ERROR, 110}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, ERROR, 111}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, ERROR, 112}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, ERROR, 113}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, ERROR, 114}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 116}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, ERROR, 117}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, ERROR, 118}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, ERROR, 119}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, ERROR, 120}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, ERROR, 121}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, ERROR, 122}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, ERROR, 123}, {8, SHIFT, 109}, {9, SHIFT, 110}, {10, SHIFT, 111}, {11, SHIFT, 112}, {12, SHIFT, 113}, {13, SHIFT, 114}, {17, SHIFT, 166}, {38, SHIFT, 116}, {39, SHIFT, 117}, },
			{{-1, ERROR, 124}, {14, SHIFT, 41}, {15, SHIFT, 167}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 126}, {17, SHIFT, 168}, {23, SHIFT, 169}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 76}, {45, SHIFT, 22}, },
			{{-1, ERROR, 129}, {8, SHIFT, 109}, {9, SHIFT, 110}, {10, SHIFT, 111}, {11, SHIFT, 112}, {12, SHIFT, 113}, {13, SHIFT, 114}, {26, SHIFT, 171}, {38, SHIFT, 116}, {39, SHIFT, 117}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 131}, {17, SHIFT, 172}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 133}, {14, SHIFT, 41}, {15, SHIFT, 173}, },
			{{-1, ERROR, 134}, {24, SHIFT, 79}, {25, SHIFT, 80}, {45, SHIFT, 81}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 136}, {21, SHIFT, 86}, {45, SHIFT, 22}, },
			{{-1, ERROR, 137}, {27, SHIFT, 46}, {29, SHIFT, 47}, {33, SHIFT, 48}, {34, SHIFT, 49}, {35, SHIFT, 50}, {45, SHIFT, 52}, },
			{{-1, ERROR, 138}, {27, SHIFT, 46}, {29, SHIFT, 47}, {33, SHIFT, 48}, {34, SHIFT, 49}, {35, SHIFT, 50}, {45, SHIFT, 52}, },
			{{-1, ERROR, 139}, {0, SHIFT, 98}, {1, SHIFT, 99}, {6, SHIFT, 178}, },
			{{-1, ERROR, 140}, {0, SHIFT, 98}, {1, SHIFT, 99}, {6, SHIFT, 179}, },
			{{-1, ERROR, 141}, {6, SHIFT, 180}, {14, SHIFT, 181}, },
			{{-1, REDUCE, 80}, {8, SHIFT, 109}, {9, SHIFT, 110}, {10, SHIFT, 111}, {11, SHIFT, 112}, {12, SHIFT, 113}, {13, SHIFT, 114}, {38, SHIFT, 116}, {39, SHIFT, 117}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 144}, {0, SHIFT, 182}, },
			{{-1, REDUCE, 100}, },
			{{-1, ERROR, 146}, {4, SHIFT, 183}, {8, SHIFT, 109}, {9, SHIFT, 110}, {10, SHIFT, 111}, {11, SHIFT, 112}, {12, SHIFT, 113}, {13, SHIFT, 114}, {38, SHIFT, 116}, {39, SHIFT, 117}, },
			{{-1, REDUCE, 48}, {8, SHIFT, 109}, {9, SHIFT, 110}, {10, SHIFT, 111}, {11, SHIFT, 112}, {12, SHIFT, 113}, {13, SHIFT, 114}, {38, SHIFT, 116}, {39, SHIFT, 117}, },
			{{-1, ERROR, 148}, {45, SHIFT, 184}, },
			{{-1, ERROR, 149}, {17, SHIFT, 96}, {23, SHIFT, 185}, },
			{{-1, ERROR, 150}, {27, SHIFT, 46}, {29, SHIFT, 47}, {33, SHIFT, 48}, {34, SHIFT, 49}, {35, SHIFT, 50}, {37, SHIFT, 101}, {45, SHIFT, 52}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 84}, {7, SHIFT, 118}, {40, SHIFT, 119}, {41, SHIFT, 120}, {42, SHIFT, 121}, {43, SHIFT, 122}, },
			{{-1, REDUCE, 85}, {7, SHIFT, 118}, {40, SHIFT, 119}, {41, SHIFT, 120}, {42, SHIFT, 121}, {43, SHIFT, 122}, },
			{{-1, REDUCE, 86}, {7, SHIFT, 118}, {40, SHIFT, 119}, {41, SHIFT, 120}, {42, SHIFT, 121}, {43, SHIFT, 122}, },
			{{-1, REDUCE, 87}, {7, SHIFT, 118}, {40, SHIFT, 119}, {41, SHIFT, 120}, {42, SHIFT, 121}, {43, SHIFT, 122}, },
			{{-1, REDUCE, 88}, {7, SHIFT, 118}, {40, SHIFT, 119}, {41, SHIFT, 120}, {42, SHIFT, 121}, {43, SHIFT, 122}, },
			{{-1, REDUCE, 89}, {7, SHIFT, 118}, {40, SHIFT, 119}, {41, SHIFT, 120}, {42, SHIFT, 121}, {43, SHIFT, 122}, },
			{{-1, REDUCE, 82}, {7, SHIFT, 118}, {40, SHIFT, 119}, {41, SHIFT, 120}, {42, SHIFT, 121}, {43, SHIFT, 122}, },
			{{-1, REDUCE, 83}, {7, SHIFT, 118}, {40, SHIFT, 119}, {41, SHIFT, 120}, {42, SHIFT, 121}, {43, SHIFT, 122}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 167}, {24, SHIFT, 79}, {25, SHIFT, 80}, {45, SHIFT, 81}, },
			{{-1, REDUCE, 75}, {45, SHIFT, 22}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 116}, },
			{{-1, ERROR, 171}, {24, SHIFT, 79}, {25, SHIFT, 80}, {45, SHIFT, 81}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 173}, {24, SHIFT, 79}, {25, SHIFT, 80}, {45, SHIFT, 81}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 176}, {17, SHIFT, 96}, {23, SHIFT, 191}, },
			{{-1, ERROR, 177}, {17, SHIFT, 96}, {23, SHIFT, 192}, {31, SHIFT, 193}, {32, SHIFT, 194}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 181}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 184}, {0, SHIFT, 199}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 186}, {17, SHIFT, 96}, {23, SHIFT, 200}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 193}, {3, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, ERROR, 194}, {27, SHIFT, 46}, {29, SHIFT, 47}, {33, SHIFT, 48}, {34, SHIFT, 49}, {35, SHIFT, 50}, {45, SHIFT, 52}, },
			{{-1, REDUCE, 113}, },
			{{-1, ERROR, 196}, {23, SHIFT, 203}, },
			{{-1, ERROR, 197}, {23, SHIFT, 204}, {31, SHIFT, 193}, {32, SHIFT, 194}, },
			{{-1, REDUCE, 81}, {8, SHIFT, 109}, {9, SHIFT, 110}, {10, SHIFT, 111}, {11, SHIFT, 112}, {12, SHIFT, 113}, {13, SHIFT, 114}, {38, SHIFT, 116}, {39, SHIFT, 117}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 201}, {8, SHIFT, 109}, {9, SHIFT, 110}, {10, SHIFT, 111}, {11, SHIFT, 112}, {12, SHIFT, 113}, {13, SHIFT, 114}, {30, SHIFT, 207}, {38, SHIFT, 116}, {39, SHIFT, 117}, },
			{{-1, REDUCE, 74}, {17, SHIFT, 96}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 114}, },
			{{-1, ERROR, 206}, {23, SHIFT, 208}, },
			{{-1, ERROR, 207}, {27, SHIFT, 46}, {29, SHIFT, 47}, {33, SHIFT, 48}, {34, SHIFT, 49}, {35, SHIFT, 50}, {45, SHIFT, 52}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 73}, {17, SHIFT, 96}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 9}, {35, 69}, },
			{{-1, 53}, {63, 102}, {105, 149}, {137, 176}, {138, 177}, {150, 186}, {194, 202}, {207, 209}, },
			{{-1, 54}, {96, 143}, },
			{{-1, 55}, },
			{{-1, 56}, },
			{{-1, 57}, },
			{{-1, -1}, },
			{{-1, 10}, },
			{{-1, 17}, {18, 38}, },
			{{-1, -1}, },
			{{-1, 11}, {10, 29}, },
			{{-1, 20}, {21, 40}, },
			{{-1, -1}, },
			{{-1, 12}, {10, 30}, {11, 32}, {29, 65}, },
			{{-1, 23}, {25, 43}, },
			{{-1, 58}, },
			{{-1, 82}, {42, 85}, {83, 131}, {134, 174}, {167, 187}, {171, 189}, {173, 190}, },
			{{-1, 124}, {7, 24}, {25, 24}, {44, 87}, {86, 133}, {136, 87}, },
			{{-1, 13}, {15, 36}, {31, 36}, {33, 36}, {34, 36}, {66, 36}, {67, 36}, {68, 36}, {104, 36}, },
			{{-1, 59}, },
			{{-1, 14}, },
			{{-1, 70}, },
			{{-1, 95}, },
			{{-1, 45}, },
			{{-1, 88}, },
			{{-1, 89}, {136, 175}, },
			{{-1, 60}, },
			{{-1, 61}, },
			{{-1, 195}, {197, 205}, },
			{{-1, 196}, {197, 206}, },
			{{-1, 125}, {168, 188}, },
			{{-1, 126}, },
			{{-1, 127}, {128, 170}, },
			{{-1, 141}, },
			{{-1, 74}, {46, 90}, {47, 91}, {71, 108}, {78, 123}, {80, 129}, {94, 142}, {99, 146}, {100, 147}, {181, 198}, {193, 201}, },
			{{-1, 75}, {109, 153}, {110, 154}, {111, 155}, {112, 156}, {113, 157}, {114, 158}, {116, 159}, {117, 160}, },
			{{-1, 76}, {118, 161}, {119, 162}, {120, 163}, {121, 164}, {122, 165}, },
			{{-1, 77}, {27, 62}, {63, 62}, {92, 139}, {93, 140}, {96, 62}, {105, 62}, {137, 62}, {138, 62}, {150, 62}, {194, 62}, {207, 62}, },
			{{-1, 63}, {37, 78}, {39, 83}, {105, 150}, },
			{{-1, 15}, {10, 31}, {11, 33}, {12, 34}, {29, 66}, {30, 67}, {32, 68}, {65, 104}, },
			{{-1, 18}, },
			{{-1, 21}, },
			{{-1, 25}, },
			{{-1, 197}, },
			{{-1, 128}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: moduletxt",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: semi",
			"expecting: consttxt, typetxt, vartxt, begintxt, endtxt, proceduretxt",
			"expecting: typetxt, vartxt, begintxt, endtxt, proceduretxt, identifier",
			"expecting: vartxt, begintxt, endtxt, proceduretxt, identifier",
			"expecting: begintxt, endtxt, proceduretxt, identifier",
			"expecting: begintxt, endtxt",
			"expecting: typetxt, vartxt, begintxt, endtxt, proceduretxt",
			"expecting: vartxt, begintxt, endtxt, proceduretxt",
			"expecting: begintxt, endtxt, proceduretxt",
			"expecting: exeq",
			"expecting: comma, colon",
			"expecting: l par, semi",
			"expecting: whiletxt, iftxt, readtxt, writetxt, writelntxt, sptxt, identifier",
			"expecting: l par, sptxt, integer, identifier",
			"expecting: recordtxt, arraytxt, sptxt, identifier",
			"expecting: recordtxt, arraytxt, identifier",
			"expecting: vartxt, identifier",
			"expecting: l par, integer, identifier",
			"expecting: l par",
			"expecting: semi, endtxt, elsiftxt, elsetxt",
			"expecting: l par, recordtxt, arraytxt, whiletxt, iftxt, readtxt, writetxt, writelntxt, sptxt, integer, identifier",
			"expecting: '.', l bkt, l par, ass, semi, endtxt, elsiftxt, elsetxt",
			"expecting: semi, endtxt",
			"expecting: '.', l bkt, ass",
			"expecting: '.'",
			"expecting: r bkt, r par, '~', exeq, exha, exst, exse, exgt, exge, comma, semi, endtxt, oftxt, dotxt, thentxt, elsiftxt, elsetxt, add, sub, mul, mod, amp, div",
			"expecting: '.', l bkt, r bkt, r par, '~', exeq, exha, exst, exse, exgt, exge, comma, semi, endtxt, oftxt, dotxt, thentxt, elsiftxt, elsetxt, add, sub, mul, mod, amp, div",
			"expecting: exeq, exha, exst, exse, exgt, exge, semi, add, sub",
			"expecting: semi, endtxt, identifier",
			"expecting: r par, semi, endtxt, identifier",
			"expecting: r par, semi",
			"expecting: exeq, exha, exst, exse, exgt, exge, dotxt, add, sub",
			"expecting: exeq, exha, exst, exse, exgt, exge, thentxt, add, sub",
			"expecting: whiletxt, iftxt, readtxt, writetxt, writelntxt, identifier",
			"expecting: r par, exeq, exha, exst, exse, exgt, exge, add, sub",
			"expecting: exeq, exha, exst, exse, exgt, exge, oftxt, add, sub",
			"expecting: '.', l bkt, r par",
			"expecting: r par, comma",
			"expecting: r par, exeq, exha, exst, exse, exgt, exge, comma, add, sub",
			"expecting: '.', l bkt, r bkt, r par, '~', exeq, exha, exst, exse, exgt, exge, comma, ass, semi, endtxt, oftxt, dotxt, thentxt, elsiftxt, elsetxt, add, sub, mul, mod, amp, div",
			"expecting: r bkt, exeq, exha, exst, exse, exgt, exge, add, sub",
			"expecting: exeq, exha, exst, exse, exgt, exge, semi, endtxt, elsiftxt, elsetxt, add, sub",
			"expecting: endtxt, elsiftxt, elsetxt",
			"expecting: endtxt",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 7, 1, 8, 9, 10, 11, 11, 3, 11, 12, 5, 5, 12, 6, 6, 13, 7, 13, 7, 14, 15, 1, 10, 11, 11, 11, 11, 11, 4, 11, 16, 5, 17, 6, 1, 18, 7, 19, 3, 20, 20, 21, 21, 22, 23, 24, 25, 22, 22, 22, 22, 22, 22, 22, 22, 26, 15, 27, 11, 11, 11, 11, 8, 1, 20, 28, 29, 30, 28, 28, 29, 16, 31, 20, 32, 3, 17, 13, 3, 1, 13, 33, 33, 34, 35, 1, 1, 20, 22, 36, 1, 1, 20, 20, 23, 25, 2, 11, 15, 1, 3, 37, 20, 20, 20, 20, 20, 20, 5, 20, 20, 20, 20, 20, 20, 20, 30, 13, 25, 25, 31, 31, 38, 6, 3, 7, 13, 18, 3, 19, 36, 36, 39, 39, 40, 41, 22, 27, 42, 43, 44, 1, 25, 15, 11, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 5, 18, 31, 32, 31, 18, 6, 18, 33, 33, 25, 22, 22, 22, 22, 20, 2, 42, 27, 1, 25, 31, 25, 32, 33, 22, 22, 20, 36, 45, 46, 45, 41, 2, 1, 35, 25, 22, 22, 45, 46, 36, 22, 22, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
