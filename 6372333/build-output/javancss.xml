<?xml version="1.0"?>
<javancss>
  <date>2011-02-05</date>
  <time>15:30:11</time>
  <packages>
    <package>
      <name>oberon</name>
      <classes>23</classes>
      <functions>51</functions>
      <ncss>374</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>10</single_comment_lines>
      <multi_comment_lines>8</multi_comment_lines>
    </package>
    <package>
      <name>oberon.data</name>
      <classes>10</classes>
      <functions>56</functions>
      <ncss>198</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>4</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>oberon.interpret</name>
      <classes>20</classes>
      <functions>67</functions>
      <ncss>491</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>4</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>oberon.test</name>
      <classes>1</classes>
      <functions>1</functions>
      <ncss>4</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>20</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <total>
      <classes>54</classes>
      <functions>175</functions>
      <ncss>1067</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>38</single_comment_lines>
      <multi_comment_lines>8</multi_comment_lines>
    </total>
    <table>
      <tr><td>Packages</td><td>Classes</td><td>Functions</td><td>NCSS</td><td>Javadocs</td><td>per</td></tr>
      <tr><td>4.00</td><td>54.00</td><td>175.00</td><td>1,067.00</td><td>0.00</td><td>Project</td></tr>
      <tr><td></td><td>13.50</td><td>43.75</td><td>266.75</td><td>0.00</td><td>Package</td></tr>
      <tr><td></td><td></td><td>3.24</td><td>19.76</td><td>0.00</td><td>Class</td></tr>
      <tr><td></td><td></td><td></td><td>6.10</td><td>0.00</td><td>Function</td></tr>
    </table>
  </packages>

  <objects>
    <object>
      <name>oberon.AbstractExpression</name>
      <ncss>9</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.AbstractIntegerExpression</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.AbstractLeftAndRightExpression</name>
      <ncss>14</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.AbstractProcedure</name>
      <ncss>15</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.ComparisonExpression</name>
      <ncss>30</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.ComparisonType</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.Declaration</name>
      <ncss>13</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.FormalParamSection</name>
      <ncss>14</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.FormalParamType</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.IExpression</name>
      <ncss>3</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.IStatement</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.Main</name>
      <ncss>29</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.MathematicalExpression</name>
      <ncss>28</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.MathematicalExpressionType</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.ParenthesesExpression</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.ProcedureBody</name>
      <ncss>10</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.ProcedureHeading</name>
      <ncss>22</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.ReadProcedure</name>
      <ncss>29</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.SelectorExpression</name>
      <ncss>10</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.StatementSequence</name>
      <ncss>8</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.SystemMethodCall</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.WriteCall</name>
      <ncss>22</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.WriteLnCall</name>
      <ncss>13</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.data.AbstractDataType</name>
      <ncss>10</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.data.AbstractSelector</name>
      <ncss>3</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.data.ArrayIndexerSelector</name>
      <ncss>15</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.data.ExpressionDataType</name>
      <ncss>11</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.data.IdentifierSelector</name>
      <ncss>9</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.data.IntegerArrayIndexerType</name>
      <ncss>19</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.data.IntegerArrayType</name>
      <ncss>23</ncss>
      <functions>8</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.data.IntegerType</name>
      <ncss>17</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.data.VariableManager</name>
      <ncss>72</ncss>
      <functions>9</functions>
      <classes>1</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.data.VariableManager.Scope</name>
      <ncss>44</ncss>
      <functions>8</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.interpret.AbstractBaseInterpreter</name>
      <ncss>4</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.interpret.AssignmentInterpreter</name>
      <ncss>12</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.interpret.ComparisonExpressionInterpreter</name>
      <ncss>38</ncss>
      <functions>9</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.interpret.DeclarationsInterpreter</name>
      <ncss>18</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.interpret.ExpIntegerInterpreter</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.interpret.ExpInterpreterFactory</name>
      <ncss>35</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.interpret.FpSectionInterpreter</name>
      <ncss>21</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.interpret.IfStatementInterpreter</name>
      <ncss>18</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.interpret.MathematicalExpressionInterpreter</name>
      <ncss>26</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.interpret.ModuleInterpreter</name>
      <ncss>14</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.interpret.ParenExpInterpreter</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.interpret.ProcedureBodyInterpreter</name>
      <ncss>10</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.interpret.ProcedureHeadingInterpreter</name>
      <ncss>15</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.interpret.SelectorExpInterpreter</name>
      <ncss>8</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.interpret.SelectorInterpreter</name>
      <ncss>14</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.interpret.StatementInterpreterFactory</name>
      <ncss>20</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.interpret.StatementSequenceInterpreter</name>
      <ncss>7</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.interpret.StatprocStatementInterpreter</name>
      <ncss>11</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.interpret.StatwithStatementInterpreter</name>
      <ncss>10</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.interpret.VarInterpreter</name>
      <ncss>28</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.test.WhileTest</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <averages>
      <ncss>15.50</ncss>
      <functions>3.24</functions>
      <classes>0.02</classes>
      <javadocs>0.00</javadocs>
    </averages>
    <ncss>1,067.00</ncss>
  </objects>

  <functions>
    <function>
      <name>oberon.AbstractExpression.evalAsInt()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.AbstractExpression.evalAsBoolean()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.AbstractExpression.booleanAsInt(Boolean)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.AbstractIntegerExpression.AbstractIntegerExpression(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.AbstractIntegerExpression.evalAsInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.AbstractLeftAndRightExpression.AbstractLeftAndRightExpression(IExpression,IExpression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.AbstractLeftAndRightExpression.setRighthandSide(IExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.AbstractLeftAndRightExpression.getRighthandSide()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.AbstractLeftAndRightExpression.setLefthandSide(IExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.AbstractLeftAndRightExpression.getLefthandSide()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.AbstractProcedure.AbstractProcedure(String,FormalParamSection,ProcedureBody)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.AbstractProcedure.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.AbstractProcedure.getParamSections()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.AbstractProcedure.getBody()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.AbstractProcedure.call(IExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.ComparisonExpression.ComparisonExpression(IExpression,IExpression,ComparisonType)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.ComparisonExpression.evalAsInt()</name>
      <ncss>25</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.Declaration.Declaration(AbstractDataType,ProcedureHeading)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.Declaration.getVariables()</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.Declaration.getProcedures()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.FormalParamSection.FormalParamSection(String,FormalParamType,Boolean)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.FormalParamSection.shouldBeCalledByRef()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.FormalParamSection.getNames()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.FormalParamSection.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.IExpression.evalAsInt()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.IExpression.evalAsBoolean()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.IStatement.eval()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.Main.main(String[])</name>
      <ncss>28</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.MathematicalExpression.MathematicalExpression(IExpression,IExpression,MathematicalExpressionType)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.MathematicalExpression.evalAsInt()</name>
      <ncss>23</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.ParenthesesExpression.ParenthesesExpression(IExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.ParenthesesExpression.evalAsInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.ProcedureBody.ProcedureBody(Declaration,StatementSequence)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.ProcedureBody.eval()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.ProcedureHeading.ProcedureHeading(String,FormalParamSection,ProcedureBody)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.ProcedureHeading.call(IExpression)</name>
      <ncss>19</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.ReadProcedure.eval()</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.ReadProcedure.readInput(int)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.ReadProcedure.initialize()</name>
      <ncss>16</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.SelectorExpression.SelectorExpression(AbstractSelector)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.SelectorExpression.performDeepCopyOfValue(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.SelectorExpression.performShallowCopyOfValue(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.SelectorExpression.evalAsInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.StatementSequence.StatementSequence(IStatement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.StatementSequence.eval()</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.SystemMethodCall.SystemMethodCall(String,FormalParamSection,ProcedureBody)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.SystemMethodCall.call(IExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.WriteCall.eval()</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.WriteCall.initialize()</name>
      <ncss>16</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.WriteLnCall.eval()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.WriteLnCall.initialize()</name>
      <ncss>10</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractDataType.AbstractDataType(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractDataType.getValue()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractDataType.deepCopy(String)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractDataType.shallowCopy(String)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractDataType.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractDataType.setValue(int)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractSelector.getDataTypeValue()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractSelector.getSelectorValue()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.ArrayIndexerSelector.ArrayIndexerSelector(AbstractSelector,IExpression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.ArrayIndexerSelector.getSelectorValue()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.ArrayIndexerSelector.getDataTypeAsArrayType()</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.ArrayIndexerSelector.getDataTypeValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.ExpressionDataType.ExpressionDataType(String,IExpression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.ExpressionDataType.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.ExpressionDataType.deepCopy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.ExpressionDataType.shallowCopy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IdentifierSelector.IdentifierSelector(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IdentifierSelector.getSelectorValue()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IdentifierSelector.getDataTypeValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayIndexerType.IntegerArrayIndexerType(IntegerArrayType,int)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayIndexerType.IntegerArrayIndexerType(String,IntegerArrayType,int)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayIndexerType.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayIndexerType.deepCopy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayIndexerType.shallowCopy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayIndexerType.setValue(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayType.IntegerArrayType(String,IExpression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayType.IntegerArrayType(String,String[],IExpression)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayType.getValueAtIndex(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayType.initializeArray()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayType.getValue()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayType.setValueAtIndex(int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayType.deepCopy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayType.shallowCopy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerType.IntegerType(String,Boolean)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerType.IntegerType(String,int,Boolean)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerType.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerType.deepCopy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerType.shallowCopy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerType.setValue(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableManager.VariableManager()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableManager.getInstance()</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableManager.addNewDeclaration(Declaration)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableManager.enterNewScope(AbstractDataType,ProcedureHeading)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableManager.leaveScope()</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableManager.getVariable(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableManager.addProcedure(ProcedureHeading)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableManager.addSystemProcedure(AbstractProcedure)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableManager.getProcedure(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableManager.Scope.Scope()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableManager.Scope.addSystemProcedure(AbstractProcedure)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableManager.Scope.Scope(AbstractDataType,ProcedureHeading,AbstractProcedure)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableManager.Scope.createNewScope(AbstractDataType,ProcedureHeading)</name>
      <ncss>7</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableManager.Scope.addNewDeclaration(Declaration)</name>
      <ncss>7</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableManager.Scope.addProcedure(ProcedureHeading)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableManager.Scope.getProcedure(String)</name>
      <ncss>9</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableManager.Scope.getVariable(String)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.AbstractBaseInterpreter.getInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.AbstractBaseInterpreter.buildInterpreterResult()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.AssignmentInterpreter.caseAStatassStatement(AStatassStatement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.AssignmentInterpreter.caseAAssignment(AAssignment)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.AssignmentInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ComparisonExpressionInterpreter.caseAExeqExp(AExeqExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ComparisonExpressionInterpreter.caseAExhaExp(AExhaExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ComparisonExpressionInterpreter.caseAAmpExp(AAmpExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ComparisonExpressionInterpreter.caseAExgeExp(AExgeExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ComparisonExpressionInterpreter.caseAExgtExp(AExgtExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ComparisonExpressionInterpreter.caseATilExp(ATilExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ComparisonExpressionInterpreter.caseAExstExp(AExstExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ComparisonExpressionInterpreter.caseAExseExp(AExseExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ComparisonExpressionInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.DeclarationsInterpreter.caseADeclarations(ADeclarations)</name>
      <ncss>13</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.DeclarationsInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ExpIntegerInterpreter.caseAIntegerExp(AIntegerExp)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ExpIntegerInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ExpInterpreterFactory.ExpInterpreterFactory()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ExpInterpreterFactory.getInterpreter(TNode)</name>
      <ncss>8</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ExpInterpreterFactory.tryGetComparisonExpression(PExp)</name>
      <ncss>5</ncss>
      <ccn>10</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ExpInterpreterFactory.tryGetMathematicalExpression(PExp)</name>
      <ncss>5</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ExpInterpreterFactory.tryGetOtherExpression(PExp)</name>
      <ncss>11</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ExpInterpreterFactory.getExpression(TNode)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.FpSectionInterpreter.FpSectionInterpreter(PFpsection)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.FpSectionInterpreter.caseAFpsection(AFpsection)</name>
      <ncss>13</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.FpSectionInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.IfStatementInterpreter.caseAStatifStatement(AStatifStatement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.IfStatementInterpreter.caseAIfstatement(AIfstatement)</name>
      <ncss>9</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.IfStatementInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.MathematicalExpressionInterpreter.caseASubExp(ASubExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.MathematicalExpressionInterpreter.caseAAddExp(AAddExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.MathematicalExpressionInterpreter.caseADivExp(ADivExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.MathematicalExpressionInterpreter.caseAModExp(AModExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.MathematicalExpressionInterpreter.caseAMulExp(AMulExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.MathematicalExpressionInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ModuleInterpreter.caseAModule(AModule)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ModuleInterpreter.buildInterpreterResult()</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ParenExpInterpreter.caseAParenExp(AParenExp)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ParenExpInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ProcedureBodyInterpreter.caseAProcedurebody(AProcedurebody)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ProcedureBodyInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ProcedureHeadingInterpreter.caseAProceduredeclaration(AProceduredeclaration)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ProcedureHeadingInterpreter.caseAProcedureheading(AProcedureheading)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ProcedureHeadingInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.SelectorExpInterpreter.caseASelectorExp(ASelectorExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.SelectorExpInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.SelectorInterpreter.caseAIdentifierSelector(AIdentifierSelector)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.SelectorInterpreter.caseAAdditionalselectorSelector(AAdditionalselectorSelector)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.SelectorInterpreter.caseAArrayexpressionSelector(AArrayexpressionSelector)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.SelectorInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatementInterpreterFactory.StatementInterpreterFactory()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatementInterpreterFactory.getInterpreter(TNode)</name>
      <ncss>14</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatementInterpreterFactory.getStatement(TNode)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatementSequenceInterpreter.StatementSequenceInterpreter()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatementSequenceInterpreter.getStatementList(PStatement)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatprocStatementInterpreter.caseAStatprocStatement(AStatprocStatement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatprocStatementInterpreter.caseAProcedurecall(AProcedurecall)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatprocStatementInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatwithStatementInterpreter.caseAStatwhileStatement(AStatwhileStatement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatwithStatementInterpreter.caseAWhilestatement(AWhilestatement)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatwithStatementInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.VarInterpreter.caseAVardecl(AVardecl)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.VarInterpreter.caseAVardeclaration(AVardeclaration)</name>
      <ncss>9</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.VarInterpreter.caseAConstDecl(AConstdecl)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.VarInterpreter.caseAConstdeclaration(AConstdeclaration)</name>
      <ncss>9</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.VarInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.WhileTest.test_case_WhileTest1()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function_averages>
      <ncss>3.85</ncss>
      <ccn>1.46</ccn>
      <javadocs>0.00</javadocs>
    </function_averages>
    <ncss>1,067.00</ncss>
  </functions>
</javancss>
