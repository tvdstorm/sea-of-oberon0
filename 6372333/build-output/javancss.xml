<?xml version="1.0"?>
<javancss>
  <date>2011-02-06</date>
  <time>12:08:37</time>
  <packages>
    <package>
      <name>oberon</name>
      <classes>12</classes>
      <functions>39</functions>
      <ncss>262</ncss>
      <javadocs>48</javadocs>
      <javadoc_lines>239</javadoc_lines>
      <single_comment_lines>2</single_comment_lines>
      <multi_comment_lines>22</multi_comment_lines>
    </package>
    <package>
      <name>oberon.data</name>
      <classes>11</classes>
      <functions>47</functions>
      <ncss>192</ncss>
      <javadocs>32</javadocs>
      <javadoc_lines>165</javadoc_lines>
      <single_comment_lines>3</single_comment_lines>
      <multi_comment_lines>91</multi_comment_lines>
    </package>
    <package>
      <name>oberon.exceptions</name>
      <classes>2</classes>
      <functions>2</functions>
      <ncss>10</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>6</multi_comment_lines>
    </package>
    <package>
      <name>oberon.expressions</name>
      <classes>10</classes>
      <functions>22</functions>
      <ncss>149</ncss>
      <javadocs>20</javadocs>
      <javadoc_lines>93</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>54</multi_comment_lines>
    </package>
    <package>
      <name>oberon.interpret</name>
      <classes>20</classes>
      <functions>67</functions>
      <ncss>494</ncss>
      <javadocs>33</javadocs>
      <javadoc_lines>160</javadoc_lines>
      <single_comment_lines>4</single_comment_lines>
      <multi_comment_lines>149</multi_comment_lines>
    </package>
    <package>
      <name>oberon.procedures</name>
      <classes>7</classes>
      <functions>17</functions>
      <ncss>108</ncss>
      <javadocs>19</javadocs>
      <javadoc_lines>94</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>27</multi_comment_lines>
    </package>
    <package>
      <name>oberon.statement</name>
      <classes>4</classes>
      <functions>10</functions>
      <ncss>89</ncss>
      <javadocs>10</javadocs>
      <javadoc_lines>52</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>22</multi_comment_lines>
    </package>
    <package>
      <name>oberon.test</name>
      <classes>3</classes>
      <functions>10</functions>
      <ncss>133</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>16</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <total>
      <classes>69</classes>
      <functions>214</functions>
      <ncss>1437</ncss>
      <javadocs>162</javadocs>
      <javadoc_lines>803</javadoc_lines>
      <single_comment_lines>25</single_comment_lines>
      <multi_comment_lines>371</multi_comment_lines>
    </total>
    <table>
      <tr><td>Packages</td><td>Classes</td><td>Functions</td><td>NCSS</td><td>Javadocs</td><td>per</td></tr>
      <tr><td>8.00</td><td>69.00</td><td>214.00</td><td>1,437.00</td><td>162.00</td><td>Project</td></tr>
      <tr><td></td><td>8.63</td><td>26.75</td><td>179.63</td><td>20.25</td><td>Package</td></tr>
      <tr><td></td><td></td><td>3.10</td><td>20.83</td><td>2.35</td><td>Class</td></tr>
      <tr><td></td><td></td><td></td><td>6.71</td><td>0.76</td><td>Function</td></tr>
    </table>
  </packages>

  <objects>
    <object>
      <name>oberon.IDataType</name>
      <ncss>5</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>5</javadocs>
    </object>
    <object>
      <name>oberon.IExpression</name>
      <ncss>4</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>oberon.IIdentifier</name>
      <ncss>3</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.IProcedure</name>
      <ncss>3</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.IStatement</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.Main</name>
      <ncss>21</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.ReadProcedure</name>
      <ncss>29</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.StatementSequence</name>
      <ncss>8</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.VariableManager</name>
      <ncss>71</ncss>
      <functions>9</functions>
      <classes>1</classes>
      <javadocs>19</javadocs>
    </object>
    <object>
      <name>oberon.VariableManager.Scope</name>
      <ncss>43</ncss>
      <functions>8</functions>
      <classes>0</classes>
      <javadocs>8</javadocs>
    </object>
    <object>
      <name>oberon.WriteCall</name>
      <ncss>22</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.WriteLnCall</name>
      <ncss>13</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.data.AbstractDataType</name>
      <ncss>9</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.data.AbstractIdentifier</name>
      <ncss>3</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.data.ArrayIndexerIdentifier</name>
      <ncss>15</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.data.ExpressionDataType</name>
      <ncss>9</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.data.IntegerArrayDataType</name>
      <ncss>21</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>6</javadocs>
    </object>
    <object>
      <name>oberon.data.IntegerArrayIndexerDataType</name>
      <ncss>17</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.data.RecordDataType</name>
      <ncss>18</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>oberon.data.RecordIndexerDataType</name>
      <ncss>15</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.data.RecordIndexerIdentifier</name>
      <ncss>15</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.data.VariableDataType</name>
      <ncss>15</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.data.VariableIdentifier</name>
      <ncss>9</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.exceptions.UnsupportedException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.exceptions.VariableNotFoundInScopeException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.expressions.AbstractExpression</name>
      <ncss>19</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.expressions.AbstractIntegerExpression</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.expressions.AbstractLeftAndRightExpression</name>
      <ncss>14</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>6</javadocs>
    </object>
    <object>
      <name>oberon.expressions.ComparisonExpression</name>
      <ncss>31</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.expressions.ComparisonType</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.expressions.IdentifierExpression</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.expressions.IntegerExpression</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.expressions.MathematicalExpression</name>
      <ncss>28</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.expressions.MathematicalExpressionType</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.expressions.ParenthesesExpression</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.interpret.AbstractBaseInterpreter</name>
      <ncss>4</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.interpret.AssignmentInterpreter</name>
      <ncss>12</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.interpret.ComparisonExpressionInterpreter</name>
      <ncss>38</ncss>
      <functions>9</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.interpret.DeclarationsInterpreter</name>
      <ncss>18</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.interpret.ExpIntegerInterpreter</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.interpret.ExpInterpreterFactory</name>
      <ncss>35</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>7</javadocs>
    </object>
    <object>
      <name>oberon.interpret.FpSectionInterpreter</name>
      <ncss>20</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.interpret.IfStatementInterpreter</name>
      <ncss>18</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.interpret.MathematicalExpressionInterpreter</name>
      <ncss>26</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.interpret.ModuleInterpreter</name>
      <ncss>14</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.interpret.ParenExpInterpreter</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.interpret.ProcedureBodyInterpreter</name>
      <ncss>10</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.interpret.ProcedureHeadingInterpreter</name>
      <ncss>15</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.interpret.SelectorExpInterpreter</name>
      <ncss>8</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.interpret.SelectorInterpreter</name>
      <ncss>17</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.interpret.StatementInterpreterFactory</name>
      <ncss>20</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>oberon.interpret.StatementSequenceInterpreter</name>
      <ncss>7</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.interpret.StatprocStatementInterpreter</name>
      <ncss>11</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.interpret.StatwithStatementInterpreter</name>
      <ncss>10</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.interpret.VarInterpreter</name>
      <ncss>28</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.procedures.AbstractProcedure</name>
      <ncss>15</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>oberon.procedures.Declaration</name>
      <ncss>13</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>oberon.procedures.FormalParamSection</name>
      <ncss>10</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>oberon.procedures.FormalParamType</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.procedures.ProcedureBody</name>
      <ncss>10</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.procedures.ProcedureHeading</name>
      <ncss>13</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.procedures.SystemMethodCall</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.statement.AssignmentStatement</name>
      <ncss>9</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.statement.IfStatement</name>
      <ncss>27</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>oberon.statement.ProcedurecallStatement</name>
      <ncss>11</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.statement.WhileStatement</name>
      <ncss>9</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.test.AbstractTest</name>
      <ncss>15</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.test.VariableManagerTest</name>
      <ncss>37</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.test.WhileTest</name>
      <ncss>29</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <averages>
      <ncss>14.86</ncss>
      <functions>3.10</functions>
      <classes>0.01</classes>
      <javadocs>2.46</javadocs>
    </averages>
    <ncss>1,437.00</ncss>
  </objects>

  <functions>
    <function>
      <name>oberon.IDataType.getValue()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IDataType.copy(String)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IDataType.getName()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IDataType.setValue(int)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IExpression.evalAsInt()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IExpression.evalAsBoolean()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IExpression.copy(String)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IIdentifier.getDataTypeValue()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IIdentifier.getValue()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IProcedure.getName()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IProcedure.call(IExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IStatement.eval()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.Main.main(String[])</name>
      <ncss>20</ncss>
      <ccn>3</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.ReadProcedure.eval()</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.ReadProcedure.readInputFromConsole(int)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.ReadProcedure.initialize()</name>
      <ncss>16</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.StatementSequence.StatementSequence(IStatement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.StatementSequence.eval()</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.VariableManager.VariableManager()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.VariableManager.getInstance()</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.VariableManager.addNewDeclaration(Declaration)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.VariableManager.enterNewScope(IDataType,IProcedure)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.VariableManager.leaveScope()</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.VariableManager.getVariable(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.VariableManager.addProcedureToCurrentScope(ProcedureHeading)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.VariableManager.addSystemProcedureToCurrentScope(AbstractProcedure)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.VariableManager.getProcedureFromCurrentScope(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.VariableManager.Scope.Scope()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.VariableManager.Scope.Scope(IDataType,IProcedure,IProcedure)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.VariableManager.Scope.addSystemProcedure(AbstractProcedure)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.VariableManager.Scope.createNewScope(IDataType,IProcedure)</name>
      <ncss>7</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.VariableManager.Scope.addNewDeclaration(Declaration)</name>
      <ncss>7</ncss>
      <ccn>4</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.VariableManager.Scope.addProcedure(IProcedure)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.VariableManager.Scope.getProcedure(String)</name>
      <ncss>9</ncss>
      <ccn>4</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.VariableManager.Scope.getVariable(String)</name>
      <ncss>4</ncss>
      <ccn>4</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.WriteCall.eval()</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.WriteCall.initialize()</name>
      <ncss>16</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.WriteLnCall.eval()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.WriteLnCall.initialize()</name>
      <ncss>10</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractDataType.AbstractDataType(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractDataType.getValue()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractDataType.copy(String)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractDataType.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractDataType.setValue(int)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractIdentifier.getDataTypeValue()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractIdentifier.getValue()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.ArrayIndexerIdentifier.ArrayIndexerIdentifier(IIdentifier,IExpression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.ArrayIndexerIdentifier.getDataTypeAsArrayType()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.ArrayIndexerIdentifier.getValue()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.ArrayIndexerIdentifier.getDataTypeValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.ExpressionDataType.ExpressionDataType(String,IExpression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.ExpressionDataType.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.ExpressionDataType.copy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayDataType.IntegerArrayDataType(String,IExpression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayDataType.IntegerArrayDataType(String,String[],IExpression)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayDataType.getValueAtIndex(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayDataType.initializeArray()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayDataType.getValue()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayDataType.setValueAtIndex(int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayDataType.copy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayIndexerDataType.IntegerArrayIndexerDataType(IntegerArrayDataType,int)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayIndexerDataType.IntegerArrayIndexerDataType(String,IntegerArrayDataType,int)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayIndexerDataType.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayIndexerDataType.copy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayIndexerDataType.setValue(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordDataType.RecordDataType(String,String)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordDataType.RecordDataType(String,Integer)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordDataType.getValueAtIndex(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordDataType.getValue()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordDataType.copy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordIndexerDataType.RecordIndexerDataType(String,RecordDataType,String)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordIndexerDataType.RecordIndexerDataType(RecordDataType,String)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordIndexerDataType.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordIndexerDataType.copy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordIndexerIdentifier.RecordIndexerIdentifier(IIdentifier,String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordIndexerIdentifier.getDataTypeAsRecordDataType()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordIndexerIdentifier.getValue()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordIndexerIdentifier.getDataTypeValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableDataType.VariableDataType(String,Boolean)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableDataType.VariableDataType(String,int,Boolean)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableDataType.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableDataType.copy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableDataType.setValue(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableIdentifier.VariableIdentifier(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableIdentifier.getValue()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableIdentifier.getDataTypeValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.exceptions.UnsupportedException.UnsupportedException(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.exceptions.VariableNotFoundInScopeException.VariableNotFoundInScopeException(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AbstractExpression.evalAsInt()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AbstractExpression.evalAsBoolean()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AbstractExpression.booleanAsInt(Boolean)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AbstractExpression.copy(String)</name>
      <ncss>10</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AbstractIntegerExpression.AbstractIntegerExpression(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AbstractIntegerExpression.evalAsInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AbstractLeftAndRightExpression.AbstractLeftAndRightExpression(IExpression,IExpression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AbstractLeftAndRightExpression.setRighthandSide(IExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AbstractLeftAndRightExpression.getRighthandSide()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AbstractLeftAndRightExpression.setLefthandSide(IExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AbstractLeftAndRightExpression.getLefthandSide()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.ComparisonExpression.ComparisonExpression(IExpression,IExpression,ComparisonType)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.ComparisonExpression.evalAsInt()</name>
      <ncss>26</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.IdentifierExpression.IdentifierExpression(IIdentifier)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.IdentifierExpression.copy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.IdentifierExpression.evalAsInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.IntegerExpression.IntegerExpression(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.IntegerExpression.evalAsInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.MathematicalExpression.MathematicalExpression(IExpression,IExpression,MathematicalExpressionType)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.MathematicalExpression.evalAsInt()</name>
      <ncss>23</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.ParenthesesExpression.ParenthesesExpression(IExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.ParenthesesExpression.evalAsInt()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.AbstractBaseInterpreter.getInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.interpret.AbstractBaseInterpreter.buildInterpreterResult()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.interpret.AssignmentInterpreter.caseAStatassStatement(AStatassStatement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.AssignmentInterpreter.caseAAssignment(AAssignment)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.AssignmentInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ComparisonExpressionInterpreter.caseAExeqExp(AExeqExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ComparisonExpressionInterpreter.caseAExhaExp(AExhaExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ComparisonExpressionInterpreter.caseAAmpExp(AAmpExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ComparisonExpressionInterpreter.caseAExgeExp(AExgeExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ComparisonExpressionInterpreter.caseAExgtExp(AExgtExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ComparisonExpressionInterpreter.caseATilExp(ATilExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ComparisonExpressionInterpreter.caseAExstExp(AExstExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ComparisonExpressionInterpreter.caseAExseExp(AExseExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ComparisonExpressionInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.DeclarationsInterpreter.caseADeclarations(ADeclarations)</name>
      <ncss>13</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.DeclarationsInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ExpIntegerInterpreter.caseAIntegerExp(AIntegerExp)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ExpIntegerInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ExpInterpreterFactory.ExpInterpreterFactory()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ExpInterpreterFactory.getInterpreter(TNode)</name>
      <ncss>8</ncss>
      <ccn>3</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ExpInterpreterFactory.tryGetComparisonExpression(PExp)</name>
      <ncss>5</ncss>
      <ccn>10</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ExpInterpreterFactory.tryGetMathematicalExpression(PExp)</name>
      <ncss>5</ncss>
      <ccn>7</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ExpInterpreterFactory.tryGetOtherExpression(PExp)</name>
      <ncss>11</ncss>
      <ccn>4</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ExpInterpreterFactory.getExpression(TNode)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.interpret.FpSectionInterpreter.FpSectionInterpreter(PFpsection)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.interpret.FpSectionInterpreter.caseAFpsection(AFpsection)</name>
      <ncss>12</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.FpSectionInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.IfStatementInterpreter.caseAStatifStatement(AStatifStatement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.IfStatementInterpreter.caseAIfstatement(AIfstatement)</name>
      <ncss>9</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.IfStatementInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.MathematicalExpressionInterpreter.caseASubExp(ASubExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.MathematicalExpressionInterpreter.caseAAddExp(AAddExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.MathematicalExpressionInterpreter.caseADivExp(ADivExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.MathematicalExpressionInterpreter.caseAModExp(AModExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.MathematicalExpressionInterpreter.caseAMulExp(AMulExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.MathematicalExpressionInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ModuleInterpreter.caseAModule(AModule)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ModuleInterpreter.buildInterpreterResult()</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ParenExpInterpreter.caseAParenExp(AParenExp)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ParenExpInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ProcedureBodyInterpreter.caseAProcedurebody(AProcedurebody)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ProcedureBodyInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ProcedureHeadingInterpreter.caseAProceduredeclaration(AProceduredeclaration)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ProcedureHeadingInterpreter.caseAProcedureheading(AProcedureheading)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.ProcedureHeadingInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.SelectorExpInterpreter.caseASelectorExp(ASelectorExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.SelectorExpInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.SelectorInterpreter.caseAIdentifierSelector(AIdentifierSelector)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.SelectorInterpreter.caseARecordSelector(ARecordSelector)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.SelectorInterpreter.caseAArrayexpressionSelector(AArrayexpressionSelector)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.SelectorInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatementInterpreterFactory.StatementInterpreterFactory()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatementInterpreterFactory.getInterpreter(TNode)</name>
      <ncss>14</ncss>
      <ccn>5</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatementInterpreterFactory.getStatement(TNode)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatementSequenceInterpreter.StatementSequenceInterpreter()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatementSequenceInterpreter.getStatementList(PStatement)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatprocStatementInterpreter.caseAStatprocStatement(AStatprocStatement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatprocStatementInterpreter.caseAProcedurecall(AProcedurecall)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatprocStatementInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatwithStatementInterpreter.caseAStatwhileStatement(AStatwhileStatement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatwithStatementInterpreter.caseAWhilestatement(AWhilestatement)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.StatwithStatementInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.VarInterpreter.caseAVardecl(AVardecl)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.VarInterpreter.caseAVardeclaration(AVardeclaration)</name>
      <ncss>9</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.VarInterpreter.caseAConstdecl(AConstdecl)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.VarInterpreter.caseAConstdeclaration(AConstdeclaration)</name>
      <ncss>9</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.interpret.VarInterpreter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.procedures.AbstractProcedure.AbstractProcedure(String,FormalParamSection,ProcedureBody)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.AbstractProcedure.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.procedures.AbstractProcedure.getParamSections()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.AbstractProcedure.getBody()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.AbstractProcedure.call(IExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.procedures.Declaration.Declaration(IDataType,IProcedure)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.Declaration.getVariables()</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.Declaration.getProcedures()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.FormalParamSection.FormalParamSection(String,FormalParamType)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.FormalParamSection.getNames()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.FormalParamSection.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.ProcedureBody.ProcedureBody(Declaration,StatementSequence)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.ProcedureBody.eval()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.ProcedureHeading.ProcedureHeading(String,FormalParamSection,ProcedureBody)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.ProcedureHeading.call(IExpression)</name>
      <ncss>10</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.procedures.SystemMethodCall.SystemMethodCall(String,FormalParamSection,ProcedureBody)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.SystemMethodCall.call(IExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.statement.AssignmentStatement.AssignmentStatement(IIdentifier,IExpression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.statement.AssignmentStatement.eval()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.statement.IfStatement.IfStatement(IExpression,StatementSequence,IfStatement,StatementSequence)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.statement.IfStatement.eval()</name>
      <ncss>13</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.statement.IfStatement.evalStatements()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.statement.IfStatement.conditionIsTrue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.statement.ProcedurecallStatement.ProcedurecallStatement(String,IExpression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.statement.ProcedurecallStatement.eval()</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.statement.WhileStatement.WhileStatement(IExpression,StatementSequence)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.statement.WhileStatement.eval()</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.AbstractTest.loadDeclaration()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.AbstractTest.addVariableToDeclaration(VariableDataType)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.AbstractTest.getNewMathematicalExpression(String,int,MathematicalExpressionType)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.AbstractTest.getNewComparisonExpression(String,int,ComparisonType)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.AbstractTest.getAssignmentStatement(String,IExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.VariableManagerTest.test_case_VariableManagerAddVariableToScopeAndRetrieve()</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.VariableManagerTest.test_case_VariableManagerAddVariableToScopeAndRetrieveAfterEnteringNewScope()</name>
      <ncss>15</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.VariableManagerTest.test_case_VariableManagerVariablesInPreviousScopeAreRestoredAfterLeavingTheScope()</name>
      <ncss>16</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.WhileTest.test_case_WhileTestWithValidCondition()</name>
      <ncss>13</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.WhileTest.test_case_WhileTestWithImmediatelyTrueCondition()</name>
      <ncss>15</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function_averages>
      <ncss>3.87</ncss>
      <ccn>1.40</ccn>
      <javadocs>0.48</javadocs>
    </function_averages>
    <ncss>1,437.00</ncss>
  </functions>
</javancss>
