<?xml version="1.0"?>
<javancss>
  <date>2011-02-08</date>
  <time>22:53:08</time>
  <packages>
    <package>
      <name>com.arievanderveek.soo</name>
      <classes>3</classes>
      <functions>5</functions>
      <ncss>41</ncss>
      <javadocs>7</javadocs>
      <javadoc_lines>47</javadoc_lines>
      <single_comment_lines>13</single_comment_lines>
      <multi_comment_lines>4</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.ast</name>
      <classes>1</classes>
      <functions>2</functions>
      <ncss>6</ncss>
      <javadocs>3</javadocs>
      <javadoc_lines>29</javadoc_lines>
      <single_comment_lines>8</single_comment_lines>
      <multi_comment_lines>3</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.ast.binaryoperators</name>
      <classes>14</classes>
      <functions>40</functions>
      <ncss>228</ncss>
      <javadocs>27</javadocs>
      <javadoc_lines>110</javadoc_lines>
      <single_comment_lines>11</single_comment_lines>
      <multi_comment_lines>172</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.ast.codeblocks</name>
      <classes>6</classes>
      <functions>25</functions>
      <ncss>228</ncss>
      <javadocs>19</javadocs>
      <javadoc_lines>112</javadoc_lines>
      <single_comment_lines>13</single_comment_lines>
      <multi_comment_lines>49</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.ast.statements</name>
      <classes>7</classes>
      <functions>25</functions>
      <ncss>202</ncss>
      <javadocs>17</javadocs>
      <javadoc_lines>90</javadoc_lines>
      <single_comment_lines>14</single_comment_lines>
      <multi_comment_lines>81</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.ast.unaryoperators</name>
      <classes>3</classes>
      <functions>8</functions>
      <ncss>43</ncss>
      <javadocs>6</javadocs>
      <javadoc_lines>25</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>29</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.ast.variables</name>
      <classes>6</classes>
      <functions>26</functions>
      <ncss>119</ncss>
      <javadocs>17</javadocs>
      <javadoc_lines>91</javadoc_lines>
      <single_comment_lines>7</single_comment_lines>
      <multi_comment_lines>86</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.parser</name>
      <classes>2</classes>
      <functions>2</functions>
      <ncss>37</ncss>
      <javadocs>2</javadocs>
      <javadoc_lines>10</javadoc_lines>
      <single_comment_lines>4</single_comment_lines>
      <multi_comment_lines>11</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.runtime</name>
      <classes>8</classes>
      <functions>56</functions>
      <ncss>424</ncss>
      <javadocs>19</javadocs>
      <javadoc_lines>121</javadoc_lines>
      <single_comment_lines>77</single_comment_lines>
      <multi_comment_lines>275</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.util</name>
      <classes>3</classes>
      <functions>12</functions>
      <ncss>82</ncss>
      <javadocs>14</javadocs>
      <javadoc_lines>97</javadoc_lines>
      <single_comment_lines>10</single_comment_lines>
      <multi_comment_lines>9</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.visitors</name>
      <classes>1</classes>
      <functions>0</functions>
      <ncss>2</ncss>
      <javadocs>1</javadocs>
      <javadoc_lines>4</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>27</multi_comment_lines>
    </package>
    <total>
      <classes>54</classes>
      <functions>201</functions>
      <ncss>1412</ncss>
      <javadocs>132</javadocs>
      <javadoc_lines>736</javadoc_lines>
      <single_comment_lines>157</single_comment_lines>
      <multi_comment_lines>746</multi_comment_lines>
    </total>
    <table>
      <tr><td>Packages</td><td>Classes</td><td>Functions</td><td>NCSS</td><td>Javadocs</td><td>per</td></tr>
      <tr><td>11.00</td><td>54.00</td><td>201.00</td><td>1,412.00</td><td>132.00</td><td>Project</td></tr>
      <tr><td></td><td>4.91</td><td>18.27</td><td>128.36</td><td>12.00</td><td>Package</td></tr>
      <tr><td></td><td></td><td>3.72</td><td>26.15</td><td>2.44</td><td>Class</td></tr>
      <tr><td></td><td></td><td></td><td>7.02</td><td>0.66</td><td>Function</td></tr>
    </table>
  </packages>

  <objects>
    <object>
      <name>com.arievanderveek.soo.Main</name>
      <ncss>9</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.SeaOfOberonController</name>
      <ncss>18</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.SeaOfOberonException</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.ASTNode</name>
      <ncss>3</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.binaryoperators.AbstractBinaryOperatorNode</name>
      <ncss>7</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.binaryoperators.AdditionOperatorNode</name>
      <ncss>11</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.binaryoperators.AndOperatorNode</name>
      <ncss>14</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.binaryoperators.DivisionOperatorNode</name>
      <ncss>11</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.binaryoperators.EqualOperatorNode</name>
      <ncss>14</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.binaryoperators.GreaterEqualThenOperatorNode</name>
      <ncss>14</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.binaryoperators.GreaterThenOperatorNode</name>
      <ncss>14</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.binaryoperators.ModulusOperatorNode</name>
      <ncss>11</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.binaryoperators.MultiplicationOperatorNode</name>
      <ncss>11</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.binaryoperators.NotEqualOperatorNode</name>
      <ncss>14</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.binaryoperators.OrOperatorNode</name>
      <ncss>14</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.binaryoperators.SmallerEqualThenOperatorNode</name>
      <ncss>14</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.binaryoperators.SmallerThenOperatorNode</name>
      <ncss>14</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.binaryoperators.SubtractionOperatorNode</name>
      <ncss>11</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.codeblocks.CodeBlockNode</name>
      <ncss>82</ncss>
      <functions>8</functions>
      <classes>0</classes>
      <javadocs>8</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.codeblocks.ModuleNode</name>
      <ncss>16</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.codeblocks.ProcedureNode</name>
      <ncss>35</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.codeblocks.ReadLineCallNode</name>
      <ncss>21</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.codeblocks.WriteCallNode</name>
      <ncss>17</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.codeblocks.WriteLnCallNode</name>
      <ncss>7</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.statements.AbstractParameterNode</name>
      <ncss>15</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.statements.AssignmentNode</name>
      <ncss>15</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.statements.CallByRefParameterNode</name>
      <ncss>11</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.statements.CallByValParameterNode</name>
      <ncss>7</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.statements.IfStatementNode</name>
      <ncss>49</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.statements.ProcedureCallNode</name>
      <ncss>28</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.statements.WhileLoopNode</name>
      <ncss>34</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.unaryoperators.NegationOperatorNode</name>
      <ncss>10</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.unaryoperators.NotOperatorNode</name>
      <ncss>16</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.unaryoperators.UnaryOperatorNode</name>
      <ncss>7</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.variables.ArrayTypeNode</name>
      <ncss>19</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.variables.DeclarationNode</name>
      <ncss>11</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.variables.FieldNode</name>
      <ncss>18</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.variables.IdentifierNode</name>
      <ncss>25</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.variables.IntegerTypeNode</name>
      <ncss>11</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.variables.RecordTypeNode</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.parser.AntlrParserImpl</name>
      <ncss>16</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.parser.Parser</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.runtime.ArraySymbol</name>
      <ncss>28</ncss>
      <functions>8</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.runtime.IntegerSymbol</name>
      <ncss>26</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.runtime.MemoryAddress</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.runtime.MemoryMap</name>
      <ncss>54</ncss>
      <functions>9</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.runtime.Scope</name>
      <ncss>231</ncss>
      <functions>21</functions>
      <classes>0</classes>
      <javadocs>9</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.runtime.Symbol</name>
      <ncss>16</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.runtime.SymbolTable</name>
      <ncss>24</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.runtime.SymbolTypesEnum</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.util.ConfigurationFactory</name>
      <ncss>44</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.util.Constants</name>
      <ncss>7</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.util.SeaOfOberonConfiguration</name>
      <ncss>19</ncss>
      <functions>8</functions>
      <classes>0</classes>
      <javadocs>9</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.visitors.ASTVisitor</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <averages>
      <ncss>21.28</ncss>
      <functions>3.72</functions>
      <classes>0.00</classes>
      <javadocs>2.44</javadocs>
    </averages>
    <ncss>1,412.00</ncss>
  </objects>

  <functions>
    <function>
      <name>com.arievanderveek.soo.Main.main(String[])</name>
      <ncss>8</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.SeaOfOberonController.SeaOfOberonController(SeaOfOberonConfiguration)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.SeaOfOberonController.executeSourceCode()</name>
      <ncss>13</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.SeaOfOberonException.SeaOfOberonException(String,Throwable)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.SeaOfOberonException.SeaOfOberonException(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.ASTNode.interpret(Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.ASTNode.toTreeString(String)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.AbstractBinaryOperatorNode.AbstractBinaryOperatorNode(ASTNode,ASTNode)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.AdditionOperatorNode.AdditionOperatorNode(ASTNode,ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.AdditionOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.AdditionOperatorNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.AndOperatorNode.AndOperatorNode(ASTNode,ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.AndOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.AndOperatorNode.interpret(Scope)</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.DivisionOperatorNode.DivisionOperatorNode(ASTNode,ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.DivisionOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.DivisionOperatorNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.EqualOperatorNode.EqualOperatorNode(ASTNode,ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.EqualOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.EqualOperatorNode.interpret(Scope)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.GreaterEqualThenOperatorNode.GreaterEqualThenOperatorNode(ASTNode,ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.GreaterEqualThenOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.GreaterEqualThenOperatorNode.interpret(Scope)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.GreaterThenOperatorNode.GreaterThenOperatorNode(ASTNode,ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.GreaterThenOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.GreaterThenOperatorNode.interpret(Scope)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.ModulusOperatorNode.ModulusOperatorNode(ASTNode,ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.ModulusOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.ModulusOperatorNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.MultiplicationOperatorNode.MultiplicationOperatorNode(ASTNode,ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.MultiplicationOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.MultiplicationOperatorNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.NotEqualOperatorNode.NotEqualOperatorNode(ASTNode,ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.NotEqualOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.NotEqualOperatorNode.interpret(Scope)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.OrOperatorNode.OrOperatorNode(ASTNode,ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.OrOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.OrOperatorNode.interpret(Scope)</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.SmallerEqualThenOperatorNode.SmallerEqualThenOperatorNode(ASTNode,ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.SmallerEqualThenOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.SmallerEqualThenOperatorNode.interpret(Scope)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.SmallerThenOperatorNode.SmallerThenOperatorNode(ASTNode,ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.SmallerThenOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.SmallerThenOperatorNode.interpret(Scope)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.SubtractionOperatorNode.SubtractionOperatorNode(ASTNode,ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.SubtractionOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.binaryoperators.SubtractionOperatorNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.CodeBlockNode.CodeBlockNode(String,String,ASTNode,ASTNode,ASTNode,ASTNode,ASTNode)</name>
      <ncss>15</ncss>
      <ccn>3</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.CodeBlockNode.toTreeString(String)</name>
      <ncss>48</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.CodeBlockNode.getCodeBlockName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.CodeBlockNode.getConstants()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.CodeBlockNode.getTypes()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.CodeBlockNode.getVariables()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.CodeBlockNode.getProcedures()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.CodeBlockNode.getStatementSequence()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ModuleNode.ModuleNode(String,String,ASTNode,ASTNode,ASTNode,ASTNode,ASTNode)</name>
      <ncss>8</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ModuleNode.interpret(Scope)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ModuleNode.toTreeString(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ProcedureNode.ProcedureNode(String,String,ASTNode,ASTNode,ASTNode,ASTNode,ASTNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ProcedureNode.ProcedureNode(String,String,ASTNode,ASTNode,ASTNode,ASTNode,ASTNode,ASTNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ProcedureNode.interpret(Scope)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ProcedureNode.toTreeString(String)</name>
      <ncss>12</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ProcedureNode.getParameterBlocks()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ProcedureNode.isAmountOfParametersEqual(ASTNode)</name>
      <ncss>9</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ReadLineCallNode.ReadLineCallNode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ReadLineCallNode.interpret(Scope)</name>
      <ncss>10</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ReadLineCallNode.buildParameters()</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.WriteCallNode.WriteCallNode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.WriteCallNode.interpret(Scope)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.WriteCallNode.buildParameters()</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.WriteLnCallNode.WriteLnCallNode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.WriteLnCallNode.interpret(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.AbstractParameterNode.AbstractParameterNode(ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.AbstractParameterNode.toTreeString(String)</name>
      <ncss>9</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.AbstractParameterNode.getFormalParameter()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.AssignmentNode.AssignmentNode(ASTNode,ASTNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.AssignmentNode.interpret(Scope)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.AssignmentNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.CallByRefParameterNode.CallByRefParameterNode(ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.CallByRefParameterNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.CallByRefParameterNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.CallByValParameterNode.CallByValParameterNode(ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.CallByValParameterNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.CallByValParameterNode.toTreeString(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.IfStatementNode.IfStatementNode(ASTNode,ASTNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.IfStatementNode.insertNode(ASTNode,ASTNode)</name>
      <ncss>8</ncss>
      <ccn>4</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.IfStatementNode.addFinalElseStatementNode(ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.IfStatementNode.interpret(Scope)</name>
      <ncss>13</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.IfStatementNode.toTreeString(String)</name>
      <ncss>19</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.ProcedureCallNode.ProcedureCallNode(ASTNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.ProcedureCallNode.ProcedureCallNode(ASTNode,ASTNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.ProcedureCallNode.interpret(Scope)</name>
      <ncss>9</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.ProcedureCallNode.toTreeString(String)</name>
      <ncss>10</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.WhileLoopNode.WhileLoopNode(ASTNode,ASTNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.WhileLoopNode.interpret(Scope)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.WhileLoopNode.conditionIsTrue(Scope)</name>
      <ncss>9</ncss>
      <ccn>6</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.WhileLoopNode.toTreeString(String)</name>
      <ncss>14</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.unaryoperators.NegationOperatorNode.NegationOperatorNode(ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.unaryoperators.NegationOperatorNode.toTreeString(String)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.unaryoperators.NegationOperatorNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.unaryoperators.NotOperatorNode.NotOperatorNode(ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.unaryoperators.NotOperatorNode.interpret(Scope)</name>
      <ncss>8</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.unaryoperators.NotOperatorNode.toTreeString(String)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.unaryoperators.UnaryOperatorNode.UnaryOperatorNode(ASTNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.unaryoperators.UnaryOperatorNode.getNode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.ArrayTypeNode.ArrayTypeNode(ASTNode,ASTNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.ArrayTypeNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.ArrayTypeNode.toTreeString(String)</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.ArrayTypeNode.getSizeExpression()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.ArrayTypeNode.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.DeclarationNode.DeclarationNode(ASTNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.DeclarationNode.toTreeString(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.DeclarationNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.DeclarationNode.getExpression()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.FieldNode.FieldNode(String,ASTNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.FieldNode.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.FieldNode.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.FieldNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.FieldNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.IdentifierNode.IdentifierNode(String)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.IdentifierNode.IdentifierNode(String,ASTNode)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.IdentifierNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.IdentifierNode.toTreeString(String)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.IdentifierNode.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.IdentifierNode.getSelectors()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.IntegerTypeNode.IntegerTypeNode(Integer)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.IntegerTypeNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.IntegerTypeNode.toTreeString(String)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.RecordTypeNode.RecordTypeNode(ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.RecordTypeNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.RecordTypeNode.toTreeString(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.parser.AntlrParserImpl.parseFile(String)</name>
      <ncss>15</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.parser.Parser.parseFile(String)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.ArraySymbol.ArraySymbol(boolean,MemoryAddress[])</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.ArraySymbol.addOrUpdateAddress(Integer,MemoryAddress)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.ArraySymbol.getAddress(Integer)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.ArraySymbol.getAddressList()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.ArraySymbol.isMutable()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.ArraySymbol.isReferencedSymbol()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.ArraySymbol.setReferencedSymbol(boolean)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.ArraySymbol.toString()</name>
      <ncss>11</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.IntegerSymbol.IntegerSymbol(boolean,MemoryAddress)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.IntegerSymbol.getMemoryAdress()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.IntegerSymbol.updateMemoryAddress(MemoryAddress)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.IntegerSymbol.isMutable()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.IntegerSymbol.isReferencedSymbol()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.IntegerSymbol.setReferencedSymbol(boolean)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.IntegerSymbol.toString()</name>
      <ncss>11</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryAddress.MemoryAddress(Integer)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryAddress.hashCode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryAddress.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryMap.getValue(MemoryAddress)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryMap.deleteValue(MemoryAddress)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryMap.deleteMemoryAddress(MemoryAddress)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryMap.deleteMemoryAddressList(MemoryAddress)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryMap.updateValue(MemoryAddress,Integer)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryMap.addValue(Integer)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryMap.copyValueToNewAdress(MemoryAddress)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryMap.generateMemoryAdress()</name>
      <ncss>10</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryMap.toString()</name>
      <ncss>14</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.Scope(ASTNode,ASTNode,ASTNode,ASTNode)</name>
      <ncss>10</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.Scope(Scope,ProcedureNode,ASTNode)</name>
      <ncss>10</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.getProcedure(String)</name>
      <ncss>8</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.getValue(IdentifierNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.updateValue(IdentifierNode,Integer)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.lookupSymbol(String)</name>
      <ncss>8</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.copySymbol(String)</name>
      <ncss>11</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.copyIntegerSymbol(IntegerSymbol)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.copyArraySymbol(ArraySymbol)</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.getAddressForSymbol(IdentifierNode)</name>
      <ncss>38</ncss>
      <ccn>19</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.popScope()</name>
      <ncss>14</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.isRootScope()</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.getMemoryMap()</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.processDelcarations(ASTNode,ASTNode,ASTNode,ASTNode)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.registerTypes(ASTNode)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.registerProcedures(ASTNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.registerDeclarations(ASTNode,ASTNode,boolean)</name>
      <ncss>20</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.addIntegerSymbol(String,Integer,boolean)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.addArraySymbol(String,ArrayTypeNode)</name>
      <ncss>8</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.processProcedureParameters(ProcedureNode,ASTNode)</name>
      <ncss>43</ncss>
      <ccn>14</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.toString()</name>
      <ncss>20</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Symbol.Symbol(SymbolTypesEnum,boolean)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Symbol.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Symbol.isReferencedSymbol()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Symbol.setReferencedSymbol(boolean)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Symbol.isMutable()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.SymbolTable.SymbolTable()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.SymbolTable.getSymbol(String)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.SymbolTable.generateNonRefAddressList(Scope)</name>
      <ncss>15</ncss>
      <ccn>6</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.ConfigurationFactory.createConfiguration(String[])</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.ConfigurationFactory.parseArguments(String[])</name>
      <ncss>23</ncss>
      <ccn>7</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.ConfigurationFactory.printHelp(Options,String)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.ConfigurationFactory.creatOptions()</name>
      <ncss>9</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.SeaOfOberonConfiguration.setParserImplClass(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.SeaOfOberonConfiguration.getParserImplClass()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.SeaOfOberonConfiguration.setSourceCodeFileName(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.SeaOfOberonConfiguration.getSourceCodeFileName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.SeaOfOberonConfiguration.getVisitorImplClass()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.SeaOfOberonConfiguration.setVisitorImplClass(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.SeaOfOberonConfiguration.printTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.SeaOfOberonConfiguration.setPrintTree(boolean)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function_averages>
      <ncss>5.15</ncss>
      <ccn>1.82</ccn>
      <javadocs>0.39</javadocs>
    </function_averages>
    <ncss>1,412.00</ncss>
  </functions>
</javancss>
