module eu.wietsevenema.lang.oberon.parser.Expression(
	Spacing, Symbol, Identifier);

import Spacing;
import Symbol;
import Identifier;
	
/*
All operators of the same precedence associate from left to right. 
For example, x-y-z stands for (x-y)-z.

Operator precedence in Oberon-0. 
---------------------------------------------------------
| Operator		| Description							|
---------------------------------------------------------
| ~ 			| Logical negation 						|
---------------------------------------------------------
| OR 			| Logical disjunction			 		|
---------------------------------------------------------
| &				| Logical conjunction			 		|
---------------------------------------------------------
| * DIV MOD 	| product, integer quotient, modulus	|
---------------------------------------------------------
| + -			| sum, difference						|
---------------------------------------------------------
| = # < <= > >= | equal, unequal, less, less or equal, 	|
|				| greater, greater or equal				|
---------------------------------------------------------
*/

generic EqualityExpression =
    <Recursion>  EqualityExpression EqualityOperator AdditiveExpression
  / <Base>      yyValue:AdditiveExpression 
  ;

generic AdditiveExpression = 
	  <Recursion> AdditiveExpression AdditiveOperator MultiplicativeExpression
	/ <Base> yyValue:MultiplicativeExpression
	;

generic MultiplicativeExpression = 
	  <Recursion> MultiplicativeExpression MultiplicativeOperator LogicalConjunctiveExpression
	/ <Base> yyValue:LogicalConjunctiveExpression
	;

generic LogicalConjunctiveExpression = 
  	  <Recursion> LogicalConjunctiveExpression "&":Symbol LogicalDisjunctiveExpression
	/ <Base> yyValue:LogicalDisjunctiveExpression
	;

generic LogicalDisjunctiveExpression = 
  	  <Recursion> LogicalDisjunctiveExpression "OR":Symbol UnaryExpression
	/ <Base> yyValue:UnaryExpression
	;
	
LogicalNegationExpression LogicalNegationExpression =
	void:"~":Symbol ue:UnaryExpression 
	{
    	yyValue = new LogicalNegationExpression((Expression)ue);
	}
	;


Node UnaryExpression =
    <LogicalNot> 	yyValue:LogicalNegationExpression
  / <UnaryPlusMin> 	yyValue:UnaryPlusMin
  / <Base>       	yyValue:PrimaryExpression
  ;

UnaryMinExpression UnaryPlusMin = 
	void:"-":Symbol ue:UnaryExpression 
	{
    	yyValue = new UnaryMinExpression((Expression)ue);
	}
  / void:"+":Symbol yyValue:UnaryExpression  /* ignore unary plus */
	;

Node PrimaryExpression =
   <Constant>                 	yyValue:Constant
 / <Selector>             		yyValue:Selector
 / <ParenthesizedExpression> 	yyValue:ParenthesizedExpression
 ;


generic Selector = 
	<Array> Selector void:"[":Symbol EqualityExpression void:"]":Symbol @ArraySelector 
  /	<Record> Selector void:".":Symbol Identifier @RecordSelector
  / <Base> yyValue:Identifier
	;
	
generic ParenthesizedExpression =
  void:"(":Symbol yyValue:EqualityExpression void:")":Symbol
  ;

Node Constant = 
    IntegerConstant Spacing
  / BooleanConstant 
  ;

String MultiplicativeOperator = 
	  <Product>		"*":Symbol 
	/ <Quotient> 	"DIV":Symbol
	/ <Modulus>		"MOD":Symbol 
	;

String AdditiveOperator = 
	  <Sum>			"+":Symbol 
	/ <Difference> 	"-":Symbol
	;

String EqualityOperator =
    <Equal>       		"=":Symbol
  / <NotEqual>    		"#":Symbol
  / <Less> 		  		"<":Symbol
  / <LessOrEqual> 		"<=":Symbol
  / <Greater> 	  	 	">":Symbol
  / <GreaterOrEqual> 	">=":Symbol
  ;


IntegerConstant IntegerConstant = nr:DecimalNumeral 
	 {
		try {
        	yyValue = new IntegerConstant(Integer.decode(nr));
     	} catch (NumberFormatException x) {
        	yyValue = null; 
     	}
	}
	;
	
BooleanConstant BooleanConstant =
    "TRUE":Word 
	{
		yyValue = new BooleanConstant( Boolean.TRUE );
	}
  / "FALSE":Word
	{
		yyValue = new BooleanConstant( Boolean.FALSE );
	}
	;
