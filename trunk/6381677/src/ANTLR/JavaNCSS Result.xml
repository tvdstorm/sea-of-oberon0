<?xml version="1.0"?>
<javancss>
  <date>2011-01-30</date>
  <time>11:57:44</time>
  <packages>
    <package>
      <name>.</name>
      <classes>2</classes>
      <functions>6</functions>
      <ncss>84</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>AbstractSyntax</name>
      <classes>3</classes>
      <functions>26</functions>
      <ncss>161</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>23</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>AbstractSyntax.Declarations</name>
      <classes>5</classes>
      <functions>23</functions>
      <ncss>112</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>9</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>AbstractSyntax.Statements</name>
      <classes>19</classes>
      <functions>61</functions>
      <ncss>353</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>1</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>AbstractSyntax.Structure</name>
      <classes>4</classes>
      <functions>18</functions>
      <ncss>85</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>AbstractSyntax.Types</name>
      <classes>2</classes>
      <functions>8</functions>
      <ncss>30</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>3</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>Execution</name>
      <classes>4</classes>
      <functions>21</functions>
      <ncss>118</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>Parser</name>
      <classes>34</classes>
      <functions>127</functions>
      <ncss>3095</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>615</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <total>
      <classes>73</classes>
      <functions>290</functions>
      <ncss>4038</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>651</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </total>
    <table>
      <tr><td>Packages</td><td>Classes</td><td>Functions</td><td>NCSS</td><td>Javadocs</td><td>per</td></tr>
      <tr><td>8.00</td><td>73.00</td><td>290.00</td><td>4,038.00</td><td>0.00</td><td>Project</td></tr>
      <tr><td></td><td>9.13</td><td>36.25</td><td>504.75</td><td>0.00</td><td>Package</td></tr>
      <tr><td></td><td></td><td>3.97</td><td>55.32</td><td>0.00</td><td>Class</td></tr>
      <tr><td></td><td></td><td></td><td>13.92</td><td>0.00</td><td>Function</td></tr>
    </table>
  </packages>

  <objects>
    <object>
      <name>AbstractSyntax.BaseNode</name>
      <ncss>102</ncss>
      <functions>9</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.BaseNodeWithID</name>
      <ncss>19</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Declarations.BaseDeclaration</name>
      <ncss>7</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Declarations.BaseDeclarationList</name>
      <ncss>16</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Declarations.Const</name>
      <ncss>18</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Declarations.Var</name>
      <ncss>49</ncss>
      <functions>9</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Declarations.VarRef</name>
      <ncss>3</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.ID</name>
      <ncss>32</ncss>
      <functions>10</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.Assign</name>
      <ncss>15</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.BaseStatement</name>
      <ncss>3</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.BaseStatementList</name>
      <ncss>19</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.BaseWithCondition</name>
      <ncss>15</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.BaseWithList</name>
      <ncss>13</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.Call</name>
      <ncss>31</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.CallConcrete</name>
      <ncss>12</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.CallConcreteAssert</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.CallConcreteDefault</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.CallConcreteRead</name>
      <ncss>9</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.CallConcreteWrite</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.CallConcreteWriteLn</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.CallVars</name>
      <ncss>14</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.Expression</name>
      <ncss>91</ncss>
      <functions>8</functions>
      <classes>1</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.If</name>
      <ncss>28</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.IfPartForElse</name>
      <ncss>3</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.IfPartForElsIf</name>
      <ncss>7</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.IfPartForThen</name>
      <ncss>3</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Statements.While</name>
      <ncss>8</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Structure.Body</name>
      <ncss>13</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Structure.Module</name>
      <ncss>26</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Structure.Procedure</name>
      <ncss>25</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Structure.ProcedureInput</name>
      <ncss>3</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Types.Int</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>AbstractSyntax.Types.IntValue</name>
      <ncss>14</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Execution.Scope</name>
      <ncss>63</ncss>
      <functions>10</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Execution.ScopeValueBase</name>
      <ncss>4</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Execution.ScopeValueInt</name>
      <ncss>10</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Execution.ScopeValueIntArray</name>
      <ncss>21</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.Helper</name>
      <ncss>18</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonLexer</name>
      <ncss>645</ncss>
      <functions>53</functions>
      <classes>1</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonLexer.DFA4</name>
      <ncss>13</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser</name>
      <ncss>2410</ncss>
      <functions>37</functions>
      <classes>30</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.DFA21</name>
      <ncss>37</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.arrayType_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.assignment_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.base_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.constDeclaration_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.declaration_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.declarations_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.expression_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.factor_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.idList_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.idSelector_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.id_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.ifElsIf_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.ifElse_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.ifStatement_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.ifThen_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.module_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.number_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.procedureCall_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.procedureVarNonRef_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.procedureVarRef_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.procedureVar_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.procedureVars_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.procedure_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.statement_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.statements_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.term_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.type_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.varDeclaration_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Parser.OberonParser.whileStatement_return</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Program</name>
      <ncss>6</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>Test</name>
      <ncss>76</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <averages>
      <ncss>55.41</ncss>
      <functions>3.97</functions>
      <classes>0.44</classes>
      <javadocs>0.00</javadocs>
    </averages>
    <ncss>4,038.00</ncss>
  </objects>

  <functions>
    <function>
      <name>AbstractSyntax.BaseNode.BaseNode(CommonTree)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNode.implodeParserTree(CommonTree)</name>
      <ncss>21</ncss>
      <ccn>11</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNode.implementChildNode(BaseNode,BaseNode)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNode.factorToAbstactSyntaxNode(CommonTree)</name>
      <ncss>68</ncss>
      <ccn>64</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNode.implementChildNode(BaseNode)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNode.isValid()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNode.canSplit()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNode.split()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNode.eval(Execution.Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNodeWithID.BaseNodeWithID(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNodeWithID.getID()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNodeWithID.setID(ID)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNodeWithID.matchID(ID)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNodeWithID.implementChildNode(AbstractSyntax.BaseNode)</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNodeWithID.isValid()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.BaseNodeWithID.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.BaseDeclaration.BaseDeclaration(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.BaseDeclaration.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.BaseDeclaration.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.BaseDeclarationList.BaseDeclarationList(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.BaseDeclarationList.getItems()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.BaseDeclarationList.getItem(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.BaseDeclarationList.implementChildNode(BaseNode)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.BaseDeclarationList.eval(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Const.Const(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Const.getExpression()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Const.implementChildNode(AbstractSyntax.BaseNode)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Const.isValid()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Const.getValue()</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Var.Var(CommonTree)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Var.isArray()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Var.getArrayLength()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Var.getArrayLength(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Var.getDataType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Var.implementChildNode(BaseNode)</name>
      <ncss>15</ncss>
      <ccn>11</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Var.isValid()</name>
      <ncss>2</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Var.canSplit()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.Var.split()</name>
      <ncss>14</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Declarations.VarRef.VarRef(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.ID.ID(CommonTree)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.ID.ID(String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.ID.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.ID.getIndex()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.ID.getIndex(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.ID.implementChildNode(AbstractSyntax.BaseNode)</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.ID.isValid()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.ID.equals(Object)</name>
      <ncss>6</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.ID.hashCode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.ID.eval(Execution.Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Assign.Assign(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Assign.implementChildNode(BaseNode)</name>
      <ncss>6</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Assign.isValid()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Assign.eval(Execution.Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseStatement.BaseStatement(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseStatementList.BaseStatementList(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseStatementList.getStatements()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseStatementList.implementChildNode(BaseNode)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseStatementList.isValid()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseStatementList.eval(Scope)</name>
      <ncss>6</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseWithCondition.BaseWithCondition(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseWithCondition.getExpression()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseWithCondition.implementChildNode(BaseNode)</name>
      <ncss>7</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseWithCondition.isValid()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseWithList.BaseWithList(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseWithList.getStatements()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseWithList.implementChildNode(BaseNode)</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.BaseWithList.isValid()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Call.Call(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Call.getProcedureVars()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Call.getProcedureVar(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Call.setCallConcrete(CallConcrete)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Call.implementChildNode(BaseNode)</name>
      <ncss>15</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Call.isValid()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Call.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcrete.CallConcrete()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcrete.getCallVar(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcrete.getCallVars()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcrete.setCall(Call)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcrete.implementChildNode(BaseNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcreteAssert.CallConcreteAssert(boolean)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcreteAssert.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcreteDefault.CallConcreteDefault(ID)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcreteDefault.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcreteRead.eval(Scope)</name>
      <ncss>8</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcreteWrite.eval(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallConcreteWriteLn.eval(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallVars.CallVars(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallVars.getItems()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallVars.getItem(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallVars.implementChildNode(BaseNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.CallVars.eval(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Expression.Expression(CommonTree)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Expression.DetermineOperator(CommonTree)</name>
      <ncss>32</ncss>
      <ccn>29</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Expression.getLeft()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Expression.getRight()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Expression.getOperator()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Expression.implementChildNode(BaseNode)</name>
      <ncss>8</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Expression.isValid()</name>
      <ncss>2</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.Expression.eval(Execution.Scope)</name>
      <ncss>35</ncss>
      <ccn>40</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.If.If(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.If.getElsIfs()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.If.getElseStatement()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.If.implementChildNode(BaseNode)</name>
      <ncss>10</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.If.eval(Scope)</name>
      <ncss>9</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.IfPartForElse.IfPartForElse(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.IfPartForElsIf.IfPartForElsIf(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.IfPartForElsIf.eval(Scope)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.IfPartForThen.IfPartForThen(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.While.While(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Statements.While.eval(Scope)</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Body.Body(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Body.getDeclarations()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Body.implementChildNode(BaseNode)</name>
      <ncss>7</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Module.Module(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Module.getDeclarations()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Module.getStatements()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Module.implementChildNode(BaseNode)</name>
      <ncss>10</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Module.isValid()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Module.eval()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Module.eval(Execution.Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Procedure.Procedure(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Procedure.getInputVars()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Procedure.getInputVar(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Procedure.getBody()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Procedure.implementChildNode(BaseNode)</name>
      <ncss>10</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Procedure.isValid()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.Procedure.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Structure.ProcedureInput.ProcedureInput(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Types.Int.Int(CommonTree)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Types.Int.implementChildNode(BaseNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Types.Int.eval(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Types.IntValue.IntValue(CommonTree)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Types.IntValue.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Types.IntValue.setValue(String)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Types.IntValue.implementChildNode(BaseNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>AbstractSyntax.Types.IntValue.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.Scope.Scope(BaseDeclarationList,Scope)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.Scope.Scope(CallVars,Procedure,Scope)</name>
      <ncss>12</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.Scope.addProcedure(Procedure)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.Scope.addValue(ID,ScopeValueBase)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.Scope.createValue(BaseNode,ID)</name>
      <ncss>4</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.Scope.getValue(ID)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.Scope.getValueRaw(ID)</name>
      <ncss>8</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.Scope.setValue(ID,int)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.Scope.callProcedure(ID,CallVars)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.Scope.callProcedure(ID,CallVars,Scope)</name>
      <ncss>9</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueBase.getValue(Scope,BaseNode)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueBase.setValue(Scope,BaseNode,int)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueBase.getValueRaw(Scope,ID)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueInt.ScopeValueInt(Scope,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueInt.getValue(Scope,BaseNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueInt.setValue(Scope,BaseNode,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueInt.getValueRaw(Scope,ID)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueIntArray.ScopeValueIntArray(Scope,Var)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueIntArray.getValue(Scope,BaseNode)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueIntArray.setValue(Scope,BaseNode,int)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Execution.ScopeValueIntArray.getValueRaw(Scope,ID)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.Helper.implodeFromFile(String)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.Helper.implodeFromText(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.Helper.implode(CharStream)</name>
      <ncss>10</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.OberonLexer()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.OberonLexer(CharStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.OberonLexer(CharStream,RecognizerSharedState)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.getGrammarFileName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mT__45()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mT__46()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mT__47()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mT__48()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mT__49()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mT__50()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mT__51()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mT__52()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mT__53()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mT__54()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mT__55()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mT__56()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mT__57()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mIF()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mTHEN()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mELSE()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mELSIF()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mEND()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mWHILE()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mEQUAL()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mUNEQUAL()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mLESS()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mLESS_EQUAL()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mGREAT()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mGREAT_EQUAL()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mMIN()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mPLUS()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mMUL()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mDIV()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mMOD()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mAND()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mOR()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mNOT()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mDECLARATIONS()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mINPUTVARS()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mCALL()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mCALL_READ()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mCALL_WRITE()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mCALL_WRITELN()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mCALLVARS()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mCONST()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mVAR()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mASSIGN()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mINT_TYPE()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mARRAY()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mID()</name>
      <ncss>29</ncss>
      <ccn>24</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mINT()</name>
      <ncss>28</ncss>
      <ccn>10</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mWHITESPACE()</name>
      <ncss>29</ncss>
      <ccn>16</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.mTokens()</name>
      <ncss>148</ncss>
      <ccn>49</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.DFA4.DFA4(BaseRecognizer)</name>
      <ncss>10</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonLexer.DFA4.getDescription()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.OberonParser(TokenStream)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.OberonParser(TokenStream,RecognizerSharedState)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.setTreeAdaptor(TreeAdaptor)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.getTreeAdaptor()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.getTokenNames()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.getGrammarFileName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.module_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.module()</name>
      <ncss>101</ncss>
      <ccn>32</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.declarations_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.declarations()</name>
      <ncss>45</ncss>
      <ccn>14</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.declaration_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.declaration()</name>
      <ncss>65</ncss>
      <ccn>21</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.constDeclaration_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.constDeclaration()</name>
      <ncss>65</ncss>
      <ccn>20</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.varDeclaration_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.varDeclaration()</name>
      <ncss>80</ncss>
      <ccn>25</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.procedure_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.procedure()</name>
      <ncss>119</ncss>
      <ccn>38</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.procedureVars_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.procedureVars()</name>
      <ncss>77</ncss>
      <ccn>24</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.procedureVar_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.procedureVar()</name>
      <ncss>50</ncss>
      <ccn>16</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.procedureVarRef_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.procedureVarRef()</name>
      <ncss>58</ncss>
      <ccn>17</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.procedureVarNonRef_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.procedureVarNonRef()</name>
      <ncss>50</ncss>
      <ccn>14</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.procedureCall_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.procedureCall()</name>
      <ncss>170</ncss>
      <ccn>61</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.type_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.type()</name>
      <ncss>50</ncss>
      <ccn>16</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.arrayType_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.arrayType()</name>
      <ncss>44</ncss>
      <ccn>14</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.number_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.number()</name>
      <ncss>23</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.factor_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.factor()</name>
      <ncss>97</ncss>
      <ccn>33</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.term_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.term()</name>
      <ncss>103</ncss>
      <ccn>36</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.base_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.base()</name>
      <ncss>124</ncss>
      <ccn>44</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.expression_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.expression()</name>
      <ncss>125</ncss>
      <ccn>45</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.statements_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.statements()</name>
      <ncss>47</ncss>
      <ccn>14</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.statement_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.statement()</name>
      <ncss>58</ncss>
      <ccn>19</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.assignment_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.assignment()</name>
      <ncss>39</ncss>
      <ccn>12</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.ifStatement_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.ifStatement()</name>
      <ncss>78</ncss>
      <ccn>25</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.ifThen_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.ifThen()</name>
      <ncss>40</ncss>
      <ccn>11</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.ifElsIf_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.ifElsIf()</name>
      <ncss>50</ncss>
      <ccn>14</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.ifElse_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.ifElse()</name>
      <ncss>40</ncss>
      <ccn>11</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.whileStatement_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.whileStatement()</name>
      <ncss>69</ncss>
      <ccn>20</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.idList_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.idList()</name>
      <ncss>47</ncss>
      <ccn>14</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.id_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.id()</name>
      <ncss>31</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.idSelector_return.getTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.idSelector()</name>
      <ncss>65</ncss>
      <ccn>21</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.synpred1_Oberon_fragment()</name>
      <ncss>14</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.synpred1_Oberon()</name>
      <ncss>11</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.DFA21.DFA21(BaseRecognizer)</name>
      <ncss>10</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.DFA21.getDescription()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Parser.OberonParser.DFA21.specialStateTransition(int,IntStream)</name>
      <ncss>24</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Program.main(String[])</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Test.runTest(String,String)</name>
      <ncss>15</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Test.testAll()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Test.testExpressions()</name>
      <ncss>34</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Test.testStatements()</name>
      <ncss>20</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>Test.testSmokeFragments()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function_averages>
      <ncss>11.92</ncss>
      <ccn>4.51</ccn>
      <javadocs>0.00</javadocs>
    </function_averages>
    <ncss>4,038.00</ncss>
  </functions>
</javancss>
