<?xml version="1.0"?>
<javancss>
  <date>2011-02-06</date>
  <time>17:06:42</time>
  <packages>
    <package>
      <name>uva.oberon0.abstractsyntax</name>
      <classes>2</classes>
      <functions>6</functions>
      <ncss>19</ncss>
      <javadocs>6</javadocs>
      <javadoc_lines>22</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>uva.oberon0.abstractsyntax.declarations</name>
      <classes>8</classes>
      <functions>21</functions>
      <ncss>109</ncss>
      <javadocs>15</javadocs>
      <javadoc_lines>55</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>uva.oberon0.abstractsyntax.expressions</name>
      <classes>22</classes>
      <functions>44</functions>
      <ncss>165</ncss>
      <javadocs>24</javadocs>
      <javadoc_lines>96</javadoc_lines>
      <single_comment_lines>5</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>uva.oberon0.abstractsyntax.statements</name>
      <classes>12</classes>
      <functions>21</functions>
      <ncss>144</ncss>
      <javadocs>13</javadocs>
      <javadoc_lines>52</javadoc_lines>
      <single_comment_lines>3</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>uva.oberon0.abstractsyntax.types</name>
      <classes>10</classes>
      <functions>24</functions>
      <ncss>105</ncss>
      <javadocs>7</javadocs>
      <javadoc_lines>24</javadoc_lines>
      <single_comment_lines>3</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>uva.oberon0.runtime</name>
      <classes>5</classes>
      <functions>22</functions>
      <ncss>146</ncss>
      <javadocs>8</javadocs>
      <javadoc_lines>33</javadoc_lines>
      <single_comment_lines>23</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <total>
      <classes>59</classes>
      <functions>138</functions>
      <ncss>688</ncss>
      <javadocs>73</javadocs>
      <javadoc_lines>282</javadoc_lines>
      <single_comment_lines>34</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </total>
    <table>
      <tr><td>Packages</td><td>Classes</td><td>Functions</td><td>NCSS</td><td>Javadocs</td><td>per</td></tr>
      <tr><td>6.00</td><td>59.00</td><td>138.00</td><td>688.00</td><td>73.00</td><td>Project</td></tr>
      <tr><td></td><td>9.83</td><td>23.00</td><td>114.67</td><td>12.17</td><td>Package</td></tr>
      <tr><td></td><td></td><td>2.34</td><td>11.66</td><td>1.24</td><td>Class</td></tr>
      <tr><td></td><td></td><td></td><td>4.99</td><td>0.53</td><td>Function</td></tr>
    </table>
  </packages>

  <objects>
    <object>
      <name>uva.oberon0.abstractsyntax.BaseList</name>
      <ncss>12</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.BaseNode</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.declarations.Constant</name>
      <ncss>8</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.declarations.CustomType</name>
      <ncss>8</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.declarations.Declaration</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.declarations.DeclarationList</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.declarations.Module</name>
      <ncss>19</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.declarations.Procedure</name>
      <ncss>20</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.declarations.Variable</name>
      <ncss>16</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.declarations.VariableList</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.Addition</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.BinaryExpression</name>
      <ncss>12</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.Division</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.Equal</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.Expression</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.ExpressionList</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.GreatherThan</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.GreatherThanOrEqualTo</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.IntegerValue</name>
      <ncss>11</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.LessThan</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.LessThanOrEqualTo</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.LogicalAnd</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.LogicalOr</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.Modulo</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.Multiplication</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.Negative</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.Not</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.NotEqual</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.Positive</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.Reference</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.Subtraction</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.expressions.UnaryExpression</name>
      <ncss>7</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.statements.Assign</name>
      <ncss>11</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.statements.Call</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.statements.CallProcedure</name>
      <ncss>8</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.statements.CallRead</name>
      <ncss>10</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.statements.CallWrite</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.statements.CallWriteLn</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.statements.If</name>
      <ncss>22</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.statements.IfListForElsIf</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.statements.IfPartForElsIf</name>
      <ncss>12</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.statements.Statement</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.statements.StatementList</name>
      <ncss>7</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.statements.While</name>
      <ncss>13</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.types.ArrayType</name>
      <ncss>14</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.types.BaseType</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.types.ID</name>
      <ncss>25</ncss>
      <functions>8</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.types.IDList</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.types.IDType</name>
      <ncss>7</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.types.IIdentifiable</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.types.IntType</name>
      <ncss>4</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.types.RecordField</name>
      <ncss>12</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.types.RecordFieldList</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>uva.oberon0.abstractsyntax.types.RecordType</name>
      <ncss>9</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>uva.oberon0.runtime.Scope</name>
      <ncss>81</ncss>
      <functions>13</functions>
      <classes>0</classes>
      <javadocs>5</javadocs>
    </object>
    <object>
      <name>uva.oberon0.runtime.ScopeValue</name>
      <ncss>3</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.runtime.ScopeValueArray</name>
      <ncss>12</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.runtime.ScopeValueInt</name>
      <ncss>10</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>uva.oberon0.runtime.ScopeValueRecord</name>
      <ncss>12</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <averages>
      <ncss>8.69</ncss>
      <functions>2.34</functions>
      <classes>0.00</classes>
      <javadocs>1.24</javadocs>
    </averages>
    <ncss>688.00</ncss>
  </objects>

  <functions>
    <function>
      <name>uva.oberon0.abstractsyntax.BaseList.BaseList()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.BaseList.add(E)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.BaseList.get(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.BaseList.size()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.BaseList.iterator()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.BaseNode.eval(uva.oberon0.runtime.Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.Constant.Constant(ID,Expression)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.Constant.instantiate(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.CustomType.CustomType(ID,BaseType)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.CustomType.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.Declaration.Declaration(ID)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.Declaration.getID()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.Module.Module(ID,DeclarationList,StatementList)</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.Module.createScope()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.Module.eval()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.Module.eval(uva.oberon0.runtime.Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.Module.getID()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.Procedure.Procedure(ID,VariableList,DeclarationList,StatementList)</name>
      <ncss>8</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.Procedure.getParameterCount()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.Procedure.getParameter(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.Procedure.getDeclarations()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.Procedure.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.Variable.Variable(ID,BaseType)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.Variable.Variable(ID,BaseType,boolean)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.Variable.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.Variable.isByReference()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.declarations.Variable.instantiate(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Addition.Addition(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Addition.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.BinaryExpression.BinaryExpression(Expression,Expression)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.BinaryExpression.getLeft()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.BinaryExpression.getRight()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Division.Division(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Division.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Equal.Equal(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Equal.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.GreatherThan.GreatherThan(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.GreatherThan.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.GreatherThanOrEqualTo.GreatherThanOrEqualTo(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.GreatherThanOrEqualTo.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.IntegerValue.IntegerValue(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.IntegerValue.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.IntegerValue.setValue(String)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.IntegerValue.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.LessThan.LessThan(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.LessThan.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.LessThanOrEqualTo.LessThanOrEqualTo(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.LessThanOrEqualTo.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.LogicalAnd.LogicalAnd(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.LogicalAnd.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.LogicalOr.LogicalOr(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.LogicalOr.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Modulo.Modulo(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Modulo.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Multiplication.Multiplication(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Multiplication.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Negative.Negative(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Negative.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Not.Not(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Not.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.NotEqual.NotEqual(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.NotEqual.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Positive.Positive(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Positive.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Reference.Reference(ID)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Reference.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Reference.getID()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Subtraction.Subtraction(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.Subtraction.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.UnaryExpression.UnaryExpression(Expression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.expressions.UnaryExpression.getArgument()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.Assign.Assign(ID,BaseNode)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.Assign.eval(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.Call.Call(ExpressionList)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.Call.getCallVars()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.Call.getActualParameter(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.CallProcedure.CallProcedure(ExpressionList,ID)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.CallProcedure.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.CallRead.CallRead(ExpressionList)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.CallRead.eval(Scope)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.CallWrite.CallWrite(ExpressionList)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.CallWrite.eval(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.CallWriteLn.CallWriteLn(ExpressionList)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.CallWriteLn.eval(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.If.If(Expression,StatementList,IfListForElsIf,StatementList)</name>
      <ncss>8</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.If.eval(Scope)</name>
      <ncss>9</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.IfPartForElsIf.IfPartForElsIf(Expression,StatementList)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.IfPartForElsIf.getExpression()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.IfPartForElsIf.getStatementList()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.StatementList.eval(Scope)</name>
      <ncss>6</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.While.While(Expression,StatementList)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.statements.While.eval(Scope)</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.ArrayType.ArrayType(BaseNode,BaseType)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.ArrayType.getLength()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.ArrayType.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.ArrayType.instantiate(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.BaseType.instantiate(Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.ID.ID(String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.ID.setSub(BaseNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.ID.getSelector()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.ID.equals(Object)</name>
      <ncss>6</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.ID.hashCode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.ID.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.ID.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.ID.getID()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.IDType.IDType(String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.IDType.instantiate(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.IIdentifiable.getID()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.IntType.IntType()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.IntType.instantiate(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.RecordField.RecordField(ID,BaseType)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.RecordField.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.RecordField.getID()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.RecordType.RecordType(RecordFieldList)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.RecordType.instantiate(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.abstractsyntax.types.RecordType.getFields()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.Scope.Scope()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.Scope.Scope(Scope)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.Scope.Scope(DeclarationList,Scope)</name>
      <ncss>16</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.Scope.Scope(ExpressionList,Procedure,Scope)</name>
      <ncss>12</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.Scope.addProcedure(Procedure)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.Scope.addType(CustomType)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.Scope.addValue(ID,ScopeValue)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.Scope.getValue(ID)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.Scope.getValueReference(ID)</name>
      <ncss>14</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.Scope.setValue(ID,int)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.Scope.getType(ID)</name>
      <ncss>7</ncss>
      <ccn>5</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.Scope.callProcedure(ID,ExpressionList)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.Scope.callProcedure(ID,ExpressionList,Scope)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.ScopeValue.getValue(Scope,BaseNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.ScopeValueArray.ScopeValueArray(Scope,ArrayType)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.ScopeValueArray.getValue(Scope,BaseNode)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.ScopeValueInt.ScopeValueInt(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.ScopeValueInt.ScopeValueInt(Scope,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.ScopeValueInt.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.ScopeValueInt.setValue(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.ScopeValueRecord.ScopeValueRecord(Scope,RecordType)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>uva.oberon0.runtime.ScopeValueRecord.getValue(Scope,BaseNode)</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function_averages>
      <ncss>2.97</ncss>
      <ccn>1.39</ccn>
      <javadocs>0.17</javadocs>
    </function_averages>
    <ncss>688.00</ncss>
  </functions>
</javancss>
