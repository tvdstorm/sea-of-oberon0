<?xml version="1.0"?>
<javancss>
  <date>2011-02-17</date>
  <time>20:14:52</time>
  <packages>
    <package>
      <name>com.arievanderveek.soo</name>
      <classes>3</classes>
      <functions>5</functions>
      <ncss>35</ncss>
      <javadocs>8</javadocs>
      <javadoc_lines>52</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>4</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.ast</name>
      <classes>2</classes>
      <functions>2</functions>
      <ncss>9</ncss>
      <javadocs>4</javadocs>
      <javadoc_lines>29</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>3</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.ast.codeblocks</name>
      <classes>6</classes>
      <functions>26</functions>
      <ncss>221</ncss>
      <javadocs>15</javadocs>
      <javadoc_lines>118</javadoc_lines>
      <single_comment_lines>9</single_comment_lines>
      <multi_comment_lines>39</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.ast.expr</name>
      <classes>7</classes>
      <functions>24</functions>
      <ncss>121</ncss>
      <javadocs>12</javadocs>
      <javadoc_lines>66</javadoc_lines>
      <single_comment_lines>4</single_comment_lines>
      <multi_comment_lines>13</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators</name>
      <classes>14</classes>
      <functions>40</functions>
      <ncss>228</ncss>
      <javadocs>1</javadocs>
      <javadoc_lines>6</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>167</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.ast.expr.unaryoperators</name>
      <classes>3</classes>
      <functions>8</functions>
      <ncss>43</ncss>
      <javadocs>2</javadocs>
      <javadoc_lines>11</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>29</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.ast.statements</name>
      <classes>6</classes>
      <functions>20</functions>
      <ncss>195</ncss>
      <javadocs>14</javadocs>
      <javadoc_lines>89</javadoc_lines>
      <single_comment_lines>16</single_comment_lines>
      <multi_comment_lines>65</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.ast.variables</name>
      <classes>7</classes>
      <functions>33</functions>
      <ncss>154</ncss>
      <javadocs>18</javadocs>
      <javadoc_lines>104</javadoc_lines>
      <single_comment_lines>4</single_comment_lines>
      <multi_comment_lines>32</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.parser</name>
      <classes>2</classes>
      <functions>2</functions>
      <ncss>37</ncss>
      <javadocs>3</javadocs>
      <javadoc_lines>19</javadoc_lines>
      <single_comment_lines>3</single_comment_lines>
      <multi_comment_lines>11</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.runtime</name>
      <classes>7</classes>
      <functions>72</functions>
      <ncss>383</ncss>
      <javadocs>30</javadocs>
      <javadoc_lines>196</javadoc_lines>
      <single_comment_lines>23</single_comment_lines>
      <multi_comment_lines>21</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.util</name>
      <classes>3</classes>
      <functions>12</functions>
      <ncss>82</ncss>
      <javadocs>14</javadocs>
      <javadoc_lines>99</javadoc_lines>
      <single_comment_lines>10</single_comment_lines>
      <multi_comment_lines>9</multi_comment_lines>
    </package>
    <package>
      <name>com.arievanderveek.soo.visitors</name>
      <classes>1</classes>
      <functions>0</functions>
      <ncss>2</ncss>
      <javadocs>1</javadocs>
      <javadoc_lines>4</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>27</multi_comment_lines>
    </package>
    <total>
      <classes>61</classes>
      <functions>244</functions>
      <ncss>1510</ncss>
      <javadocs>122</javadocs>
      <javadoc_lines>793</javadoc_lines>
      <single_comment_lines>69</single_comment_lines>
      <multi_comment_lines>420</multi_comment_lines>
    </total>
    <table>
      <tr><td>Packages</td><td>Classes</td><td>Functions</td><td>NCSS</td><td>Javadocs</td><td>per</td></tr>
      <tr><td>12.00</td><td>61.00</td><td>244.00</td><td>1,510.00</td><td>122.00</td><td>Project</td></tr>
      <tr><td></td><td>5.08</td><td>20.33</td><td>125.83</td><td>10.17</td><td>Package</td></tr>
      <tr><td></td><td></td><td>4.00</td><td>24.75</td><td>2.00</td><td>Class</td></tr>
      <tr><td></td><td></td><td></td><td>6.19</td><td>0.50</td><td>Function</td></tr>
    </table>
  </packages>

  <objects>
    <object>
      <name>com.arievanderveek.soo.Main</name>
      <ncss>9</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.SeaOfOberonController</name>
      <ncss>11</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.SeaOfOberonException</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.ASTNode</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.Interpretable</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.codeblocks.CodeBlockNode</name>
      <ncss>76</ncss>
      <functions>9</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.codeblocks.ModuleNode</name>
      <ncss>12</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.codeblocks.ProcedureNode</name>
      <ncss>30</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>5</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.codeblocks.ReadLineCallNode</name>
      <ncss>19</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.codeblocks.WriteCallNode</name>
      <ncss>15</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.codeblocks.WriteLnCallNode</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.ExpressionNode</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.IdentifierNode</name>
      <ncss>25</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.IntegerExpressionNode</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.Member</name>
      <ncss>16</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.Selector</name>
      <ncss>3</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.Selectors</name>
      <ncss>21</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.Subscript</name>
      <ncss>16</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.AbstractBinaryOperatorNode</name>
      <ncss>7</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.AdditionOperatorNode</name>
      <ncss>11</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.AndOperatorNode</name>
      <ncss>14</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.DivisionOperatorNode</name>
      <ncss>11</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.EqualOperatorNode</name>
      <ncss>14</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.GreaterEqualThenOperatorNode</name>
      <ncss>14</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.GreaterThenOperatorNode</name>
      <ncss>14</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.ModulusOperatorNode</name>
      <ncss>11</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.MultiplicationOperatorNode</name>
      <ncss>11</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.NotEqualOperatorNode</name>
      <ncss>14</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.OrOperatorNode</name>
      <ncss>14</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.SmallerEqualThenOperatorNode</name>
      <ncss>14</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.SmallerThenOperatorNode</name>
      <ncss>14</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.SubtractionOperatorNode</name>
      <ncss>11</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.unaryoperators.NegationOperatorNode</name>
      <ncss>10</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.unaryoperators.NotOperatorNode</name>
      <ncss>16</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.expr.unaryoperators.UnaryOperatorNode</name>
      <ncss>7</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.statements.AssignmentNode</name>
      <ncss>15</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.statements.IfStatementNode</name>
      <ncss>48</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.statements.ProcedureCallNode</name>
      <ncss>26</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.statements.StatementNode</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.statements.WhileLoopNode</name>
      <ncss>33</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.statements.WithDoNode</name>
      <ncss>28</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.variables.ArrayTypeNode</name>
      <ncss>29</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.variables.ConstantNode</name>
      <ncss>13</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.variables.FieldNode</name>
      <ncss>16</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.variables.FormalParameterNode</name>
      <ncss>11</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.variables.IdentifierTypeNode</name>
      <ncss>24</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.variables.RecordTypeNode</name>
      <ncss>24</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.ast.variables.TypeNode</name>
      <ncss>3</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.parser.AntlrParserImpl</name>
      <ncss>16</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.parser.Parser</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.runtime.ArraySymbol</name>
      <ncss>40</ncss>
      <functions>11</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.runtime.IntegerSymbol</name>
      <ncss>36</ncss>
      <functions>10</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.runtime.MemoryAddress</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.runtime.MemoryMap</name>
      <ncss>56</ncss>
      <functions>10</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.runtime.RecordSymbol</name>
      <ncss>38</ncss>
      <functions>11</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.runtime.Scope</name>
      <ncss>155</ncss>
      <functions>20</functions>
      <classes>0</classes>
      <javadocs>20</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.runtime.Symbol</name>
      <ncss>17</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.util.ConfigurationFactory</name>
      <ncss>44</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.util.Constants</name>
      <ncss>7</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.util.SeaOfOberonConfiguration</name>
      <ncss>19</ncss>
      <functions>8</functions>
      <classes>0</classes>
      <javadocs>9</javadocs>
    </object>
    <object>
      <name>com.arievanderveek.soo.visitors.ASTVisitor</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <averages>
      <ncss>19.61</ncss>
      <functions>4.00</functions>
      <classes>0.00</classes>
      <javadocs>2.00</javadocs>
    </averages>
    <ncss>1,510.00</ncss>
  </objects>

  <functions>
    <function>
      <name>com.arievanderveek.soo.Main.main(String[])</name>
      <ncss>8</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.SeaOfOberonController.SeaOfOberonController(SeaOfOberonConfiguration)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.SeaOfOberonController.executeSourceCode()</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.SeaOfOberonException.SeaOfOberonException(String,Throwable)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.SeaOfOberonException.SeaOfOberonException(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.ASTNode.toTreeString(String)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.Interpretable.interpret(Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.CodeBlockNode.CodeBlockNode(String,String,ConstantNode,FieldNode,FieldNode,ProcedureNode,StatementNode)</name>
      <ncss>15</ncss>
      <ccn>3</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.CodeBlockNode.interpret(Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.CodeBlockNode.toTreeString(String)</name>
      <ncss>41</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.CodeBlockNode.getCodeBlockName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.CodeBlockNode.getConstants()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.CodeBlockNode.getTypes()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.CodeBlockNode.getVariables()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.CodeBlockNode.getProcedures()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.CodeBlockNode.getStatementSequence()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ModuleNode.ModuleNode(String,String,ConstantNode,FieldNode,FieldNode,ProcedureNode,StatementNode)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ModuleNode.interpret(Scope)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ModuleNode.toTreeString(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ProcedureNode.ProcedureNode(String,String,ConstantNode,FieldNode,FieldNode,ProcedureNode,StatementNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ProcedureNode.ProcedureNode(String,String,FormalParameterNode,ConstantNode,FieldNode,FieldNode,ProcedureNode,StatementNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ProcedureNode.interpret(Scope)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ProcedureNode.toTreeString(String)</name>
      <ncss>12</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ProcedureNode.getParameterBlocks()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ProcedureNode.isAmountOfParametersEqual(ExpressionNode)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ReadLineCallNode.ReadLineCallNode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ReadLineCallNode.interpret(Scope)</name>
      <ncss>9</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.ReadLineCallNode.buildParameters()</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.WriteCallNode.WriteCallNode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.WriteCallNode.interpret(Scope)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.WriteCallNode.buildParameters()</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.WriteLnCallNode.WriteLnCallNode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.codeblocks.WriteLnCallNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.IdentifierNode.IdentifierNode(String)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.IdentifierNode.IdentifierNode(String,Selectors)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.IdentifierNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.IdentifierNode.toTreeString(String)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.IdentifierNode.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.IdentifierNode.getSelectors()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.IdentifierNode.hasSelectors()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.IntegerExpressionNode.IntegerExpressionNode(Integer)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.IntegerExpressionNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.IntegerExpressionNode.toTreeString(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.Member.Member(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.Member.toTreeString(String)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.Member.select(Symbol,Scope)</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.Member.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.Selector.select(Symbol,Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.Selector.toTreeString(String)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.Selectors.Selectors(Selector)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.Selectors.Selectors()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.Selectors.toTreeString(String)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.Selectors.getSelectors()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.Selectors.resolveSelectors(Symbol,Scope)</name>
      <ncss>8</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.Subscript.Subscript(ExpressionNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.Subscript.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.Subscript.select(Symbol,Scope)</name>
      <ncss>6</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.AbstractBinaryOperatorNode.AbstractBinaryOperatorNode(ExpressionNode,ExpressionNode)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.AdditionOperatorNode.AdditionOperatorNode(ExpressionNode,ExpressionNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.AdditionOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.AdditionOperatorNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.AndOperatorNode.AndOperatorNode(ExpressionNode,ExpressionNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.AndOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.AndOperatorNode.interpret(Scope)</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.DivisionOperatorNode.DivisionOperatorNode(ExpressionNode,ExpressionNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.DivisionOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.DivisionOperatorNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.EqualOperatorNode.EqualOperatorNode(ExpressionNode,ExpressionNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.EqualOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.EqualOperatorNode.interpret(Scope)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.GreaterEqualThenOperatorNode.GreaterEqualThenOperatorNode(ExpressionNode,ExpressionNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.GreaterEqualThenOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.GreaterEqualThenOperatorNode.interpret(Scope)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.GreaterThenOperatorNode.GreaterThenOperatorNode(ExpressionNode,ExpressionNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.GreaterThenOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.GreaterThenOperatorNode.interpret(Scope)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.ModulusOperatorNode.ModulusOperatorNode(ExpressionNode,ExpressionNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.ModulusOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.ModulusOperatorNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.MultiplicationOperatorNode.MultiplicationOperatorNode(ExpressionNode,ExpressionNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.MultiplicationOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.MultiplicationOperatorNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.NotEqualOperatorNode.NotEqualOperatorNode(ExpressionNode,ExpressionNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.NotEqualOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.NotEqualOperatorNode.interpret(Scope)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.OrOperatorNode.OrOperatorNode(ExpressionNode,ExpressionNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.OrOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.OrOperatorNode.interpret(Scope)</name>
      <ncss>5</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.SmallerEqualThenOperatorNode.SmallerEqualThenOperatorNode(ExpressionNode,ExpressionNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.SmallerEqualThenOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.SmallerEqualThenOperatorNode.interpret(Scope)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.SmallerThenOperatorNode.SmallerThenOperatorNode(ExpressionNode,ExpressionNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.SmallerThenOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.SmallerThenOperatorNode.interpret(Scope)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.SubtractionOperatorNode.SubtractionOperatorNode(ExpressionNode,ExpressionNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.SubtractionOperatorNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.binaryoperators.SubtractionOperatorNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.unaryoperators.NegationOperatorNode.NegationOperatorNode(ExpressionNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.unaryoperators.NegationOperatorNode.toTreeString(String)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.unaryoperators.NegationOperatorNode.interpret(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.unaryoperators.NotOperatorNode.NotOperatorNode(ExpressionNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.unaryoperators.NotOperatorNode.interpret(Scope)</name>
      <ncss>8</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.unaryoperators.NotOperatorNode.toTreeString(String)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.unaryoperators.UnaryOperatorNode.UnaryOperatorNode(ExpressionNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.expr.unaryoperators.UnaryOperatorNode.getNode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.AssignmentNode.AssignmentNode(IdentifierNode,ExpressionNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.AssignmentNode.interpret(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.AssignmentNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.IfStatementNode.IfStatementNode(ExpressionNode,StatementNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.IfStatementNode.insertNode(ExpressionNode,StatementNode)</name>
      <ncss>8</ncss>
      <ccn>4</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.IfStatementNode.addFinalElseStatementNode(StatementNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.IfStatementNode.interpret(Scope)</name>
      <ncss>12</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.IfStatementNode.toTreeString(String)</name>
      <ncss>19</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.ProcedureCallNode.ProcedureCallNode(IdentifierNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.ProcedureCallNode.ProcedureCallNode(IdentifierNode,ExpressionNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.ProcedureCallNode.interpret(Scope)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.ProcedureCallNode.toTreeString(String)</name>
      <ncss>10</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.StatementNode.interpret(Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.WhileLoopNode.WhileLoopNode(ExpressionNode,StatementNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.WhileLoopNode.interpret(Scope)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.WhileLoopNode.conditionIsTrue(Scope)</name>
      <ncss>9</ncss>
      <ccn>6</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.WhileLoopNode.toTreeString(String)</name>
      <ncss>14</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.WithDoNode.WithDoNode(IdentifierNode,StatementNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.WithDoNode.interpret(Scope)</name>
      <ncss>8</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.statements.WithDoNode.toTreeString(String)</name>
      <ncss>14</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.ArrayTypeNode.ArrayTypeNode(ExpressionNode,TypeNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.ArrayTypeNode.registerVariable(String,Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.ArrayTypeNode.createSymbolFromType(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.ArrayTypeNode.generateArraySymbol(Scope)</name>
      <ncss>7</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.ArrayTypeNode.getSizeExpression()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.ArrayTypeNode.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.ArrayTypeNode.toTreeString(String)</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.ConstantNode.ConstantNode(String,ExpressionNode)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.ConstantNode.toTreeString(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.ConstantNode.getExpression()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.ConstantNode.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.FieldNode.FieldNode(String,TypeNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.FieldNode.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.FieldNode.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.FieldNode.toTreeString(String)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.FormalParameterNode.FormalParameterNode(String,TypeNode,boolean)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.FormalParameterNode.isCallByReference()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.FormalParameterNode.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.FormalParameterNode.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.IdentifierTypeNode.IdentifierTypeNode(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.IdentifierTypeNode.toTreeString(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.IdentifierTypeNode.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.IdentifierTypeNode.registerIdentifierType(Scope,IdentifierTypeNode)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.IdentifierTypeNode.registerVariable(String,Scope)</name>
      <ncss>7</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.IdentifierTypeNode.createSymbolFromType(Scope)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.IdentifierTypeNode.generateIntegerSymbol(Scope,Integer,boolean)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.RecordTypeNode.RecordTypeNode(FieldNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.RecordTypeNode.toTreeString(String)</name>
      <ncss>9</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.RecordTypeNode.registerVariable(String,Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.RecordTypeNode.createSymbolFromType(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.RecordTypeNode.generateRecordSymbol(Scope)</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.TypeNode.registerVariable(String,Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.ast.variables.TypeNode.createSymbolFromType(Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.parser.AntlrParserImpl.parseFile(String)</name>
      <ncss>15</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.parser.Parser.parseFile(String)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.ArraySymbol.ArraySymbol(boolean,Symbol[])</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.ArraySymbol.ArraySymbol(ArraySymbol)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.ArraySymbol.addOrUpdateAddress(Integer,Symbol)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.ArraySymbol.getSymbol(Integer)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.ArraySymbol.getSymbolList()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.ArraySymbol.isMutable()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.ArraySymbol.isReferencedSymbol()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.ArraySymbol.setReferencedSymbol(boolean)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.ArraySymbol.toString()</name>
      <ncss>15</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.ArraySymbol.regenerateMemoryAddress(Scope,MemoryMap)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.ArraySymbol.clone()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.IntegerSymbol.IntegerSymbol(boolean,MemoryAddress)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.IntegerSymbol.IntegerSymbol(IntegerSymbol)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.IntegerSymbol.getMemoryAdress()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.IntegerSymbol.updateMemoryAddress(MemoryAddress)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.IntegerSymbol.isMutable()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.IntegerSymbol.isReferencedSymbol()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.IntegerSymbol.setReferencedSymbol(boolean)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.IntegerSymbol.toString()</name>
      <ncss>12</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.IntegerSymbol.regenerateMemoryAddress(Scope,MemoryMap)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.IntegerSymbol.clone()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryAddress.MemoryAddress(Integer)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryAddress.hashCode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryAddress.toString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryMap.getValue(MemoryAddress)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryMap.hasAdress(MemoryAddress)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryMap.deleteValue(MemoryAddress)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryMap.deleteMemoryAddress(MemoryAddress)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryMap.deleteMemoryAddressList(MemoryAddress)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryMap.updateValue(MemoryAddress,Integer)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryMap.addValue(Integer)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryMap.copyValueToNewAdress(MemoryAddress)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryMap.generateMemoryAdress()</name>
      <ncss>10</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.MemoryMap.toString()</name>
      <ncss>14</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.RecordSymbol.RecordSymbol(boolean,Symbol)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.RecordSymbol.RecordSymbol(RecordSymbol)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.RecordSymbol.addOrUpdateAddress(String,Symbol)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.RecordSymbol.getMember(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.RecordSymbol.getMembers()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.RecordSymbol.isMutable()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.RecordSymbol.isReferencedSymbol()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.RecordSymbol.setReferencedSymbol(boolean)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.RecordSymbol.toString()</name>
      <ncss>13</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.RecordSymbol.regenerateMemoryAddress(Scope,MemoryMap)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.RecordSymbol.clone()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.Scope(ConstantNode,FieldNode,FieldNode,ProcedureNode)</name>
      <ncss>13</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.Scope(Scope,ProcedureNode,ExpressionNode)</name>
      <ncss>14</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.Scope(Scope,RecordSymbol)</name>
      <ncss>8</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.lookupProcedure(String)</name>
      <ncss>8</ncss>
      <ccn>6</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.lookupType(String)</name>
      <ncss>8</ncss>
      <ccn>6</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.lookupSymbol(String)</name>
      <ncss>8</ncss>
      <ccn>6</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.lookupMemoryManagerForAdress(MemoryAddress)</name>
      <ncss>6</ncss>
      <ccn>6</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.createMemoryAdress(Integer)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.getValue(IdentifierNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.updateValue(IdentifierNode,Integer)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.addSymbolToTable(String,Symbol)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.getAddressForSymbol(IdentifierNode)</name>
      <ncss>11</ncss>
      <ccn>6</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.processProcedureParameters(ProcedureNode,ExpressionNode)</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.registerParameter(FieldNode,ExpressionNode,boolean)</name>
      <ncss>17</ncss>
      <ccn>3</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.registerProcedures(ProcedureNode)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.registerTypes(FieldNode)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.registerConstants(ConstantNode)</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.registerVariables(FieldNode)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.isRootScope()</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Scope.toString()</name>
      <ncss>20</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Symbol.Symbol(boolean)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Symbol.Symbol(Symbol)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Symbol.isReferencedSymbol()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Symbol.setReferencedSymbol(boolean)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Symbol.isMutable()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Symbol.regenerateMemoryAddress(Scope,MemoryMap)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.runtime.Symbol.clone()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.ConfigurationFactory.createConfiguration(String[])</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.ConfigurationFactory.parseArguments(String[])</name>
      <ncss>23</ncss>
      <ccn>7</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.ConfigurationFactory.printHelp(Options,String)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.ConfigurationFactory.creatOptions()</name>
      <ncss>9</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.SeaOfOberonConfiguration.setParserImplClass(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.SeaOfOberonConfiguration.getParserImplClass()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.SeaOfOberonConfiguration.setSourceCodeFileName(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.SeaOfOberonConfiguration.getSourceCodeFileName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.SeaOfOberonConfiguration.getVisitorImplClass()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.SeaOfOberonConfiguration.setVisitorImplClass(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.SeaOfOberonConfiguration.printTree()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>com.arievanderveek.soo.util.SeaOfOberonConfiguration.setPrintTree(boolean)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function_averages>
      <ncss>4.38</ncss>
      <ccn>1.57</ccn>
      <javadocs>0.31</javadocs>
    </function_averages>
    <ncss>1,510.00</ncss>
  </functions>
</javancss>
