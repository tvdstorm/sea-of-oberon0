/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.parser;

import oberon.lexer.*;
import oberon.node.*;
import oberon.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAprogram1Program */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAprogram2Program */
		    {
			ArrayList list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce AAdeclconstdeclarations1Declarations */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AAdeclconstdeclarations2Declarations */
		    {
			ArrayList list = new3();
			push(goTo(1), list, false);
		    }
		    break;
                    case 4: /* reduce AAdecltypedeclarations1Declarations */
		    {
			ArrayList list = new4();
			push(goTo(1), list, false);
		    }
		    break;
                    case 5: /* reduce AAdecltypedeclarations2Declarations */
		    {
			ArrayList list = new5();
			push(goTo(1), list, false);
		    }
		    break;
                    case 6: /* reduce AAdeclvardeclarations1Declarations */
		    {
			ArrayList list = new6();
			push(goTo(1), list, false);
		    }
		    break;
                    case 7: /* reduce AAdeclvardeclarations2Declarations */
		    {
			ArrayList list = new7();
			push(goTo(1), list, false);
		    }
		    break;
                    case 8: /* reduce ADeclproceduredeclarationDeclarations */
		    {
			ArrayList list = new8();
			push(goTo(1), list, false);
		    }
		    break;
                    case 9: /* reduce ABegstat */
		    {
			ArrayList list = new9();
			push(goTo(2), list, false);
		    }
		    break;
                    case 10: /* reduce AAssignment */
		    {
			ArrayList list = new10();
			push(goTo(3), list, false);
		    }
		    break;
                    case 11: /* reduce ATypedeclaration */
		    {
			ArrayList list = new11();
			push(goTo(4), list, false);
		    }
		    break;
                    case 12: /* reduce AAstatementsequence1Statementsequence */
		    {
			ArrayList list = new12();
			push(goTo(5), list, false);
		    }
		    break;
                    case 13: /* reduce AAstatementsequence2Statementsequence */
		    {
			ArrayList list = new13();
			push(goTo(5), list, false);
		    }
		    break;
                    case 14: /* reduce ADeclproceduredeclaration */
		    {
			ArrayList list = new14();
			push(goTo(6), list, false);
		    }
		    break;
                    case 15: /* reduce AVardeclaration */
		    {
			ArrayList list = new15();
			push(goTo(7), list, false);
		    }
		    break;
                    case 16: /* reduce AAexpression1Expression */
		    {
			ArrayList list = new16();
			push(goTo(8), list, false);
		    }
		    break;
                    case 17: /* reduce AAexpression2Expression */
		    {
			ArrayList list = new17();
			push(goTo(8), list, false);
		    }
		    break;
                    case 18: /* reduce AIdtypeType */
		    {
			ArrayList list = new18();
			push(goTo(9), list, false);
		    }
		    break;
                    case 19: /* reduce AArrtypeType */
		    {
			ArrayList list = new19();
			push(goTo(9), list, false);
		    }
		    break;
                    case 20: /* reduce ARectypeType */
		    {
			ArrayList list = new20();
			push(goTo(9), list, false);
		    }
		    break;
                    case 21: /* reduce AStatassStatement */
		    {
			ArrayList list = new21();
			push(goTo(10), list, false);
		    }
		    break;
                    case 22: /* reduce AStatprocStatement */
		    {
			ArrayList list = new22();
			push(goTo(10), list, false);
		    }
		    break;
                    case 23: /* reduce AStatifStatement */
		    {
			ArrayList list = new23();
			push(goTo(10), list, false);
		    }
		    break;
                    case 24: /* reduce AStatwhiStatement */
		    {
			ArrayList list = new24();
			push(goTo(10), list, false);
		    }
		    break;
                    case 25: /* reduce AStatnoneStatement */
		    {
			ArrayList list = new25();
			push(goTo(10), list, false);
		    }
		    break;
                    case 26: /* reduce AIdentlist */
		    {
			ArrayList list = new26();
			push(goTo(11), list, false);
		    }
		    break;
                    case 27: /* reduce AProceduredeclaration */
		    {
			ArrayList list = new27();
			push(goTo(12), list, false);
		    }
		    break;
                    case 28: /* reduce AAndstatement */
		    {
			ArrayList list = new28();
			push(goTo(13), list, false);
		    }
		    break;
                    case 29: /* reduce AAndidentifier */
		    {
			ArrayList list = new29();
			push(goTo(14), list, false);
		    }
		    break;
                    case 30: /* reduce ASimpleexpressionevaluation */
		    {
			ArrayList list = new30();
			push(goTo(15), list, false);
		    }
		    break;
                    case 31: /* reduce AAsimpleexpression1Simpleexpression */
		    {
			ArrayList list = new31();
			push(goTo(16), list, false);
		    }
		    break;
                    case 32: /* reduce AAsimpleexpression2Simpleexpression */
		    {
			ArrayList list = new32();
			push(goTo(16), list, false);
		    }
		    break;
                    case 33: /* reduce ARecordtype */
		    {
			ArrayList list = new33();
			push(goTo(17), list, false);
		    }
		    break;
                    case 34: /* reduce AArraytype */
		    {
			ArrayList list = new34();
			push(goTo(18), list, false);
		    }
		    break;
                    case 35: /* reduce AWhilestatement */
		    {
			ArrayList list = new35();
			push(goTo(19), list, false);
		    }
		    break;
                    case 36: /* reduce AIfstatement */
		    {
			ArrayList list = new36();
			push(goTo(20), list, false);
		    }
		    break;
                    case 37: /* reduce AAprocedurecall1Procedurecall */
		    {
			ArrayList list = new37();
			push(goTo(21), list, false);
		    }
		    break;
                    case 38: /* reduce AAprocedurecall2Procedurecall */
		    {
			ArrayList list = new38();
			push(goTo(21), list, false);
		    }
		    break;
                    case 39: /* reduce AAprocedureheading1Procedureheading */
		    {
			ArrayList list = new39();
			push(goTo(22), list, false);
		    }
		    break;
                    case 40: /* reduce AAprocedureheading2Procedureheading */
		    {
			ArrayList list = new40();
			push(goTo(22), list, false);
		    }
		    break;
                    case 41: /* reduce AAprocedurebody1Procedurebody */
		    {
			ArrayList list = new41();
			push(goTo(23), list, false);
		    }
		    break;
                    case 42: /* reduce AAprocedurebody2Procedurebody */
		    {
			ArrayList list = new42();
			push(goTo(23), list, false);
		    }
		    break;
                    case 43: /* reduce ATerm */
		    {
			ArrayList list = new43();
			push(goTo(24), list, false);
		    }
		    break;
                    case 44: /* reduce AMoreterms */
		    {
			ArrayList list = new44();
			push(goTo(25), list, false);
		    }
		    break;
                    case 45: /* reduce AFieldlistFieldlist */
		    {
			ArrayList list = new45();
			push(goTo(26), list, false);
		    }
		    break;
                    case 46: /* reduce AListnoneFieldlist */
		    {
			ArrayList list = new46();
			push(goTo(26), list, false);
		    }
		    break;
                    case 47: /* reduce AMorefields */
		    {
			ArrayList list = new47();
			push(goTo(27), list, false);
		    }
		    break;
                    case 48: /* reduce AElsif */
		    {
			ArrayList list = new48();
			push(goTo(28), list, false);
		    }
		    break;
                    case 49: /* reduce AElse */
		    {
			ArrayList list = new49();
			push(goTo(29), list, false);
		    }
		    break;
                    case 50: /* reduce AAactualparams1Actualparams */
		    {
			ArrayList list = new50();
			push(goTo(30), list, false);
		    }
		    break;
                    case 51: /* reduce AAactualparams2Actualparams */
		    {
			ArrayList list = new51();
			push(goTo(30), list, false);
		    }
		    break;
                    case 52: /* reduce AAformalparams1Formalparams */
		    {
			ArrayList list = new52();
			push(goTo(31), list, false);
		    }
		    break;
                    case 53: /* reduce AAformalparams2Formalparams */
		    {
			ArrayList list = new53();
			push(goTo(31), list, false);
		    }
		    break;
                    case 54: /* reduce AProcedurebodystatements */
		    {
			ArrayList list = new54();
			push(goTo(32), list, false);
		    }
		    break;
                    case 55: /* reduce AAdditionaloperations */
		    {
			ArrayList list = new55();
			push(goTo(33), list, false);
		    }
		    break;
                    case 56: /* reduce AIdfactorFactor */
		    {
			ArrayList list = new56();
			push(goTo(34), list, false);
		    }
		    break;
                    case 57: /* reduce AIntfactorFactor */
		    {
			ArrayList list = new57();
			push(goTo(34), list, false);
		    }
		    break;
                    case 58: /* reduce AExpfactorFactor */
		    {
			ArrayList list = new58();
			push(goTo(34), list, false);
		    }
		    break;
                    case 59: /* reduce ATilfactorFactor */
		    {
			ArrayList list = new59();
			push(goTo(34), list, false);
		    }
		    break;
                    case 60: /* reduce AAactualparameters1Actualparameters */
		    {
			ArrayList list = new60();
			push(goTo(35), list, false);
		    }
		    break;
                    case 61: /* reduce AAactualparameters2Actualparameters */
		    {
			ArrayList list = new61();
			push(goTo(35), list, false);
		    }
		    break;
                    case 62: /* reduce AAformalparameters1Formalparameters */
		    {
			ArrayList list = new62();
			push(goTo(36), list, false);
		    }
		    break;
                    case 63: /* reduce AAformalparameters2Formalparameters */
		    {
			ArrayList list = new63();
			push(goTo(36), list, false);
		    }
		    break;
                    case 64: /* reduce ADotselectorSelector */
		    {
			ArrayList list = new64();
			push(goTo(37), list, false);
		    }
		    break;
                    case 65: /* reduce AArrselectorSelector */
		    {
			ArrayList list = new65();
			push(goTo(37), list, false);
		    }
		    break;
                    case 66: /* reduce AAfpsection1Fpsection */
		    {
			ArrayList list = new66();
			push(goTo(38), list, false);
		    }
		    break;
                    case 67: /* reduce AAfpsection2Fpsection */
		    {
			ArrayList list = new67();
			push(goTo(38), list, false);
		    }
		    break;
                    case 68: /* reduce AMoreactualparameters */
		    {
			ArrayList list = new68();
			push(goTo(39), list, false);
		    }
		    break;
                    case 69: /* reduce ATerminal$Assignment */
		    {
			ArrayList list = new69();
			push(goTo(40), list, true);
		    }
		    break;
                    case 70: /* reduce ANonTerminal$Assignment */
		    {
			ArrayList list = new70();
			push(goTo(40), list, true);
		    }
		    break;
                    case 71: /* reduce ATerminal$Typedeclaration */
		    {
			ArrayList list = new71();
			push(goTo(41), list, true);
		    }
		    break;
                    case 72: /* reduce ANonTerminal$Typedeclaration */
		    {
			ArrayList list = new72();
			push(goTo(41), list, true);
		    }
		    break;
                    case 73: /* reduce ATerminal$Vardeclaration */
		    {
			ArrayList list = new73();
			push(goTo(42), list, true);
		    }
		    break;
                    case 74: /* reduce ANonTerminal$Vardeclaration */
		    {
			ArrayList list = new74();
			push(goTo(42), list, true);
		    }
		    break;
                    case 75: /* reduce ATerminal$Andstatement */
		    {
			ArrayList list = new75();
			push(goTo(43), list, true);
		    }
		    break;
                    case 76: /* reduce ANonTerminal$Andstatement */
		    {
			ArrayList list = new76();
			push(goTo(43), list, true);
		    }
		    break;
                    case 77: /* reduce ATerminal$Actualparams */
		    {
			ArrayList list = new77();
			push(goTo(44), list, true);
		    }
		    break;
                    case 78: /* reduce ANonTerminal$Actualparams */
		    {
			ArrayList list = new78();
			push(goTo(44), list, true);
		    }
		    break;
                    case 79: /* reduce ATerminal$Moreactualparameters */
		    {
			ArrayList list = new79();
			push(goTo(45), list, true);
		    }
		    break;
                    case 80: /* reduce ANonTerminal$Moreactualparameters */
		    {
			ArrayList list = new80();
			push(goTo(45), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        TModuletxt tmoduletxtNode2;
        TIdentifier tidentifierNode3;
        TSemi tsemiNode4;
        PDeclarations pdeclarationsNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TEndtxt tendtxtNode7;
        TIdentifier tidentifierNode8;
        TDot tdotNode9;
        tmoduletxtNode2 = (TModuletxt)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);
        pdeclarationsNode5 = (PDeclarations)nodeArrayList4.get(0);
        tendtxtNode7 = (TEndtxt)nodeArrayList5.get(0);
        tidentifierNode8 = (TIdentifier)nodeArrayList6.get(0);
        tdotNode9 = (TDot)nodeArrayList7.get(0);

        pprogramNode1 = new AProgram(tmoduletxtNode2, tidentifierNode3, tsemiNode4, pdeclarationsNode5, null, tendtxtNode7, tidentifierNode8, tdotNode9);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        TModuletxt tmoduletxtNode2;
        TIdentifier tidentifierNode3;
        TSemi tsemiNode4;
        PDeclarations pdeclarationsNode5;
        PBegstat pbegstatNode6;
        TEndtxt tendtxtNode7;
        TIdentifier tidentifierNode8;
        TDot tdotNode9;
        tmoduletxtNode2 = (TModuletxt)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);
        pdeclarationsNode5 = (PDeclarations)nodeArrayList4.get(0);
        pbegstatNode6 = (PBegstat)nodeArrayList5.get(0);
        tendtxtNode7 = (TEndtxt)nodeArrayList6.get(0);
        tidentifierNode8 = (TIdentifier)nodeArrayList7.get(0);
        tdotNode9 = (TDot)nodeArrayList8.get(0);

        pprogramNode1 = new AProgram(tmoduletxtNode2, tidentifierNode3, tsemiNode4, pdeclarationsNode5, pbegstatNode6, tendtxtNode7, tidentifierNode8, tdotNode9);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAdeclconstdeclarations1Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        TConsttxt tconsttxtNode2;
        LinkedList listNode3 = new LinkedList();
        tconsttxtNode2 = (TConsttxt)nodeArrayList1.get(0);
        {
            // Block
        }

        pdeclarationsNode1 = new ADeclconstDeclarations(tconsttxtNode2, listNode3);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAdeclconstdeclarations2Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        TConsttxt tconsttxtNode2;
        LinkedList listNode4 = new LinkedList();
        tconsttxtNode2 = (TConsttxt)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pdeclarationsNode1 = new ADeclconstDeclarations(tconsttxtNode2, listNode4);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAdecltypedeclarations1Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        TTypetxt ttypetxtNode2;
        LinkedList listNode3 = new LinkedList();
        ttypetxtNode2 = (TTypetxt)nodeArrayList1.get(0);
        {
            // Block
        }

        pdeclarationsNode1 = new ADecltypeDeclarations(ttypetxtNode2, listNode3);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAdecltypedeclarations2Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        TTypetxt ttypetxtNode2;
        LinkedList listNode4 = new LinkedList();
        ttypetxtNode2 = (TTypetxt)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pdeclarationsNode1 = new ADecltypeDeclarations(ttypetxtNode2, listNode4);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAdeclvardeclarations1Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        TVartxt tvartxtNode2;
        LinkedList listNode3 = new LinkedList();
        tvartxtNode2 = (TVartxt)nodeArrayList1.get(0);
        {
            // Block
        }

        pdeclarationsNode1 = new ADeclvarDeclarations(tvartxtNode2, listNode3);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAdeclvardeclarations2Declarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        TVartxt tvartxtNode2;
        LinkedList listNode4 = new LinkedList();
        tvartxtNode2 = (TVartxt)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pdeclarationsNode1 = new ADeclvarDeclarations(tvartxtNode2, listNode4);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce ADeclproceduredeclarationDeclarations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        PDeclproceduredeclaration pdeclproceduredeclarationNode2;
        TSemi tsemiNode3;
        pdeclproceduredeclarationNode2 = (PDeclproceduredeclaration)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pdeclarationsNode1 = new ADeclproceduredeclarationDeclarations(pdeclproceduredeclarationNode2, tsemiNode3);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce ABegstat */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBegstat pbegstatNode1;
        {
            // Block
        TBegintxt tbegintxtNode2;
        PStatementsequence pstatementsequenceNode3;
        tbegintxtNode2 = (TBegintxt)nodeArrayList1.get(0);
        pstatementsequenceNode3 = (PStatementsequence)nodeArrayList2.get(0);

        pbegstatNode1 = new ABegstat(tbegintxtNode2, pstatementsequenceNode3);
        }
	nodeList.add(pbegstatNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAssignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TAss tassNode3;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tassNode3 = (TAss)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        passignmentNode1 = new AAssignment(tidentifierNode2, tassNode3, pexpressionNode4);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce ATypedeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypedeclaration ptypedeclarationNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TAss tassNode3;
        PType ptypeNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tassNode3 = (TAss)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);

        ptypedeclarationNode1 = new ATypedeclaration(tidentifierNode2, tassNode3, ptypeNode4);
        }
	nodeList.add(ptypedeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAstatementsequence1Statementsequence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementsequence pstatementsequenceNode1;
        {
            // Block
        PStatement pstatementNode2;
        LinkedList listNode3 = new LinkedList();
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);
        {
            // Block
        }

        pstatementsequenceNode1 = new AStatementsequence(pstatementNode2, listNode3);
        }
	nodeList.add(pstatementsequenceNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAstatementsequence2Statementsequence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementsequence pstatementsequenceNode1;
        {
            // Block
        PStatement pstatementNode2;
        LinkedList listNode4 = new LinkedList();
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstatementsequenceNode1 = new AStatementsequence(pstatementNode2, listNode4);
        }
	nodeList.add(pstatementsequenceNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce ADeclproceduredeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclproceduredeclaration pdeclproceduredeclarationNode1;
        {
            // Block
        PProceduredeclaration pproceduredeclarationNode2;
        TSemi tsemiNode3;
        pproceduredeclarationNode2 = (PProceduredeclaration)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pdeclproceduredeclarationNode1 = new ADeclproceduredeclaration(pproceduredeclarationNode2, tsemiNode3);
        }
	nodeList.add(pdeclproceduredeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AVardeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVardeclaration pvardeclarationNode1;
        {
            // Block
        PIdentlist pidentlistNode2;
        TColon tcolonNode3;
        PType ptypeNode4;
        TSemi tsemiNode5;
        pidentlistNode2 = (PIdentlist)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);

        pvardeclarationNode1 = new AVardeclaration(pidentlistNode2, tcolonNode3, ptypeNode4, tsemiNode5);
        }
	nodeList.add(pvardeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAexpression1Expression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PSimpleexpression psimpleexpressionNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        psimpleexpressionNode2 = (PSimpleexpression)nodeArrayList1.get(0);

        pexpressionNode1 = new AExpression(psimpleexpressionNode2, null);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAexpression2Expression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PSimpleexpression psimpleexpressionNode2;
        PSimpleexpressionevaluation psimpleexpressionevaluationNode3;
        psimpleexpressionNode2 = (PSimpleexpression)nodeArrayList1.get(0);
        psimpleexpressionevaluationNode3 = (PSimpleexpressionevaluation)nodeArrayList2.get(0);

        pexpressionNode1 = new AExpression(psimpleexpressionNode2, psimpleexpressionevaluationNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AIdtypeType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        ptypeNode1 = new AIdtypeType(tidentifierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AArrtypeType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PArraytype parraytypeNode2;
        parraytypeNode2 = (PArraytype)nodeArrayList1.get(0);

        ptypeNode1 = new AArrtypeType(parraytypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce ARectypeType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PRecordtype precordtypeNode2;
        precordtypeNode2 = (PRecordtype)nodeArrayList1.get(0);

        ptypeNode1 = new ARectypeType(precordtypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AStatassStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PAssignment passignmentNode2;
        passignmentNode2 = (PAssignment)nodeArrayList1.get(0);

        pstatementNode1 = new AStatassStatement(passignmentNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AStatprocStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PProcedurecall pprocedurecallNode2;
        pprocedurecallNode2 = (PProcedurecall)nodeArrayList1.get(0);

        pstatementNode1 = new AStatprocStatement(pprocedurecallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AStatifStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIfstatement pifstatementNode2;
        pifstatementNode2 = (PIfstatement)nodeArrayList1.get(0);

        pstatementNode1 = new AStatifStatement(pifstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AStatwhiStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PWhilestatement pwhilestatementNode2;
        pwhilestatementNode2 = (PWhilestatement)nodeArrayList1.get(0);

        pstatementNode1 = new AStatwhiStatement(pwhilestatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AStatnoneStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TSptxt tsptxtNode2;
        tsptxtNode2 = (TSptxt)nodeArrayList1.get(0);

        pstatementNode1 = new AStatnoneStatement(tsptxtNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AIdentlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIdentlist pidentlistNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PAndidentifier pandidentifierNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pandidentifierNode3 = (PAndidentifier)nodeArrayList2.get(0);

        pidentlistNode1 = new AIdentlist(tidentifierNode2, pandidentifierNode3);
        }
	nodeList.add(pidentlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AProceduredeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProceduredeclaration pproceduredeclarationNode1;
        {
            // Block
        PProcedureheading pprocedureheadingNode2;
        TSemi tsemiNode3;
        PProcedurebody pprocedurebodyNode4;
        TIdentifier tidentifierNode5;
        pprocedureheadingNode2 = (PProcedureheading)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);
        pprocedurebodyNode4 = (PProcedurebody)nodeArrayList3.get(0);
        tidentifierNode5 = (TIdentifier)nodeArrayList4.get(0);

        pproceduredeclarationNode1 = new AProceduredeclaration(pprocedureheadingNode2, tsemiNode3, pprocedurebodyNode4, tidentifierNode5);
        }
	nodeList.add(pproceduredeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AAndstatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAndstatement pandstatementNode1;
        {
            // Block
        TSemi tsemiNode2;
        PStatement pstatementNode3;
        tsemiNode2 = (TSemi)nodeArrayList1.get(0);
        pstatementNode3 = (PStatement)nodeArrayList2.get(0);

        pandstatementNode1 = new AAndstatement(tsemiNode2, pstatementNode3);
        }
	nodeList.add(pandstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AAndidentifier */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAndidentifier pandidentifierNode1;
        {
            // Block
        TComma tcommaNode2;
        TIdentifier tidentifierNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pandidentifierNode1 = new AAndidentifier(tcommaNode2, tidentifierNode3);
        }
	nodeList.add(pandidentifierNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce ASimpleexpressionevaluation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpleexpressionevaluation psimpleexpressionevaluationNode1;
        {
            // Block
        TExpressionoperator texpressionoperatorNode2;
        PSimpleexpression psimpleexpressionNode3;
        texpressionoperatorNode2 = (TExpressionoperator)nodeArrayList1.get(0);
        psimpleexpressionNode3 = (PSimpleexpression)nodeArrayList2.get(0);

        psimpleexpressionevaluationNode1 = new ASimpleexpressionevaluation(texpressionoperatorNode2, psimpleexpressionNode3);
        }
	nodeList.add(psimpleexpressionevaluationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AAsimpleexpression1Simpleexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpleexpression psimpleexpressionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PTerm ptermNode3;
        PMoreterms pmoretermsNode4;
        ptermNode3 = (PTerm)nodeArrayList1.get(0);
        pmoretermsNode4 = (PMoreterms)nodeArrayList2.get(0);

        psimpleexpressionNode1 = new ASimpleexpression(null, ptermNode3, pmoretermsNode4);
        }
	nodeList.add(psimpleexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AAsimpleexpression2Simpleexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpleexpression psimpleexpressionNode1;
        {
            // Block
        TPlusorminus tplusorminusNode2;
        PTerm ptermNode3;
        PMoreterms pmoretermsNode4;
        tplusorminusNode2 = (TPlusorminus)nodeArrayList1.get(0);
        ptermNode3 = (PTerm)nodeArrayList2.get(0);
        pmoretermsNode4 = (PMoreterms)nodeArrayList3.get(0);

        psimpleexpressionNode1 = new ASimpleexpression(tplusorminusNode2, ptermNode3, pmoretermsNode4);
        }
	nodeList.add(psimpleexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ARecordtype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRecordtype precordtypeNode1;
        {
            // Block
        TRecordtxt trecordtxtNode2;
        PFieldlist pfieldlistNode3;
        PMorefields pmorefieldsNode4;
        TEndtxt tendtxtNode5;
        trecordtxtNode2 = (TRecordtxt)nodeArrayList1.get(0);
        pfieldlistNode3 = (PFieldlist)nodeArrayList2.get(0);
        pmorefieldsNode4 = (PMorefields)nodeArrayList3.get(0);
        tendtxtNode5 = (TEndtxt)nodeArrayList4.get(0);

        precordtypeNode1 = new ARecordtype(trecordtxtNode2, pfieldlistNode3, pmorefieldsNode4, tendtxtNode5);
        }
	nodeList.add(precordtypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AArraytype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArraytype parraytypeNode1;
        {
            // Block
        TArraytxt tarraytxtNode2;
        PExpression pexpressionNode3;
        TOftxt toftxtNode4;
        PType ptypeNode5;
        tarraytxtNode2 = (TArraytxt)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        toftxtNode4 = (TOftxt)nodeArrayList3.get(0);
        ptypeNode5 = (PType)nodeArrayList4.get(0);

        parraytypeNode1 = new AArraytype(tarraytxtNode2, pexpressionNode3, toftxtNode4, ptypeNode5);
        }
	nodeList.add(parraytypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AWhilestatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PWhilestatement pwhilestatementNode1;
        {
            // Block
        TWhiletxt twhiletxtNode2;
        PExpression pexpressionNode3;
        TDotxt tdotxtNode4;
        PStatementsequence pstatementsequenceNode5;
        TEndtxt tendtxtNode6;
        twhiletxtNode2 = (TWhiletxt)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tdotxtNode4 = (TDotxt)nodeArrayList3.get(0);
        pstatementsequenceNode5 = (PStatementsequence)nodeArrayList4.get(0);
        tendtxtNode6 = (TEndtxt)nodeArrayList5.get(0);

        pwhilestatementNode1 = new AWhilestatement(twhiletxtNode2, pexpressionNode3, tdotxtNode4, pstatementsequenceNode5, tendtxtNode6);
        }
	nodeList.add(pwhilestatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AIfstatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfstatement pifstatementNode1;
        {
            // Block
        TIftxt tiftxtNode2;
        PExpression pexpressionNode3;
        TThentxt tthentxtNode4;
        PStatementsequence pstatementsequenceNode5;
        PElsif pelsifNode6;
        PElse pelseNode7;
        TEndtxt tendtxtNode8;
        tiftxtNode2 = (TIftxt)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tthentxtNode4 = (TThentxt)nodeArrayList3.get(0);
        pstatementsequenceNode5 = (PStatementsequence)nodeArrayList4.get(0);
        pelsifNode6 = (PElsif)nodeArrayList5.get(0);
        pelseNode7 = (PElse)nodeArrayList6.get(0);
        tendtxtNode8 = (TEndtxt)nodeArrayList7.get(0);

        pifstatementNode1 = new AIfstatement(tiftxtNode2, pexpressionNode3, tthentxtNode4, pstatementsequenceNode5, pelsifNode6, pelseNode7, tendtxtNode8);
        }
	nodeList.add(pifstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AAprocedurecall1Procedurecall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProcedurecall pprocedurecallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode3 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        pprocedurecallNode1 = new AProcedurecall(tidentifierNode2, listNode3);
        }
	nodeList.add(pprocedurecallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AAprocedurecall2Procedurecall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProcedurecall pprocedurecallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode4 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprocedurecallNode1 = new AProcedurecall(tidentifierNode2, listNode4);
        }
	nodeList.add(pprocedurecallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AAprocedureheading1Procedureheading */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProcedureheading pprocedureheadingNode1;
        {
            // Block
        TProceduretxt tproceduretxtNode2;
        TIdentifier tidentifierNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tproceduretxtNode2 = (TProceduretxt)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pprocedureheadingNode1 = new AProcedureheading(tproceduretxtNode2, tidentifierNode3, null);
        }
	nodeList.add(pprocedureheadingNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AAprocedureheading2Procedureheading */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProcedureheading pprocedureheadingNode1;
        {
            // Block
        TProceduretxt tproceduretxtNode2;
        TIdentifier tidentifierNode3;
        PFormalparams pformalparamsNode4;
        tproceduretxtNode2 = (TProceduretxt)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        pformalparamsNode4 = (PFormalparams)nodeArrayList3.get(0);

        pprocedureheadingNode1 = new AProcedureheading(tproceduretxtNode2, tidentifierNode3, pformalparamsNode4);
        }
	nodeList.add(pprocedureheadingNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AAprocedurebody1Procedurebody */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProcedurebody pprocedurebodyNode1;
        {
            // Block
        PDeclarations pdeclarationsNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TEndtxt tendtxtNode4;
        pdeclarationsNode2 = (PDeclarations)nodeArrayList1.get(0);
        tendtxtNode4 = (TEndtxt)nodeArrayList2.get(0);

        pprocedurebodyNode1 = new AProcedurebody(pdeclarationsNode2, null, tendtxtNode4);
        }
	nodeList.add(pprocedurebodyNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AAprocedurebody2Procedurebody */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProcedurebody pprocedurebodyNode1;
        {
            // Block
        PDeclarations pdeclarationsNode2;
        PProcedurebodystatements pprocedurebodystatementsNode3;
        TEndtxt tendtxtNode4;
        pdeclarationsNode2 = (PDeclarations)nodeArrayList1.get(0);
        pprocedurebodystatementsNode3 = (PProcedurebodystatements)nodeArrayList2.get(0);
        tendtxtNode4 = (TEndtxt)nodeArrayList3.get(0);

        pprocedurebodyNode1 = new AProcedurebody(pdeclarationsNode2, pprocedurebodystatementsNode3, tendtxtNode4);
        }
	nodeList.add(pprocedurebodyNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce ATerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        PAdditionaloperations padditionaloperationsNode3;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        padditionaloperationsNode3 = (PAdditionaloperations)nodeArrayList2.get(0);

        ptermNode1 = new ATerm(pfactorNode2, padditionaloperationsNode3);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AMoreterms */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMoreterms pmoretermsNode1;
        {
            // Block
        TPlusorminusoror tplusorminusororNode2;
        PTerm ptermNode3;
        tplusorminusororNode2 = (TPlusorminusoror)nodeArrayList1.get(0);
        ptermNode3 = (PTerm)nodeArrayList2.get(0);

        pmoretermsNode1 = new AMoreterms(tplusorminusororNode2, ptermNode3);
        }
	nodeList.add(pmoretermsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AFieldlistFieldlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFieldlist pfieldlistNode1;
        {
            // Block
        PIdentlist pidentlistNode2;
        TColon tcolonNode3;
        PType ptypeNode4;
        pidentlistNode2 = (PIdentlist)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);

        pfieldlistNode1 = new AFieldlistFieldlist(pidentlistNode2, tcolonNode3, ptypeNode4);
        }
	nodeList.add(pfieldlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AListnoneFieldlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFieldlist pfieldlistNode1;
        {
            // Block
        TSptxt tsptxtNode2;
        tsptxtNode2 = (TSptxt)nodeArrayList1.get(0);

        pfieldlistNode1 = new AListnoneFieldlist(tsptxtNode2);
        }
	nodeList.add(pfieldlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AMorefields */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMorefields pmorefieldsNode1;
        {
            // Block
        TSemi tsemiNode2;
        PFieldlist pfieldlistNode3;
        tsemiNode2 = (TSemi)nodeArrayList1.get(0);
        pfieldlistNode3 = (PFieldlist)nodeArrayList2.get(0);

        pmorefieldsNode1 = new AMorefields(tsemiNode2, pfieldlistNode3);
        }
	nodeList.add(pmorefieldsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AElsif */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PElsif pelsifNode1;
        {
            // Block
        TElsiftxt telsiftxtNode2;
        PExpression pexpressionNode3;
        TThentxt tthentxtNode4;
        PStatementsequence pstatementsequenceNode5;
        telsiftxtNode2 = (TElsiftxt)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tthentxtNode4 = (TThentxt)nodeArrayList3.get(0);
        pstatementsequenceNode5 = (PStatementsequence)nodeArrayList4.get(0);

        pelsifNode1 = new AElsif(telsiftxtNode2, pexpressionNode3, tthentxtNode4, pstatementsequenceNode5);
        }
	nodeList.add(pelsifNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PElse pelseNode1;
        {
            // Block
        TElsetxt telsetxtNode2;
        PStatementsequence pstatementsequenceNode3;
        telsetxtNode2 = (TElsetxt)nodeArrayList1.get(0);
        pstatementsequenceNode3 = (PStatementsequence)nodeArrayList2.get(0);

        pelseNode1 = new AElse(telsetxtNode2, pstatementsequenceNode3);
        }
	nodeList.add(pelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce AAactualparams1Actualparams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PActualparams pactualparamsNode1;
        {
            // Block
        TLPar tlparNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        trparNode4 = (TRPar)nodeArrayList2.get(0);

        pactualparamsNode1 = new AActualparams(tlparNode2, null, trparNode4);
        }
	nodeList.add(pactualparamsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AAactualparams2Actualparams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PActualparams pactualparamsNode1;
        {
            // Block
        TLPar tlparNode2;
        PActualparameters pactualparametersNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pactualparametersNode3 = (PActualparameters)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pactualparamsNode1 = new AActualparams(tlparNode2, pactualparametersNode3, trparNode4);
        }
	nodeList.add(pactualparamsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AAformalparams1Formalparams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFormalparams pformalparamsNode1;
        {
            // Block
        TLPar tlparNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        trparNode4 = (TRPar)nodeArrayList2.get(0);

        pformalparamsNode1 = new AFormalparams(tlparNode2, null, trparNode4);
        }
	nodeList.add(pformalparamsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AAformalparams2Formalparams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFormalparams pformalparamsNode1;
        {
            // Block
        TLPar tlparNode2;
        PFormalparameters pformalparametersNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pformalparametersNode3 = (PFormalparameters)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pformalparamsNode1 = new AFormalparams(tlparNode2, pformalparametersNode3, trparNode4);
        }
	nodeList.add(pformalparamsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AProcedurebodystatements */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProcedurebodystatements pprocedurebodystatementsNode1;
        {
            // Block
        TBegintxt tbegintxtNode2;
        PStatementsequence pstatementsequenceNode3;
        tbegintxtNode2 = (TBegintxt)nodeArrayList1.get(0);
        pstatementsequenceNode3 = (PStatementsequence)nodeArrayList2.get(0);

        pprocedurebodystatementsNode1 = new AProcedurebodystatements(tbegintxtNode2, pstatementsequenceNode3);
        }
	nodeList.add(pprocedurebodystatementsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AAdditionaloperations */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAdditionaloperations padditionaloperationsNode1;
        {
            // Block
        TTermoperator ttermoperatorNode2;
        PFactor pfactorNode3;
        ttermoperatorNode2 = (TTermoperator)nodeArrayList1.get(0);
        pfactorNode3 = (PFactor)nodeArrayList2.get(0);

        padditionaloperationsNode1 = new AAdditionaloperations(ttermoperatorNode2, pfactorNode3);
        }
	nodeList.add(padditionaloperationsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce AIdfactorFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PSelector pselectorNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pselectorNode3 = (PSelector)nodeArrayList2.get(0);

        pfactorNode1 = new AIdfactorFactor(tidentifierNode2, pselectorNode3);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AIntfactorFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        pfactorNode1 = new AIntfactorFactor(tintegerNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AExpfactorFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TRPar trparNode2;
        PExpression pexpressionNode3;
        TLPar tlparNode4;
        trparNode2 = (TRPar)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);

        pfactorNode1 = new AExpfactorFactor(trparNode2, pexpressionNode3, tlparNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce ATilfactorFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TTilde ttildeNode2;
        PFactor pfactorNode3;
        ttildeNode2 = (TTilde)nodeArrayList1.get(0);
        pfactorNode3 = (PFactor)nodeArrayList2.get(0);

        pfactorNode1 = new ATilfactorFactor(ttildeNode2, pfactorNode3);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AAactualparameters1Actualparameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PActualparameters pactualparametersNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList listNode3 = new LinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        pactualparametersNode1 = new AActualparameters(pexpressionNode2, listNode3);
        }
	nodeList.add(pactualparametersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce AAactualparameters2Actualparameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PActualparameters pactualparametersNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList listNode4 = new LinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pactualparametersNode1 = new AActualparameters(pexpressionNode2, listNode4);
        }
	nodeList.add(pactualparametersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce AAformalparameters1Formalparameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFormalparameters pformalparametersNode1;
        {
            // Block
        TLPar tlparNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        trparNode4 = (TRPar)nodeArrayList2.get(0);

        pformalparametersNode1 = new AFormalparameters(tlparNode2, null, trparNode4);
        }
	nodeList.add(pformalparametersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce AAformalparameters2Formalparameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFormalparameters pformalparametersNode1;
        {
            // Block
        TLPar tlparNode2;
        PFpsection pfpsectionNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pfpsectionNode3 = (PFpsection)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pformalparametersNode1 = new AFormalparameters(tlparNode2, pfpsectionNode3, trparNode4);
        }
	nodeList.add(pformalparametersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce ADotselectorSelector */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSelector pselectorNode1;
        {
            // Block
        TDot tdotNode2;
        TIdentifier tidentifierNode3;
        tdotNode2 = (TDot)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pselectorNode1 = new ADotselectorSelector(tdotNode2, tidentifierNode3);
        }
	nodeList.add(pselectorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce AArrselectorSelector */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSelector pselectorNode1;
        {
            // Block
        TLBkt tlbktNode2;
        PExpression pexpressionNode3;
        TRBkt trbktNode4;
        tlbktNode2 = (TLBkt)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trbktNode4 = (TRBkt)nodeArrayList3.get(0);

        pselectorNode1 = new AArrselectorSelector(tlbktNode2, pexpressionNode3, trbktNode4);
        }
	nodeList.add(pselectorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce AAfpsection1Fpsection */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFpsection pfpsectionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PIdentlist pidentlistNode3;
        TColon tcolonNode4;
        PType ptypeNode5;
        pidentlistNode3 = (PIdentlist)nodeArrayList1.get(0);
        tcolonNode4 = (TColon)nodeArrayList2.get(0);
        ptypeNode5 = (PType)nodeArrayList3.get(0);

        pfpsectionNode1 = new AFpsection(null, pidentlistNode3, tcolonNode4, ptypeNode5);
        }
	nodeList.add(pfpsectionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce AAfpsection2Fpsection */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFpsection pfpsectionNode1;
        {
            // Block
        TVartxt tvartxtNode2;
        PIdentlist pidentlistNode3;
        TColon tcolonNode4;
        PType ptypeNode5;
        tvartxtNode2 = (TVartxt)nodeArrayList1.get(0);
        pidentlistNode3 = (PIdentlist)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        ptypeNode5 = (PType)nodeArrayList4.get(0);

        pfpsectionNode1 = new AFpsection(tvartxtNode2, pidentlistNode3, tcolonNode4, ptypeNode5);
        }
	nodeList.add(pfpsectionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce AMoreactualparameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMoreactualparameters pmoreactualparametersNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpression pexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pmoreactualparametersNode1 = new AMoreactualparameters(tcommaNode2, pexpressionNode3);
        }
	nodeList.add(pmoreactualparametersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce ATerminal$Assignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PAssignment passignmentNode1;
        passignmentNode1 = (PAssignment)nodeArrayList1.get(0);
	if(passignmentNode1 != null)
	{
	  listNode2.add(passignmentNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce ANonTerminal$Assignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PAssignment passignmentNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        passignmentNode2 = (PAssignment)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(passignmentNode2 != null)
	{
	  listNode3.add(passignmentNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce ATerminal$Typedeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PTypedeclaration ptypedeclarationNode1;
        ptypedeclarationNode1 = (PTypedeclaration)nodeArrayList1.get(0);
	if(ptypedeclarationNode1 != null)
	{
	  listNode2.add(ptypedeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce ANonTerminal$Typedeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PTypedeclaration ptypedeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ptypedeclarationNode2 = (PTypedeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ptypedeclarationNode2 != null)
	{
	  listNode3.add(ptypedeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce ATerminal$Vardeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PVardeclaration pvardeclarationNode1;
        pvardeclarationNode1 = (PVardeclaration)nodeArrayList1.get(0);
	if(pvardeclarationNode1 != null)
	{
	  listNode2.add(pvardeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce ANonTerminal$Vardeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PVardeclaration pvardeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardeclarationNode2 = (PVardeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardeclarationNode2 != null)
	{
	  listNode3.add(pvardeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce ATerminal$Andstatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PAndstatement pandstatementNode1;
        pandstatementNode1 = (PAndstatement)nodeArrayList1.get(0);
	if(pandstatementNode1 != null)
	{
	  listNode2.add(pandstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce ANonTerminal$Andstatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PAndstatement pandstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pandstatementNode2 = (PAndstatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pandstatementNode2 != null)
	{
	  listNode3.add(pandstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce ATerminal$Actualparams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PActualparams pactualparamsNode1;
        pactualparamsNode1 = (PActualparams)nodeArrayList1.get(0);
	if(pactualparamsNode1 != null)
	{
	  listNode2.add(pactualparamsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce ANonTerminal$Actualparams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PActualparams pactualparamsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pactualparamsNode2 = (PActualparams)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pactualparamsNode2 != null)
	{
	  listNode3.add(pactualparamsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce ATerminal$Moreactualparameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PMoreactualparameters pmoreactualparametersNode1;
        pmoreactualparametersNode1 = (PMoreactualparameters)nodeArrayList1.get(0);
	if(pmoreactualparametersNode1 != null)
	{
	  listNode2.add(pmoreactualparametersNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce ANonTerminal$Moreactualparameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PMoreactualparameters pmoreactualparametersNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmoreactualparametersNode2 = (PMoreactualparameters)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmoreactualparametersNode2 != null)
	{
	  listNode3.add(pmoreactualparametersNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {12, SHIFT, 1}, },
			{{-1, ERROR, 1}, {33, SHIFT, 3}, },
			{{-1, ERROR, 2}, {35, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {11, SHIFT, 4}, },
			{{-1, ERROR, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {27, SHIFT, 8}, },
			{{-1, REDUCE, 2}, {33, SHIFT, 13}, },
			{{-1, REDUCE, 4}, {33, SHIFT, 16}, },
			{{-1, REDUCE, 6}, {33, SHIFT, 19}, },
			{{-1, ERROR, 8}, {33, SHIFT, 23}, },
			{{-1, ERROR, 9}, {16, SHIFT, 24}, {17, SHIFT, 25}, },
			{{-1, ERROR, 10}, {11, SHIFT, 27}, },
			{{-1, ERROR, 11}, {11, SHIFT, 28}, },
			{{-1, ERROR, 12}, {11, SHIFT, 29}, },
			{{-1, ERROR, 13}, {10, SHIFT, 30}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 3}, {33, SHIFT, 13}, },
			{{-1, ERROR, 16}, {10, SHIFT, 32}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 5}, {33, SHIFT, 16}, },
			{{-1, ERROR, 19}, {8, SHIFT, 34}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 21}, {9, SHIFT, 36}, },
			{{-1, REDUCE, 7}, {33, SHIFT, 19}, },
			{{-1, REDUCE, 39}, {3, SHIFT, 38}, },
			{{-1, ERROR, 24}, {21, SHIFT, 40}, {23, SHIFT, 41}, {28, SHIFT, 42}, {33, SHIFT, 43}, },
			{{-1, ERROR, 25}, {33, SHIFT, 50}, },
			{{-1, ERROR, 26}, {17, SHIFT, 51}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 29}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {27, SHIFT, 8}, },
			{{-1, ERROR, 30}, {6, SHIFT, 54}, {7, SHIFT, 55}, {30, SHIFT, 56}, {32, SHIFT, 57}, {33, SHIFT, 58}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 32}, {18, SHIFT, 63}, {19, SHIFT, 64}, {33, SHIFT, 65}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 34}, {33, SHIFT, 69}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 36}, {18, SHIFT, 63}, {19, SHIFT, 64}, {33, SHIFT, 65}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 38}, {3, SHIFT, 71}, {6, SHIFT, 72}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 40}, {6, SHIFT, 54}, {7, SHIFT, 55}, {30, SHIFT, 56}, {32, SHIFT, 57}, {33, SHIFT, 58}, },
			{{-1, ERROR, 41}, {6, SHIFT, 54}, {7, SHIFT, 55}, {30, SHIFT, 56}, {32, SHIFT, 57}, {33, SHIFT, 58}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 37}, {3, SHIFT, 76}, {10, SHIFT, 30}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 12}, {11, SHIFT, 79}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 50}, {0, SHIFT, 82}, },
			{{-1, ERROR, 51}, {33, SHIFT, 83}, },
			{{-1, ERROR, 52}, {16, SHIFT, 84}, {17, SHIFT, 85}, },
			{{-1, ERROR, 53}, {33, SHIFT, 87}, },
			{{-1, ERROR, 54}, {6, SHIFT, 54}, {7, SHIFT, 55}, {30, SHIFT, 56}, {32, SHIFT, 57}, {33, SHIFT, 58}, },
			{{-1, ERROR, 55}, {6, SHIFT, 54}, {7, SHIFT, 55}, {32, SHIFT, 57}, {33, SHIFT, 58}, },
			{{-1, ERROR, 56}, {6, SHIFT, 54}, {7, SHIFT, 55}, {32, SHIFT, 57}, {33, SHIFT, 58}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 58}, {0, SHIFT, 91}, {1, SHIFT, 92}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 16}, {29, SHIFT, 94}, },
			{{-1, ERROR, 61}, {31, SHIFT, 96}, },
			{{-1, ERROR, 62}, {34, SHIFT, 98}, },
			{{-1, ERROR, 63}, {28, SHIFT, 100}, {33, SHIFT, 19}, },
			{{-1, ERROR, 64}, {6, SHIFT, 54}, {7, SHIFT, 55}, {30, SHIFT, 56}, {32, SHIFT, 57}, {33, SHIFT, 58}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 70}, {11, SHIFT, 104}, },
			{{-1, ERROR, 71}, {6, SHIFT, 105}, {15, SHIFT, 106}, {33, SHIFT, 19}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 73}, {6, SHIFT, 109}, },
			{{-1, ERROR, 74}, {22, SHIFT, 110}, },
			{{-1, ERROR, 75}, {24, SHIFT, 111}, },
			{{-1, ERROR, 76}, {6, SHIFT, 112}, {7, SHIFT, 55}, {30, SHIFT, 56}, {32, SHIFT, 57}, {33, SHIFT, 58}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 38}, {3, SHIFT, 76}, },
			{{-1, ERROR, 79}, {21, SHIFT, 40}, {23, SHIFT, 41}, {28, SHIFT, 42}, {33, SHIFT, 43}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 13}, {11, SHIFT, 79}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 83}, {0, SHIFT, 118}, },
			{{-1, ERROR, 84}, {21, SHIFT, 40}, {23, SHIFT, 41}, {28, SHIFT, 42}, {33, SHIFT, 43}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 86}, {17, SHIFT, 120}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 88}, {3, SHIFT, 121}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 90}, {31, SHIFT, 96}, },
			{{-1, ERROR, 91}, {33, SHIFT, 123}, },
			{{-1, ERROR, 92}, {6, SHIFT, 54}, {7, SHIFT, 55}, {30, SHIFT, 56}, {32, SHIFT, 57}, {33, SHIFT, 58}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 94}, {6, SHIFT, 54}, {7, SHIFT, 55}, {30, SHIFT, 56}, {32, SHIFT, 57}, {33, SHIFT, 58}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 96}, {6, SHIFT, 54}, {7, SHIFT, 55}, {32, SHIFT, 57}, {33, SHIFT, 58}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 98}, {6, SHIFT, 54}, {7, SHIFT, 55}, {32, SHIFT, 57}, {33, SHIFT, 58}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 101}, {9, SHIFT, 128}, },
			{{-1, ERROR, 102}, {11, SHIFT, 129}, },
			{{-1, ERROR, 103}, {20, SHIFT, 131}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 106}, {33, SHIFT, 19}, },
			{{-1, ERROR, 107}, {9, SHIFT, 133}, },
			{{-1, ERROR, 108}, {6, SHIFT, 134}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 110}, {21, SHIFT, 40}, {23, SHIFT, 41}, {28, SHIFT, 42}, {33, SHIFT, 43}, },
			{{-1, ERROR, 111}, {21, SHIFT, 40}, {23, SHIFT, 41}, {28, SHIFT, 42}, {33, SHIFT, 43}, },
			{{-1, REDUCE, 50}, {6, SHIFT, 54}, {7, SHIFT, 55}, {30, SHIFT, 56}, {32, SHIFT, 57}, {33, SHIFT, 58}, },
			{{-1, REDUCE, 60}, {8, SHIFT, 137}, },
			{{-1, ERROR, 114}, {6, SHIFT, 140}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 124}, {4, SHIFT, 141}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 128}, {18, SHIFT, 63}, {19, SHIFT, 64}, {33, SHIFT, 65}, },
			{{-1, ERROR, 129}, {28, SHIFT, 100}, {33, SHIFT, 19}, },
			{{-1, ERROR, 130}, {17, SHIFT, 144}, },
			{{-1, ERROR, 131}, {18, SHIFT, 63}, {19, SHIFT, 64}, {33, SHIFT, 65}, },
			{{-1, ERROR, 132}, {9, SHIFT, 146}, },
			{{-1, ERROR, 133}, {18, SHIFT, 63}, {19, SHIFT, 64}, {33, SHIFT, 65}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 135}, {17, SHIFT, 148}, },
			{{-1, ERROR, 136}, {25, SHIFT, 149}, },
			{{-1, ERROR, 137}, {6, SHIFT, 54}, {7, SHIFT, 55}, {30, SHIFT, 56}, {32, SHIFT, 57}, {33, SHIFT, 58}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 61}, {8, SHIFT, 137}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 146}, {18, SHIFT, 63}, {19, SHIFT, 64}, {33, SHIFT, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 149}, {6, SHIFT, 54}, {7, SHIFT, 55}, {30, SHIFT, 56}, {32, SHIFT, 57}, {33, SHIFT, 58}, },
			{{-1, ERROR, 150}, {26, SHIFT, 155}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 154}, {24, SHIFT, 157}, },
			{{-1, ERROR, 155}, {21, SHIFT, 40}, {23, SHIFT, 41}, {28, SHIFT, 42}, {33, SHIFT, 43}, },
			{{-1, ERROR, 156}, {17, SHIFT, 159}, },
			{{-1, ERROR, 157}, {21, SHIFT, 40}, {23, SHIFT, 41}, {28, SHIFT, 42}, {33, SHIFT, 43}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 48}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 9}, {29, 52}, },
			{{-1, 26}, },
			{{-1, 44}, {5, 14}, {15, 31}, },
			{{-1, 17}, {18, 33}, },
			{{-1, 45}, {84, 119}, {110, 135}, {111, 136}, {155, 158}, {157, 160}, },
			{{-1, 10}, },
			{{-1, 20}, {22, 37}, },
			{{-1, 88}, {30, 59}, {40, 74}, {41, 75}, {64, 103}, {76, 113}, {92, 124}, {137, 151}, {149, 154}, },
			{{-1, 66}, {36, 70}, {128, 142}, {131, 145}, {133, 147}, {146, 153}, },
			{{-1, 46}, {79, 116}, },
			{{-1, 21}, {63, 101}, {71, 107}, {106, 132}, {129, 101}, },
			{{-1, 11}, },
			{{-1, 80}, {81, 117}, },
			{{-1, 35}, },
			{{-1, 95}, },
			{{-1, 60}, {94, 125}, },
			{{-1, 67}, },
			{{-1, 68}, },
			{{-1, 47}, },
			{{-1, 48}, },
			{{-1, 49}, },
			{{-1, 12}, },
			{{-1, 53}, },
			{{-1, 61}, {56, 90}, {96, 126}, },
			{{-1, 97}, {90, 122}, },
			{{-1, 102}, {129, 143}, },
			{{-1, 130}, },
			{{-1, 150}, },
			{{-1, 156}, },
			{{-1, 77}, {78, 115}, },
			{{-1, 39}, },
			{{-1, 86}, },
			{{-1, 99}, },
			{{-1, 62}, {55, 89}, {98, 127}, },
			{{-1, 114}, },
			{{-1, 73}, },
			{{-1, 93}, },
			{{-1, 108}, },
			{{-1, 138}, {139, 152}, },
			{{-1, 15}, },
			{{-1, 18}, },
			{{-1, 22}, },
			{{-1, 81}, },
			{{-1, 78}, },
			{{-1, 139}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: moduletxt",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: semi",
			"expecting: consttxt, typetxt, vartxt, proceduretxt",
			"expecting: begintxt, endtxt, identifier",
			"expecting: begintxt, endtxt",
			"expecting: ass",
			"expecting: ','",
			"expecting: ':'",
			"expecting: '(', semi",
			"expecting: whiletxt, iftxt, sptxt, identifier",
			"expecting: endtxt",
			"expecting: ')', '~', plusorminus, integer, identifier",
			"expecting: recordtxt, arraytxt, identifier",
			"expecting: '(', ')'",
			"expecting: semi, endtxt, elsiftxt, elsetxt",
			"expecting: '(', ass, semi, endtxt, elsiftxt, elsetxt",
			"expecting: '.'",
			"expecting: ')', '~', integer, identifier",
			"expecting: '(', ']', ')', ',', semi, begintxt, endtxt, oftxt, dotxt, thentxt, elsiftxt, elsetxt, expressionoperator, plusorminusoror, identifier, termoperator",
			"expecting: '.', '['",
			"expecting: semi, begintxt, endtxt, elsiftxt, elsetxt, identifier",
			"expecting: '(', ']', ')', ',', semi, begintxt, endtxt, oftxt, dotxt, thentxt, elsiftxt, elsetxt, expressionoperator, identifier",
			"expecting: plusorminusoror",
			"expecting: termoperator",
			"expecting: sptxt, identifier",
			"expecting: ')', semi, begintxt, endtxt, identifier",
			"expecting: ')', vartxt, identifier",
			"expecting: ')'",
			"expecting: dotxt",
			"expecting: thentxt",
			"expecting: '(', semi, endtxt, elsiftxt, elsetxt",
			"expecting: '('",
			"expecting: '(', ']', ')', ',', semi, begintxt, endtxt, oftxt, dotxt, thentxt, elsiftxt, elsetxt, identifier",
			"expecting: '(', ']', ')', ',', semi, begintxt, endtxt, oftxt, dotxt, thentxt, elsiftxt, elsetxt, expressionoperator, plusorminusoror, identifier",
			"expecting: semi, endtxt",
			"expecting: oftxt",
			"expecting: '(', ')', '~', semi, endtxt, elsiftxt, elsetxt, plusorminus, integer, identifier",
			"expecting: ')', ','",
			"expecting: ']'",
			"expecting: elsiftxt",
			"expecting: elsetxt",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 5, 5, 1, 6, 3, 3, 3, 7, 5, 5, 7, 5, 5, 8, 5, 9, 5, 10, 11, 1, 12, 6, 3, 4, 13, 5, 14, 5, 1, 9, 14, 5, 15, 3, 13, 13, 16, 17, 16, 12, 16, 16, 16, 16, 18, 1, 6, 1, 13, 19, 19, 20, 21, 22, 23, 24, 25, 26, 13, 27, 5, 27, 27, 9, 3, 28, 3, 29, 30, 31, 13, 32, 32, 11, 16, 16, 2, 18, 11, 1, 12, 3, 33, 20, 24, 1, 13, 20, 13, 34, 19, 23, 19, 35, 36, 9, 3, 37, 5, 29, 1, 9, 29, 3, 11, 11, 38, 39, 29, 32, 16, 16, 2, 12, 1, 20, 23, 20, 40, 34, 23, 35, 14, 26, 12, 14, 9, 14, 29, 12, 41, 13, 39, 39, 32, 20, 36, 12, 27, 27, 14, 29, 16, 13, 42, 39, 39, 29, 31, 11, 12, 11, 12, 16, 42, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
