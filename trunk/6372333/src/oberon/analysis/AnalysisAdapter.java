/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.analysis;

import java.util.*;
import oberon.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    public void caseADeclarations(ADeclarations node)
    {
        defaultCase(node);
    }

    public void caseABegstat(ABegstat node)
    {
        defaultCase(node);
    }

    public void caseAConstdecl(AConstdecl node)
    {
        defaultCase(node);
    }

    public void caseATypedecl(ATypedecl node)
    {
        defaultCase(node);
    }

    public void caseAVardecl(AVardecl node)
    {
        defaultCase(node);
    }

    public void caseAAssignment(AAssignment node)
    {
        defaultCase(node);
    }

    public void caseAConstdeclaration(AConstdeclaration node)
    {
        defaultCase(node);
    }

    public void caseATypedeclaration(ATypedeclaration node)
    {
        defaultCase(node);
    }

    public void caseAStatementsequence(AStatementsequence node)
    {
        defaultCase(node);
    }

    public void caseAVardeclaration(AVardeclaration node)
    {
        defaultCase(node);
    }

    public void caseAExpression(AExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdtypeType(AIdtypeType node)
    {
        defaultCase(node);
    }

    public void caseAArrtypeType(AArrtypeType node)
    {
        defaultCase(node);
    }

    public void caseARectypeType(ARectypeType node)
    {
        defaultCase(node);
    }

    public void caseAProceduredeclaration(AProceduredeclaration node)
    {
        defaultCase(node);
    }

    public void caseAStatassStatement(AStatassStatement node)
    {
        defaultCase(node);
    }

    public void caseAStatprocStatement(AStatprocStatement node)
    {
        defaultCase(node);
    }

    public void caseAStatifStatement(AStatifStatement node)
    {
        defaultCase(node);
    }

    public void caseAStatwhiStatement(AStatwhiStatement node)
    {
        defaultCase(node);
    }

    public void caseAStatnoneStatement(AStatnoneStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdentlist(AIdentlist node)
    {
        defaultCase(node);
    }

    public void caseAAndstatement(AAndstatement node)
    {
        defaultCase(node);
    }

    public void caseAAndidentifier(AAndidentifier node)
    {
        defaultCase(node);
    }

    public void caseASimpleexpressionevaluation(ASimpleexpressionevaluation node)
    {
        defaultCase(node);
    }

    public void caseASimpleexpression(ASimpleexpression node)
    {
        defaultCase(node);
    }

    public void caseARecordtype(ARecordtype node)
    {
        defaultCase(node);
    }

    public void caseAArraytype(AArraytype node)
    {
        defaultCase(node);
    }

    public void caseAWhilestatement(AWhilestatement node)
    {
        defaultCase(node);
    }

    public void caseAIfstatement(AIfstatement node)
    {
        defaultCase(node);
    }

    public void caseAProcedurecall(AProcedurecall node)
    {
        defaultCase(node);
    }

    public void caseAProcedureheading(AProcedureheading node)
    {
        defaultCase(node);
    }

    public void caseAProcedurebody(AProcedurebody node)
    {
        defaultCase(node);
    }

    public void caseATerm(ATerm node)
    {
        defaultCase(node);
    }

    public void caseAMoreterms(AMoreterms node)
    {
        defaultCase(node);
    }

    public void caseAFieldlistFieldlist(AFieldlistFieldlist node)
    {
        defaultCase(node);
    }

    public void caseAListnoneFieldlist(AListnoneFieldlist node)
    {
        defaultCase(node);
    }

    public void caseAMorefields(AMorefields node)
    {
        defaultCase(node);
    }

    public void caseAElsif(AElsif node)
    {
        defaultCase(node);
    }

    public void caseAElse(AElse node)
    {
        defaultCase(node);
    }

    public void caseAActualparams(AActualparams node)
    {
        defaultCase(node);
    }

    public void caseAFormalparams(AFormalparams node)
    {
        defaultCase(node);
    }

    public void caseAProcedurebodystatements(AProcedurebodystatements node)
    {
        defaultCase(node);
    }

    public void caseAAdditionaloperations(AAdditionaloperations node)
    {
        defaultCase(node);
    }

    public void caseAIntfactorFactor(AIntfactorFactor node)
    {
        defaultCase(node);
    }

    public void caseAExpfactorFactor(AExpfactorFactor node)
    {
        defaultCase(node);
    }

    public void caseATilfactorFactor(ATilfactorFactor node)
    {
        defaultCase(node);
    }

    public void caseAIdfactorFactor(AIdfactorFactor node)
    {
        defaultCase(node);
    }

    public void caseAActualparameters(AActualparameters node)
    {
        defaultCase(node);
    }

    public void caseAFormalparameters(AFormalparameters node)
    {
        defaultCase(node);
    }

    public void caseASelector(ASelector node)
    {
        defaultCase(node);
    }

    public void caseATemmultTermoperator(ATemmultTermoperator node)
    {
        defaultCase(node);
    }

    public void caseATermdivTermoperator(ATermdivTermoperator node)
    {
        defaultCase(node);
    }

    public void caseATermmodTermoperator(ATermmodTermoperator node)
    {
        defaultCase(node);
    }

    public void caseATermampTermoperator(ATermampTermoperator node)
    {
        defaultCase(node);
    }

    public void caseADotselectorRealselector(ADotselectorRealselector node)
    {
        defaultCase(node);
    }

    public void caseAArrselectorRealselector(AArrselectorRealselector node)
    {
        defaultCase(node);
    }

    public void caseAFpsection(AFpsection node)
    {
        defaultCase(node);
    }

    public void caseAMoreactualparameters(AMoreactualparameters node)
    {
        defaultCase(node);
    }

    public void caseAMoreformalparameters(AMoreformalparameters node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTLBkt(TLBkt node)
    {
        defaultCase(node);
    }

    public void caseTLBrc(TLBrc node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRBkt(TRBkt node)
    {
        defaultCase(node);
    }

    public void caseTRBrc(TRBrc node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTTilde(TTilde node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTEqu(TEqu node)
    {
        defaultCase(node);
    }

    public void caseTAss(TAss node)
    {
        defaultCase(node);
    }

    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    public void caseTModuletxt(TModuletxt node)
    {
        defaultCase(node);
    }

    public void caseTConsttxt(TConsttxt node)
    {
        defaultCase(node);
    }

    public void caseTTypetxt(TTypetxt node)
    {
        defaultCase(node);
    }

    public void caseTVartxt(TVartxt node)
    {
        defaultCase(node);
    }

    public void caseTBegintxt(TBegintxt node)
    {
        defaultCase(node);
    }

    public void caseTEndtxt(TEndtxt node)
    {
        defaultCase(node);
    }

    public void caseTRecordtxt(TRecordtxt node)
    {
        defaultCase(node);
    }

    public void caseTArraytxt(TArraytxt node)
    {
        defaultCase(node);
    }

    public void caseTOftxt(TOftxt node)
    {
        defaultCase(node);
    }

    public void caseTWhiletxt(TWhiletxt node)
    {
        defaultCase(node);
    }

    public void caseTDotxt(TDotxt node)
    {
        defaultCase(node);
    }

    public void caseTIftxt(TIftxt node)
    {
        defaultCase(node);
    }

    public void caseTThentxt(TThentxt node)
    {
        defaultCase(node);
    }

    public void caseTElsiftxt(TElsiftxt node)
    {
        defaultCase(node);
    }

    public void caseTElsetxt(TElsetxt node)
    {
        defaultCase(node);
    }

    public void caseTProceduretxt(TProceduretxt node)
    {
        defaultCase(node);
    }

    public void caseTSptxt(TSptxt node)
    {
        defaultCase(node);
    }

    public void caseTExpressionoperator(TExpressionoperator node)
    {
        defaultCase(node);
    }

    public void caseTPlusorminusoror(TPlusorminusoror node)
    {
        defaultCase(node);
    }

    public void caseTPlusorminus(TPlusorminus node)
    {
        defaultCase(node);
    }

    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTAmp(TAmp node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTInteger(TInteger node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTBlankNewline(TBlankNewline node)
    {
        defaultCase(node);
    }

    public void caseTBlankWhitespace(TBlankWhitespace node)
    {
        defaultCase(node);
    }

    public void caseTTab(TTab node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
