/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.node;

import oberon.analysis.*;

@SuppressWarnings("nls")
public final class AElsif extends PElsif
{
    private TElsiftxt _elsiftxt_;
    private PExpression _expression_;
    private TThentxt _thentxt_;
    private PStatementsequence _statementsequence_;

    public AElsif()
    {
        // Constructor
    }

    public AElsif(
        @SuppressWarnings("hiding") TElsiftxt _elsiftxt_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TThentxt _thentxt_,
        @SuppressWarnings("hiding") PStatementsequence _statementsequence_)
    {
        // Constructor
        setElsiftxt(_elsiftxt_);

        setExpression(_expression_);

        setThentxt(_thentxt_);

        setStatementsequence(_statementsequence_);

    }

    @Override
    public Object clone()
    {
        return new AElsif(
            cloneNode(this._elsiftxt_),
            cloneNode(this._expression_),
            cloneNode(this._thentxt_),
            cloneNode(this._statementsequence_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAElsif(this);
    }

    public TElsiftxt getElsiftxt()
    {
        return this._elsiftxt_;
    }

    public void setElsiftxt(TElsiftxt node)
    {
        if(this._elsiftxt_ != null)
        {
            this._elsiftxt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elsiftxt_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TThentxt getThentxt()
    {
        return this._thentxt_;
    }

    public void setThentxt(TThentxt node)
    {
        if(this._thentxt_ != null)
        {
            this._thentxt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thentxt_ = node;
    }

    public PStatementsequence getStatementsequence()
    {
        return this._statementsequence_;
    }

    public void setStatementsequence(PStatementsequence node)
    {
        if(this._statementsequence_ != null)
        {
            this._statementsequence_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementsequence_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._elsiftxt_)
            + toString(this._expression_)
            + toString(this._thentxt_)
            + toString(this._statementsequence_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._elsiftxt_ == child)
        {
            this._elsiftxt_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._thentxt_ == child)
        {
            this._thentxt_ = null;
            return;
        }

        if(this._statementsequence_ == child)
        {
            this._statementsequence_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._elsiftxt_ == oldChild)
        {
            setElsiftxt((TElsiftxt) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._thentxt_ == oldChild)
        {
            setThentxt((TThentxt) newChild);
            return;
        }

        if(this._statementsequence_ == oldChild)
        {
            setStatementsequence((PStatementsequence) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
