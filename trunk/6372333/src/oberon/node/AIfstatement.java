/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.node;

import oberon.analysis.*;

@SuppressWarnings("nls")
public final class AIfstatement extends PIfstatement
{
    private TIftxt _iftxt_;
    private PExpression _expression_;
    private TThentxt _thentxt_;
    private PStatementsequence _statementsequence_;
    private PElsif _elsif_;
    private PElse _else_;
    private TEndtxt _endtxt_;

    public AIfstatement()
    {
        // Constructor
    }

    public AIfstatement(
        @SuppressWarnings("hiding") TIftxt _iftxt_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TThentxt _thentxt_,
        @SuppressWarnings("hiding") PStatementsequence _statementsequence_,
        @SuppressWarnings("hiding") PElsif _elsif_,
        @SuppressWarnings("hiding") PElse _else_,
        @SuppressWarnings("hiding") TEndtxt _endtxt_)
    {
        // Constructor
        setIftxt(_iftxt_);

        setExpression(_expression_);

        setThentxt(_thentxt_);

        setStatementsequence(_statementsequence_);

        setElsif(_elsif_);

        setElse(_else_);

        setEndtxt(_endtxt_);

    }

    @Override
    public Object clone()
    {
        return new AIfstatement(
            cloneNode(this._iftxt_),
            cloneNode(this._expression_),
            cloneNode(this._thentxt_),
            cloneNode(this._statementsequence_),
            cloneNode(this._elsif_),
            cloneNode(this._else_),
            cloneNode(this._endtxt_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfstatement(this);
    }

    public TIftxt getIftxt()
    {
        return this._iftxt_;
    }

    public void setIftxt(TIftxt node)
    {
        if(this._iftxt_ != null)
        {
            this._iftxt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._iftxt_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TThentxt getThentxt()
    {
        return this._thentxt_;
    }

    public void setThentxt(TThentxt node)
    {
        if(this._thentxt_ != null)
        {
            this._thentxt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thentxt_ = node;
    }

    public PStatementsequence getStatementsequence()
    {
        return this._statementsequence_;
    }

    public void setStatementsequence(PStatementsequence node)
    {
        if(this._statementsequence_ != null)
        {
            this._statementsequence_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementsequence_ = node;
    }

    public PElsif getElsif()
    {
        return this._elsif_;
    }

    public void setElsif(PElsif node)
    {
        if(this._elsif_ != null)
        {
            this._elsif_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elsif_ = node;
    }

    public PElse getElse()
    {
        return this._else_;
    }

    public void setElse(PElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public TEndtxt getEndtxt()
    {
        return this._endtxt_;
    }

    public void setEndtxt(TEndtxt node)
    {
        if(this._endtxt_ != null)
        {
            this._endtxt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endtxt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._iftxt_)
            + toString(this._expression_)
            + toString(this._thentxt_)
            + toString(this._statementsequence_)
            + toString(this._elsif_)
            + toString(this._else_)
            + toString(this._endtxt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._iftxt_ == child)
        {
            this._iftxt_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._thentxt_ == child)
        {
            this._thentxt_ = null;
            return;
        }

        if(this._statementsequence_ == child)
        {
            this._statementsequence_ = null;
            return;
        }

        if(this._elsif_ == child)
        {
            this._elsif_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._endtxt_ == child)
        {
            this._endtxt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._iftxt_ == oldChild)
        {
            setIftxt((TIftxt) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._thentxt_ == oldChild)
        {
            setThentxt((TThentxt) newChild);
            return;
        }

        if(this._statementsequence_ == oldChild)
        {
            setStatementsequence((PStatementsequence) newChild);
            return;
        }

        if(this._elsif_ == oldChild)
        {
            setElsif((PElsif) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((PElse) newChild);
            return;
        }

        if(this._endtxt_ == oldChild)
        {
            setEndtxt((TEndtxt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
