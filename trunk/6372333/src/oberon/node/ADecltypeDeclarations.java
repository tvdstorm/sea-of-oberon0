/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.node;

import java.util.*;
import oberon.analysis.*;

@SuppressWarnings("nls")
public final class ADecltypeDeclarations extends PDeclarations
{
    private TTypetxt _typetxt_;
    private final LinkedList<PTypedeclaration> _typedeclaration_ = new LinkedList<PTypedeclaration>();

    public ADecltypeDeclarations()
    {
        // Constructor
    }

    public ADecltypeDeclarations(
        @SuppressWarnings("hiding") TTypetxt _typetxt_,
        @SuppressWarnings("hiding") List<PTypedeclaration> _typedeclaration_)
    {
        // Constructor
        setTypetxt(_typetxt_);

        setTypedeclaration(_typedeclaration_);

    }

    @Override
    public Object clone()
    {
        return new ADecltypeDeclarations(
            cloneNode(this._typetxt_),
            cloneList(this._typedeclaration_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADecltypeDeclarations(this);
    }

    public TTypetxt getTypetxt()
    {
        return this._typetxt_;
    }

    public void setTypetxt(TTypetxt node)
    {
        if(this._typetxt_ != null)
        {
            this._typetxt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typetxt_ = node;
    }

    public LinkedList<PTypedeclaration> getTypedeclaration()
    {
        return this._typedeclaration_;
    }

    public void setTypedeclaration(List<PTypedeclaration> list)
    {
        this._typedeclaration_.clear();
        this._typedeclaration_.addAll(list);
        for(PTypedeclaration e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._typetxt_)
            + toString(this._typedeclaration_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._typetxt_ == child)
        {
            this._typetxt_ = null;
            return;
        }

        if(this._typedeclaration_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._typetxt_ == oldChild)
        {
            setTypetxt((TTypetxt) newChild);
            return;
        }

        for(ListIterator<PTypedeclaration> i = this._typedeclaration_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTypedeclaration) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
