/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.node;

import oberon.analysis.*;

@SuppressWarnings("nls")
public final class AExsmallerequalsExpressionoperator extends PExpressionoperator
{
    private TExse _exse_;

    public AExsmallerequalsExpressionoperator()
    {
        // Constructor
    }

    public AExsmallerequalsExpressionoperator(
        @SuppressWarnings("hiding") TExse _exse_)
    {
        // Constructor
        setExse(_exse_);

    }

    @Override
    public Object clone()
    {
        return new AExsmallerequalsExpressionoperator(
            cloneNode(this._exse_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExsmallerequalsExpressionoperator(this);
    }

    public TExse getExse()
    {
        return this._exse_;
    }

    public void setExse(TExse node)
    {
        if(this._exse_ != null)
        {
            this._exse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exse_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exse_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exse_ == child)
        {
            this._exse_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exse_ == oldChild)
        {
            setExse((TExse) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
