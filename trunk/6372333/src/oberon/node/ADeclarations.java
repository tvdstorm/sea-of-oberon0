/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.node;

import java.util.*;
import oberon.analysis.*;

@SuppressWarnings("nls")
public final class ADeclarations extends PDeclarations
{
    private PConstdecl _constdecl_;
    private PTypedecl _typedecl_;
    private PVardecl _vardecl_;
    private final LinkedList<PProceduredeclaration> _proceduredeclaration_ = new LinkedList<PProceduredeclaration>();

    public ADeclarations()
    {
        // Constructor
    }

    public ADeclarations(
        @SuppressWarnings("hiding") PConstdecl _constdecl_,
        @SuppressWarnings("hiding") PTypedecl _typedecl_,
        @SuppressWarnings("hiding") PVardecl _vardecl_,
        @SuppressWarnings("hiding") List<PProceduredeclaration> _proceduredeclaration_)
    {
        // Constructor
        setConstdecl(_constdecl_);

        setTypedecl(_typedecl_);

        setVardecl(_vardecl_);

        setProceduredeclaration(_proceduredeclaration_);

    }

    @Override
    public Object clone()
    {
        return new ADeclarations(
            cloneNode(this._constdecl_),
            cloneNode(this._typedecl_),
            cloneNode(this._vardecl_),
            cloneList(this._proceduredeclaration_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADeclarations(this);
    }

    public PConstdecl getConstdecl()
    {
        return this._constdecl_;
    }

    public void setConstdecl(PConstdecl node)
    {
        if(this._constdecl_ != null)
        {
            this._constdecl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._constdecl_ = node;
    }

    public PTypedecl getTypedecl()
    {
        return this._typedecl_;
    }

    public void setTypedecl(PTypedecl node)
    {
        if(this._typedecl_ != null)
        {
            this._typedecl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typedecl_ = node;
    }

    public PVardecl getVardecl()
    {
        return this._vardecl_;
    }

    public void setVardecl(PVardecl node)
    {
        if(this._vardecl_ != null)
        {
            this._vardecl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._vardecl_ = node;
    }

    public LinkedList<PProceduredeclaration> getProceduredeclaration()
    {
        return this._proceduredeclaration_;
    }

    public void setProceduredeclaration(List<PProceduredeclaration> list)
    {
        this._proceduredeclaration_.clear();
        this._proceduredeclaration_.addAll(list);
        for(PProceduredeclaration e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._constdecl_)
            + toString(this._typedecl_)
            + toString(this._vardecl_)
            + toString(this._proceduredeclaration_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._constdecl_ == child)
        {
            this._constdecl_ = null;
            return;
        }

        if(this._typedecl_ == child)
        {
            this._typedecl_ = null;
            return;
        }

        if(this._vardecl_ == child)
        {
            this._vardecl_ = null;
            return;
        }

        if(this._proceduredeclaration_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._constdecl_ == oldChild)
        {
            setConstdecl((PConstdecl) newChild);
            return;
        }

        if(this._typedecl_ == oldChild)
        {
            setTypedecl((PTypedecl) newChild);
            return;
        }

        if(this._vardecl_ == oldChild)
        {
            setVardecl((PVardecl) newChild);
            return;
        }

        for(ListIterator<PProceduredeclaration> i = this._proceduredeclaration_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PProceduredeclaration) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
