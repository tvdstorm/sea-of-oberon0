/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.node;

import java.util.*;
import oberon.analysis.*;

@SuppressWarnings("nls")
public final class AModule extends PModule
{
    private TIdentifier _name_;
    private PDeclarations _decl_;
    private final LinkedList<PStatement> _statements_ = new LinkedList<PStatement>();

    public AModule()
    {
        // Constructor
    }

    public AModule(
        @SuppressWarnings("hiding") TIdentifier _name_,
        @SuppressWarnings("hiding") PDeclarations _decl_,
        @SuppressWarnings("hiding") List<PStatement> _statements_)
    {
        // Constructor
        setName(_name_);

        setDecl(_decl_);

        setStatements(_statements_);

    }

    @Override
    public Object clone()
    {
        return new AModule(
            cloneNode(this._name_),
            cloneNode(this._decl_),
            cloneList(this._statements_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAModule(this);
    }

    public TIdentifier getName()
    {
        return this._name_;
    }

    public void setName(TIdentifier node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public PDeclarations getDecl()
    {
        return this._decl_;
    }

    public void setDecl(PDeclarations node)
    {
        if(this._decl_ != null)
        {
            this._decl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._decl_ = node;
    }

    public LinkedList<PStatement> getStatements()
    {
        return this._statements_;
    }

    public void setStatements(List<PStatement> list)
    {
        this._statements_.clear();
        this._statements_.addAll(list);
        for(PStatement e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._decl_)
            + toString(this._statements_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._decl_ == child)
        {
            this._decl_ = null;
            return;
        }

        if(this._statements_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TIdentifier) newChild);
            return;
        }

        if(this._decl_ == oldChild)
        {
            setDecl((PDeclarations) newChild);
            return;
        }

        for(ListIterator<PStatement> i = this._statements_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStatement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
