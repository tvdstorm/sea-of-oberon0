/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.node;

import oberon.analysis.*;

@SuppressWarnings("nls")
public final class AElse extends PElse
{
    private TElsetxt _elsetxt_;
    private PStatementsequence _statementsequence_;

    public AElse()
    {
        // Constructor
    }

    public AElse(
        @SuppressWarnings("hiding") TElsetxt _elsetxt_,
        @SuppressWarnings("hiding") PStatementsequence _statementsequence_)
    {
        // Constructor
        setElsetxt(_elsetxt_);

        setStatementsequence(_statementsequence_);

    }

    @Override
    public Object clone()
    {
        return new AElse(
            cloneNode(this._elsetxt_),
            cloneNode(this._statementsequence_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAElse(this);
    }

    public TElsetxt getElsetxt()
    {
        return this._elsetxt_;
    }

    public void setElsetxt(TElsetxt node)
    {
        if(this._elsetxt_ != null)
        {
            this._elsetxt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elsetxt_ = node;
    }

    public PStatementsequence getStatementsequence()
    {
        return this._statementsequence_;
    }

    public void setStatementsequence(PStatementsequence node)
    {
        if(this._statementsequence_ != null)
        {
            this._statementsequence_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementsequence_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._elsetxt_)
            + toString(this._statementsequence_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._elsetxt_ == child)
        {
            this._elsetxt_ = null;
            return;
        }

        if(this._statementsequence_ == child)
        {
            this._statementsequence_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._elsetxt_ == oldChild)
        {
            setElsetxt((TElsetxt) newChild);
            return;
        }

        if(this._statementsequence_ == oldChild)
        {
            setStatementsequence((PStatementsequence) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
