/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.node;

import java.util.*;
import oberon.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleexpressionevaluation extends PSimpleexpressionevaluation
{
    private PExpressionoperator _expressionoperator_;
    private final LinkedList<TSptxt> _sptxt_ = new LinkedList<TSptxt>();
    private PSimpleexpression _simpleexpression_;

    public ASimpleexpressionevaluation()
    {
        // Constructor
    }

    public ASimpleexpressionevaluation(
        @SuppressWarnings("hiding") PExpressionoperator _expressionoperator_,
        @SuppressWarnings("hiding") List<TSptxt> _sptxt_,
        @SuppressWarnings("hiding") PSimpleexpression _simpleexpression_)
    {
        // Constructor
        setExpressionoperator(_expressionoperator_);

        setSptxt(_sptxt_);

        setSimpleexpression(_simpleexpression_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleexpressionevaluation(
            cloneNode(this._expressionoperator_),
            cloneList(this._sptxt_),
            cloneNode(this._simpleexpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleexpressionevaluation(this);
    }

    public PExpressionoperator getExpressionoperator()
    {
        return this._expressionoperator_;
    }

    public void setExpressionoperator(PExpressionoperator node)
    {
        if(this._expressionoperator_ != null)
        {
            this._expressionoperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressionoperator_ = node;
    }

    public LinkedList<TSptxt> getSptxt()
    {
        return this._sptxt_;
    }

    public void setSptxt(List<TSptxt> list)
    {
        this._sptxt_.clear();
        this._sptxt_.addAll(list);
        for(TSptxt e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PSimpleexpression getSimpleexpression()
    {
        return this._simpleexpression_;
    }

    public void setSimpleexpression(PSimpleexpression node)
    {
        if(this._simpleexpression_ != null)
        {
            this._simpleexpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleexpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expressionoperator_)
            + toString(this._sptxt_)
            + toString(this._simpleexpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expressionoperator_ == child)
        {
            this._expressionoperator_ = null;
            return;
        }

        if(this._sptxt_.remove(child))
        {
            return;
        }

        if(this._simpleexpression_ == child)
        {
            this._simpleexpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expressionoperator_ == oldChild)
        {
            setExpressionoperator((PExpressionoperator) newChild);
            return;
        }

        for(ListIterator<TSptxt> i = this._sptxt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TSptxt) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._simpleexpression_ == oldChild)
        {
            setSimpleexpression((PSimpleexpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
