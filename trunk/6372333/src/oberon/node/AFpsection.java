/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.node;

import java.util.*;
import oberon.analysis.*;

@SuppressWarnings("nls")
public final class AFpsection extends PFpsection
{
    private TVartxt _callbyref_;
    private final LinkedList<TIdentifier> _paramnames_ = new LinkedList<TIdentifier>();
    private PType _type_;

    public AFpsection()
    {
        // Constructor
    }

    public AFpsection(
        @SuppressWarnings("hiding") TVartxt _callbyref_,
        @SuppressWarnings("hiding") List<TIdentifier> _paramnames_,
        @SuppressWarnings("hiding") PType _type_)
    {
        // Constructor
        setCallbyref(_callbyref_);

        setParamnames(_paramnames_);

        setType(_type_);

    }

    @Override
    public Object clone()
    {
        return new AFpsection(
            cloneNode(this._callbyref_),
            cloneList(this._paramnames_),
            cloneNode(this._type_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFpsection(this);
    }

    public TVartxt getCallbyref()
    {
        return this._callbyref_;
    }

    public void setCallbyref(TVartxt node)
    {
        if(this._callbyref_ != null)
        {
            this._callbyref_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._callbyref_ = node;
    }

    public LinkedList<TIdentifier> getParamnames()
    {
        return this._paramnames_;
    }

    public void setParamnames(List<TIdentifier> list)
    {
        this._paramnames_.clear();
        this._paramnames_.addAll(list);
        for(TIdentifier e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._callbyref_)
            + toString(this._paramnames_)
            + toString(this._type_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._callbyref_ == child)
        {
            this._callbyref_ = null;
            return;
        }

        if(this._paramnames_.remove(child))
        {
            return;
        }

        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._callbyref_ == oldChild)
        {
            setCallbyref((TVartxt) newChild);
            return;
        }

        for(ListIterator<TIdentifier> i = this._paramnames_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TIdentifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
