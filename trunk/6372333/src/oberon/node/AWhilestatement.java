/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.node;

import oberon.analysis.*;

@SuppressWarnings("nls")
public final class AWhilestatement extends PWhilestatement
{
    private TWhiletxt _whiletxt_;
    private PExpression _expression_;
    private TDotxt _dotxt_;
    private PStatementsequence _statementsequence_;
    private TEndtxt _endtxt_;

    public AWhilestatement()
    {
        // Constructor
    }

    public AWhilestatement(
        @SuppressWarnings("hiding") TWhiletxt _whiletxt_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TDotxt _dotxt_,
        @SuppressWarnings("hiding") PStatementsequence _statementsequence_,
        @SuppressWarnings("hiding") TEndtxt _endtxt_)
    {
        // Constructor
        setWhiletxt(_whiletxt_);

        setExpression(_expression_);

        setDotxt(_dotxt_);

        setStatementsequence(_statementsequence_);

        setEndtxt(_endtxt_);

    }

    @Override
    public Object clone()
    {
        return new AWhilestatement(
            cloneNode(this._whiletxt_),
            cloneNode(this._expression_),
            cloneNode(this._dotxt_),
            cloneNode(this._statementsequence_),
            cloneNode(this._endtxt_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWhilestatement(this);
    }

    public TWhiletxt getWhiletxt()
    {
        return this._whiletxt_;
    }

    public void setWhiletxt(TWhiletxt node)
    {
        if(this._whiletxt_ != null)
        {
            this._whiletxt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._whiletxt_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TDotxt getDotxt()
    {
        return this._dotxt_;
    }

    public void setDotxt(TDotxt node)
    {
        if(this._dotxt_ != null)
        {
            this._dotxt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dotxt_ = node;
    }

    public PStatementsequence getStatementsequence()
    {
        return this._statementsequence_;
    }

    public void setStatementsequence(PStatementsequence node)
    {
        if(this._statementsequence_ != null)
        {
            this._statementsequence_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementsequence_ = node;
    }

    public TEndtxt getEndtxt()
    {
        return this._endtxt_;
    }

    public void setEndtxt(TEndtxt node)
    {
        if(this._endtxt_ != null)
        {
            this._endtxt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endtxt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._whiletxt_)
            + toString(this._expression_)
            + toString(this._dotxt_)
            + toString(this._statementsequence_)
            + toString(this._endtxt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._whiletxt_ == child)
        {
            this._whiletxt_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._dotxt_ == child)
        {
            this._dotxt_ = null;
            return;
        }

        if(this._statementsequence_ == child)
        {
            this._statementsequence_ = null;
            return;
        }

        if(this._endtxt_ == child)
        {
            this._endtxt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._whiletxt_ == oldChild)
        {
            setWhiletxt((TWhiletxt) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._dotxt_ == oldChild)
        {
            setDotxt((TDotxt) newChild);
            return;
        }

        if(this._statementsequence_ == oldChild)
        {
            setStatementsequence((PStatementsequence) newChild);
            return;
        }

        if(this._endtxt_ == oldChild)
        {
            setEndtxt((TEndtxt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
