/* This file was generated by SableCC (http://www.sablecc.org/). */

package oberon.node;

import java.util.*;
import oberon.analysis.*;

@SuppressWarnings("nls")
public final class ATerm extends PTerm
{
    private PFactor _factor_;
    private final LinkedList<TSptxt> _sptxt_ = new LinkedList<TSptxt>();
    private final LinkedList<PAdditionaloperations> _additionaloperations_ = new LinkedList<PAdditionaloperations>();

    public ATerm()
    {
        // Constructor
    }

    public ATerm(
        @SuppressWarnings("hiding") PFactor _factor_,
        @SuppressWarnings("hiding") List<TSptxt> _sptxt_,
        @SuppressWarnings("hiding") List<PAdditionaloperations> _additionaloperations_)
    {
        // Constructor
        setFactor(_factor_);

        setSptxt(_sptxt_);

        setAdditionaloperations(_additionaloperations_);

    }

    @Override
    public Object clone()
    {
        return new ATerm(
            cloneNode(this._factor_),
            cloneList(this._sptxt_),
            cloneList(this._additionaloperations_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATerm(this);
    }

    public PFactor getFactor()
    {
        return this._factor_;
    }

    public void setFactor(PFactor node)
    {
        if(this._factor_ != null)
        {
            this._factor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._factor_ = node;
    }

    public LinkedList<TSptxt> getSptxt()
    {
        return this._sptxt_;
    }

    public void setSptxt(List<TSptxt> list)
    {
        this._sptxt_.clear();
        this._sptxt_.addAll(list);
        for(TSptxt e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PAdditionaloperations> getAdditionaloperations()
    {
        return this._additionaloperations_;
    }

    public void setAdditionaloperations(List<PAdditionaloperations> list)
    {
        this._additionaloperations_.clear();
        this._additionaloperations_.addAll(list);
        for(PAdditionaloperations e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._factor_)
            + toString(this._sptxt_)
            + toString(this._additionaloperations_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._factor_ == child)
        {
            this._factor_ = null;
            return;
        }

        if(this._sptxt_.remove(child))
        {
            return;
        }

        if(this._additionaloperations_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._factor_ == oldChild)
        {
            setFactor((PFactor) newChild);
            return;
        }

        for(ListIterator<TSptxt> i = this._sptxt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TSptxt) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PAdditionaloperations> i = this._additionaloperations_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAdditionaloperations) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
