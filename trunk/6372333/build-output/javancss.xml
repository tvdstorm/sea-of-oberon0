<?xml version="1.0"?>
<javancss>
  <date>2011-02-10</date>
  <time>23:25:46</time>
  <packages>
    <package>
      <name>oberon</name>
      <classes>9</classes>
      <functions>27</functions>
      <ncss>142</ncss>
      <javadocs>35</javadocs>
      <javadoc_lines>183</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>19</multi_comment_lines>
    </package>
    <package>
      <name>oberon.convert</name>
      <classes>25</classes>
      <functions>88</functions>
      <ncss>692</ncss>
      <javadocs>37</javadocs>
      <javadoc_lines>177</javadoc_lines>
      <single_comment_lines>8</single_comment_lines>
      <multi_comment_lines>174</multi_comment_lines>
    </package>
    <package>
      <name>oberon.data</name>
      <classes>11</classes>
      <functions>50</functions>
      <ncss>198</ncss>
      <javadocs>32</javadocs>
      <javadoc_lines>168</javadoc_lines>
      <single_comment_lines>7</single_comment_lines>
      <multi_comment_lines>93</multi_comment_lines>
    </package>
    <package>
      <name>oberon.exceptions</name>
      <classes>3</classes>
      <functions>3</functions>
      <ncss>15</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>9</multi_comment_lines>
    </package>
    <package>
      <name>oberon.expressions</name>
      <classes>21</classes>
      <functions>47</functions>
      <ncss>164</ncss>
      <javadocs>23</javadocs>
      <javadoc_lines>108</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>33</multi_comment_lines>
    </package>
    <package>
      <name>oberon.procedures</name>
      <classes>7</classes>
      <functions>19</functions>
      <ncss>109</ncss>
      <javadocs>20</javadocs>
      <javadoc_lines>100</javadoc_lines>
      <single_comment_lines>2</single_comment_lines>
      <multi_comment_lines>27</multi_comment_lines>
    </package>
    <package>
      <name>oberon.statement</name>
      <classes>7</classes>
      <functions>16</functions>
      <ncss>120</ncss>
      <javadocs>12</javadocs>
      <javadoc_lines>61</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>25</multi_comment_lines>
    </package>
    <package>
      <name>oberon.test</name>
      <classes>8</classes>
      <functions>33</functions>
      <ncss>319</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>6</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <total>
      <classes>91</classes>
      <functions>283</functions>
      <ncss>1759</ncss>
      <javadocs>159</javadocs>
      <javadoc_lines>797</javadoc_lines>
      <single_comment_lines>23</single_comment_lines>
      <multi_comment_lines>380</multi_comment_lines>
    </total>
    <table>
      <tr><td>Packages</td><td>Classes</td><td>Functions</td><td>NCSS</td><td>Javadocs</td><td>per</td></tr>
      <tr><td>8.00</td><td>91.00</td><td>283.00</td><td>1,759.00</td><td>159.00</td><td>Project</td></tr>
      <tr><td></td><td>11.38</td><td>35.38</td><td>219.88</td><td>19.88</td><td>Package</td></tr>
      <tr><td></td><td></td><td>3.11</td><td>19.33</td><td>1.75</td><td>Class</td></tr>
      <tr><td></td><td></td><td></td><td>6.22</td><td>0.56</td><td>Function</td></tr>
    </table>
  </packages>

  <objects>
    <object>
      <name>oberon.IDataType</name>
      <ncss>6</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>6</javadocs>
    </object>
    <object>
      <name>oberon.IDeclaration</name>
      <ncss>3</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.IExpression</name>
      <ncss>4</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>oberon.IIdentifier</name>
      <ncss>3</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.IProcedure</name>
      <ncss>3</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.IStatement</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.Main</name>
      <ncss>24</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.Scope</name>
      <ncss>43</ncss>
      <functions>8</functions>
      <classes>0</classes>
      <javadocs>9</javadocs>
    </object>
    <object>
      <name>oberon.StatementSequence</name>
      <ncss>8</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.convert.AbstractConverter</name>
      <ncss>4</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.convert.AssignmentConverter</name>
      <ncss>12</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.convert.ComparisonExpressionConverter</name>
      <ncss>35</ncss>
      <functions>9</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.convert.DeclarationsConverter</name>
      <ncss>18</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.convert.ExpConverterFactory</name>
      <ncss>35</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>7</javadocs>
    </object>
    <object>
      <name>oberon.convert.ExpIntegerConverter</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.convert.FpSectionConverter</name>
      <ncss>21</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.convert.IfStatementConverter</name>
      <ncss>18</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.convert.MathematicalExpressionConverter</name>
      <ncss>26</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.convert.ModuleConverter</name>
      <ncss>19</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.convert.ParenExpConverter</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.convert.ProcedureBodyConverter</name>
      <ncss>10</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.convert.ProcedureHeadingConverter</name>
      <ncss>15</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.convert.ReadProcConverter</name>
      <ncss>23</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.convert.RecordTypeConverter</name>
      <ncss>23</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.convert.SelectorConverter</name>
      <ncss>17</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.convert.SelectorExpConverter</name>
      <ncss>8</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.convert.StatementConverterFactory</name>
      <ncss>29</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>oberon.convert.StatementSequenceConverter</name>
      <ncss>7</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.convert.StatprocStatementConverter</name>
      <ncss>11</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.convert.StatwithStatementConverter</name>
      <ncss>10</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.convert.TypeConverter</name>
      <ncss>21</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.convert.VariableConverter</name>
      <ncss>26</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.convert.WriteLnProcConverter</name>
      <ncss>16</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.convert.WriteProcConverter</name>
      <ncss>22</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.data.AbstractDataType</name>
      <ncss>12</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.data.AbstractIdentifier</name>
      <ncss>3</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.data.ArrayIndexerIdentifier</name>
      <ncss>15</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.data.ExpressionDataType</name>
      <ncss>9</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.data.IntegerArrayDataType</name>
      <ncss>21</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>6</javadocs>
    </object>
    <object>
      <name>oberon.data.IntegerArrayIndexerDataType</name>
      <ncss>17</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.data.RecordDataType</name>
      <ncss>20</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>oberon.data.RecordIndexerDataType</name>
      <ncss>20</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.data.RecordIndexerIdentifier</name>
      <ncss>12</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.data.VariableDataType</name>
      <ncss>15</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.data.VariableIdentifier</name>
      <ncss>9</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.exceptions.ProcedureNotFoundInScopeException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.exceptions.ProcedureParamaterCountMismatchException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.exceptions.VariableNotFoundInScopeException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.expressions.AbstractExpression</name>
      <ncss>22</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.expressions.AbstractLeftAndRightExpression</name>
      <ncss>14</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>6</javadocs>
    </object>
    <object>
      <name>oberon.expressions.AddOperator</name>
      <ncss>4</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.expressions.AndOperator</name>
      <ncss>4</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.expressions.ComparisonExpression</name>
      <ncss>9</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.expressions.DivOperator</name>
      <ncss>4</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.expressions.EqualsOperator</name>
      <ncss>4</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.expressions.GreaterEqualsOperator</name>
      <ncss>4</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.expressions.GreaterThanOperator</name>
      <ncss>4</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.expressions.IComparisonOperator</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.expressions.IMathematicalOperator</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.expressions.IdentifierExpression</name>
      <ncss>10</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.expressions.IntegerExpression</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.expressions.MathematicalExpression</name>
      <ncss>9</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.expressions.ModOperator</name>
      <ncss>4</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.expressions.MulOperator</name>
      <ncss>4</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.expressions.NotEqualsOperator</name>
      <ncss>4</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.expressions.ParenthesesExpression</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.expressions.SmallerEqualsOperator</name>
      <ncss>4</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.expressions.SmallerThanOperator</name>
      <ncss>4</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.expressions.SubOperator</name>
      <ncss>4</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.procedures.AbstractProcedure</name>
      <ncss>15</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>oberon.procedures.Declaration</name>
      <ncss>13</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>oberon.procedures.FormalParamSection</name>
      <ncss>14</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>oberon.procedures.FormalParamType</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.procedures.ProcedureBody</name>
      <ncss>9</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.procedures.ProcedureHeading</name>
      <ncss>16</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>3</javadocs>
    </object>
    <object>
      <name>oberon.procedures.SystemMethodCall</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.statement.AssignmentStatement</name>
      <ncss>9</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.statement.IfStatement</name>
      <ncss>23</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>4</javadocs>
    </object>
    <object>
      <name>oberon.statement.ProcedurecallStatement</name>
      <ncss>9</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.statement.ReadProcStatement</name>
      <ncss>13</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.statement.WhileStatement</name>
      <ncss>9</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>2</javadocs>
    </object>
    <object>
      <name>oberon.statement.WriteLnProcStatement</name>
      <ncss>3</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>oberon.statement.WriteProcStatement</name>
      <ncss>7</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.test.AbstractTest</name>
      <ncss>25</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.test.ComparisonExpressionTest</name>
      <ncss>50</ncss>
      <functions>9</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.test.IfTest</name>
      <ncss>33</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.test.MathematicalExpressionTest</name>
      <ncss>39</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.test.PrintLexer</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.test.RecordTest</name>
      <ncss>7</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.test.VariableManagerTest</name>
      <ncss>23</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon.test.WhileTest</name>
      <ncss>15</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <averages>
      <ncss>12.86</ncss>
      <functions>3.11</functions>
      <classes>0.00</classes>
      <javadocs>1.75</javadocs>
    </averages>
    <ncss>1,759.00</ncss>
  </objects>

  <functions>
    <function>
      <name>oberon.IDataType.getValue(Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IDataType.performDeepCopy(String)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IDataType.performShallowCopy(String)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IDataType.getName()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IDataType.setValue(int)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IDeclaration.getVariables()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IDeclaration.getProcedures()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IExpression.evalAsInt(Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IExpression.evalAsBoolean(Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IExpression.copy(Scope,String,boolean)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IIdentifier.getDataTypeValue(Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IIdentifier.getValue(Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IProcedure.getName()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IProcedure.call(Scope,IExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.IStatement.eval(Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.Main.main(String[])</name>
      <ncss>10</ncss>
      <ccn>3</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.Main.runParser(Lexer)</name>
      <ncss>13</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.Scope.Scope()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.Scope.Scope(IDataType,IProcedure,IProcedure)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.Scope.addSystemProcedure(IProcedure)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.Scope.createNewScope(IDataType,IProcedure)</name>
      <ncss>7</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.Scope.addNewDeclaration(IDeclaration)</name>
      <ncss>7</ncss>
      <ccn>4</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.Scope.addProcedure(IProcedure)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.Scope.getProcedure(String)</name>
      <ncss>9</ncss>
      <ccn>5</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.Scope.getVariable(String)</name>
      <ncss>4</ncss>
      <ccn>4</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.StatementSequence.StatementSequence(IStatement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.StatementSequence.eval(Scope)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.convert.AbstractConverter.getInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.convert.AbstractConverter.buildInterpreterResult()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.convert.AssignmentConverter.caseAStatassStatement(AStatassStatement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.AssignmentConverter.caseAAssignment(AAssignment)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.AssignmentConverter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ComparisonExpressionConverter.caseAExeqExp(AExeqExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ComparisonExpressionConverter.caseAExhaExp(AExhaExp)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ComparisonExpressionConverter.caseAAmpExp(AAmpExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ComparisonExpressionConverter.caseAExgeExp(AExgeExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ComparisonExpressionConverter.caseAExgtExp(AExgtExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ComparisonExpressionConverter.caseATilExp(ATilExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ComparisonExpressionConverter.caseAExstExp(AExstExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ComparisonExpressionConverter.caseAExseExp(AExseExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ComparisonExpressionConverter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.DeclarationsConverter.caseADeclarations(ADeclarations)</name>
      <ncss>13</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.DeclarationsConverter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ExpConverterFactory.ExpConverterFactory()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.convert.ExpConverterFactory.getInterpreter(TNode)</name>
      <ncss>8</ncss>
      <ccn>3</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.convert.ExpConverterFactory.tryGetComparisonExpression(PExp)</name>
      <ncss>5</ncss>
      <ccn>10</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.convert.ExpConverterFactory.tryGetMathematicalExpression(PExp)</name>
      <ncss>5</ncss>
      <ccn>7</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.convert.ExpConverterFactory.tryGetOtherExpression(PExp)</name>
      <ncss>11</ncss>
      <ccn>4</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.convert.ExpConverterFactory.getExpression(TNode)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.convert.ExpIntegerConverter.caseAIntegerExp(AIntegerExp)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ExpIntegerConverter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.FpSectionConverter.FpSectionConverter(PFpsection)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.convert.FpSectionConverter.caseAFpsection(AFpsection)</name>
      <ncss>13</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.FpSectionConverter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.IfStatementConverter.caseAStatifStatement(AStatifStatement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.IfStatementConverter.caseAIfstatement(AIfstatement)</name>
      <ncss>9</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.IfStatementConverter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.MathematicalExpressionConverter.caseASubExp(ASubExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.MathematicalExpressionConverter.caseAAddExp(AAddExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.MathematicalExpressionConverter.caseADivExp(ADivExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.MathematicalExpressionConverter.caseAModExp(AModExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.MathematicalExpressionConverter.caseAMulExp(AMulExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.MathematicalExpressionConverter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ModuleConverter.caseAModule(AModule)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ModuleConverter.buildInterpreterResult()</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ModuleConverter.getSystemProcedures()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.convert.ModuleConverter.addSystemProcedures(IProcedure)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.convert.ParenExpConverter.caseAParenExp(AParenExp)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ParenExpConverter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ProcedureBodyConverter.caseAProcedurebody(AProcedurebody)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ProcedureBodyConverter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ProcedureHeadingConverter.caseAProceduredeclaration(AProceduredeclaration)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ProcedureHeadingConverter.caseAProcedureheading(AProcedureheading)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ProcedureHeadingConverter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ReadProcConverter.caseAReadproc(AReadproc)</name>
      <ncss>16</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ReadProcConverter.caseAReadprocStatement(AReadprocStatement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.ReadProcConverter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.RecordTypeConverter.RecordTypeConverter(String,RecordTypeConverter)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.RecordTypeConverter.caseAFieldlst(AFieldlst)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.RecordTypeConverter.caseAFieldlist(AFieldlist)</name>
      <ncss>7</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.RecordTypeConverter.caseARecordType(ARecordType)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.RecordTypeConverter.buildInterpreterResult()</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.SelectorConverter.caseAIdentifierSelector(AIdentifierSelector)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.SelectorConverter.caseARecordSelector(ARecordSelector)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.SelectorConverter.caseAArrayexpressionSelector(AArrayexpressionSelector)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.SelectorConverter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.SelectorExpConverter.caseASelectorExp(ASelectorExp)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.SelectorExpConverter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.StatementConverterFactory.StatementConverterFactory()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.convert.StatementConverterFactory.getInterpreter(TNode)</name>
      <ncss>23</ncss>
      <ccn>8</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.convert.StatementConverterFactory.getStatement(TNode)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.convert.StatementSequenceConverter.StatementSequenceConverter()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.convert.StatementSequenceConverter.getStatementList(PStatement)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.convert.StatprocStatementConverter.caseAStatprocStatement(AStatprocStatement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.StatprocStatementConverter.caseAProcedurecall(AProcedurecall)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.StatprocStatementConverter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.StatwithStatementConverter.caseAStatwhileStatement(AStatwhileStatement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.StatwithStatementConverter.caseAWhilestatement(AWhilestatement)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.StatwithStatementConverter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.TypeConverter.TypeConverter(String,RecordTypeConverter)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.TypeConverter.caseAArrayType(AArrayType)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.TypeConverter.caseARecordType(ARecordType)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.TypeConverter.caseAIdentifierType(AIdentifierType)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.TypeConverter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.VariableConverter.caseAVardecl(AVardecl)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.VariableConverter.caseAVardeclaration(AVardeclaration)</name>
      <ncss>7</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.VariableConverter.caseAConstdecl(AConstdecl)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.VariableConverter.caseAConstdeclaration(AConstdeclaration)</name>
      <ncss>9</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.VariableConverter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.WriteLnProcConverter.caseAWritelnproc(AWritelnproc)</name>
      <ncss>10</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.WriteLnProcConverter.caseAWritelnprocStatement(AWritelnprocStatement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.WriteLnProcConverter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.WriteProcConverter.caseAWriteproc(AWriteproc)</name>
      <ncss>16</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.WriteProcConverter.caseAWriteprocStatement(AWriteprocStatement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.convert.WriteProcConverter.buildInterpreterResult()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractDataType.AbstractDataType(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractDataType.getValue(Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractDataType.performDeepCopy(String)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractDataType.performShallowCopy(String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractDataType.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractDataType.setValue(int)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractIdentifier.getDataTypeValue(Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.AbstractIdentifier.getValue(Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.ArrayIndexerIdentifier.ArrayIndexerIdentifier(IIdentifier,IExpression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.ArrayIndexerIdentifier.getDataTypeAsArrayType(Scope)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.ArrayIndexerIdentifier.getValue(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.ArrayIndexerIdentifier.getDataTypeValue(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.ExpressionDataType.ExpressionDataType(String,IExpression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.ExpressionDataType.getValue(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.ExpressionDataType.performDeepCopy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayDataType.IntegerArrayDataType(String,IExpression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayDataType.IntegerArrayDataType(String,String[],IExpression)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayDataType.getValueAtIndex(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayDataType.initializeArray(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayDataType.getValue(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayDataType.setValueAtIndex(int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayDataType.performDeepCopy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayIndexerDataType.IntegerArrayIndexerDataType(IntegerArrayDataType,int)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayIndexerDataType.IntegerArrayIndexerDataType(String,IntegerArrayDataType,int)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayIndexerDataType.getValue(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayIndexerDataType.performDeepCopy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.IntegerArrayIndexerDataType.setValue(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordDataType.RecordDataType(String,IDataType)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordDataType.RecordDataType(String,IDataType)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordDataType.getValueAtIndex(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordDataType.getValue(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordDataType.performDeepCopy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordDataType.setValueAtIndex(String,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordIndexerDataType.RecordIndexerDataType(String,RecordDataType,String)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordIndexerDataType.RecordIndexerDataType(RecordDataType,String)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordIndexerDataType.getValue(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordIndexerDataType.setValue(int)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordIndexerDataType.performDeepCopy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordIndexerIdentifier.RecordIndexerIdentifier(IIdentifier,String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordIndexerIdentifier.getDataTypeAsRecordDataType(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordIndexerIdentifier.getValue(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.RecordIndexerIdentifier.getDataTypeValue(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableDataType.VariableDataType(String,Boolean)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableDataType.VariableDataType(String,int,Boolean)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableDataType.getValue(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableDataType.performDeepCopy(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableDataType.setValue(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableIdentifier.VariableIdentifier(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableIdentifier.getValue(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.data.VariableIdentifier.getDataTypeValue(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.exceptions.ProcedureNotFoundInScopeException.ProcedureNotFoundInScopeException(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.exceptions.ProcedureParamaterCountMismatchException.ProcedureParamaterCountMismatchException(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.exceptions.VariableNotFoundInScopeException.VariableNotFoundInScopeException(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AbstractExpression.evalAsInt(Scope)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AbstractExpression.evalAsBoolean(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AbstractExpression.booleanAsInt(Boolean)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AbstractExpression.copy(Scope,String,boolean)</name>
      <ncss>13</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AbstractLeftAndRightExpression.AbstractLeftAndRightExpression(IExpression,IExpression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AbstractLeftAndRightExpression.setRighthandSide(IExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AbstractLeftAndRightExpression.getRighthandSide()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AbstractLeftAndRightExpression.setLefthandSide(IExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AbstractLeftAndRightExpression.getLefthandSide()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AddOperator.AddOperator()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AddOperator.eval(int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AndOperator.AndOperator()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.AndOperator.eval(int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.ComparisonExpression.ComparisonExpression(IExpression,IExpression,IComparisonOperator)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.ComparisonExpression.evalAsInt(Scope)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.DivOperator.DivOperator()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.DivOperator.eval(int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.EqualsOperator.EqualsOperator()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.EqualsOperator.eval(int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.GreaterEqualsOperator.GreaterEqualsOperator()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.GreaterEqualsOperator.eval(int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.GreaterThanOperator.GreaterThanOperator()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.GreaterThanOperator.eval(int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.IComparisonOperator.eval(int,int)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.IMathematicalOperator.eval(int,int)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.IdentifierExpression.IdentifierExpression(IIdentifier)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.IdentifierExpression.performShallowCopy(Scope,String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.IdentifierExpression.evalAsInt(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.IdentifierExpression.performDeepCopy(Scope,String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.IntegerExpression.IntegerExpression(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.IntegerExpression.evalAsInt(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.MathematicalExpression.MathematicalExpression(IExpression,IExpression,IMathematicalOperator)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.MathematicalExpression.evalAsInt(Scope)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.ModOperator.ModOperator()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.ModOperator.eval(int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.MulOperator.MulOperator()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.MulOperator.eval(int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.NotEqualsOperator.NotEqualsOperator()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.NotEqualsOperator.eval(int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.ParenthesesExpression.ParenthesesExpression(IExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.expressions.ParenthesesExpression.evalAsInt(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.SmallerEqualsOperator.SmallerEqualsOperator()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.SmallerEqualsOperator.eval(int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.SmallerThanOperator.SmallerThanOperator()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.SmallerThanOperator.eval(int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.SubOperator.SubOperator()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.expressions.SubOperator.eval(int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.procedures.AbstractProcedure.AbstractProcedure(String,FormalParamSection,ProcedureBody)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.AbstractProcedure.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.procedures.AbstractProcedure.getParamSections()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.AbstractProcedure.getBody()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.AbstractProcedure.call(Scope,IExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.procedures.Declaration.Declaration(IDataType,IProcedure)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.Declaration.getVariables()</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.Declaration.getProcedures()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.FormalParamSection.FormalParamSection(String,FormalParamType,Boolean)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.FormalParamSection.getNames()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.FormalParamSection.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.FormalParamSection.shouldBeCalledByRef()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.procedures.ProcedureBody.ProcedureBody(Declaration,StatementSequence)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.ProcedureBody.eval(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.ProcedureHeading.ProcedureHeading(String,FormalParamSection,ProcedureBody)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.ProcedureHeading.call(Scope,IExpression)</name>
      <ncss>10</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.procedures.ProcedureHeading.getScope()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.SystemMethodCall.SystemMethodCall(String,FormalParamSection,ProcedureBody)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.procedures.SystemMethodCall.call(Scope,IExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.statement.AssignmentStatement.AssignmentStatement(IIdentifier,IExpression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.statement.AssignmentStatement.eval(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.statement.IfStatement.IfStatement(IExpression,StatementSequence,IfStatement,StatementSequence)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.statement.IfStatement.eval(Scope)</name>
      <ncss>9</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.statement.IfStatement.evalStatements(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.statement.IfStatement.conditionIsTrue(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.statement.ProcedurecallStatement.ProcedurecallStatement(String,IExpression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.statement.ProcedurecallStatement.eval(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.statement.ReadProcStatement.ReadProcStatement(IIdentifier)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.statement.ReadProcStatement.eval(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.statement.ReadProcStatement.readInputFromConsole()</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.statement.WhileStatement.WhileStatement(IExpression,StatementSequence)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>oberon.statement.WhileStatement.eval(Scope)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.statement.WriteLnProcStatement.eval(Scope)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.statement.WriteProcStatement.WriteProcStatement(IIdentifier)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.statement.WriteProcStatement.eval(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.AbstractTest.loadDeclaration(Scope)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.AbstractTest.addVariableToDeclaration(VariableDataType)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.AbstractTest.getNewMathematicalExpression(String,int,IMathematicalOperator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.AbstractTest.getNewComparisonExpression(String,int,IComparisonOperator)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.AbstractTest.getAssignmentStatement(String,IExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.AbstractTest.enterNewEmptyScope(Scope)</name>
      <ncss>11</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.ComparisonExpressionTest.test_case_AmpExpressionTest()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.ComparisonExpressionTest.test_case_ExeqExpressionTest()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.ComparisonExpressionTest.test_case_ExgeExpressionTest()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.ComparisonExpressionTest.test_case_ExgtExpressionTest()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.ComparisonExpressionTest.test_case_ExseExpressionTest()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.ComparisonExpressionTest.test_case_ExstExpressionTest()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.ComparisonExpressionTest.test_case_TilExpressionTest()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.ComparisonExpressionTest.testComparisonExpression(int,int,IComparisonOperator)</name>
      <ncss>9</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.ComparisonExpressionTest.test_case_ComplexExpressionTest()</name>
      <ncss>12</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.IfTest.test_case_IfTestWithValidIfCondition()</name>
      <ncss>8</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.IfTest.test_case_IfTestWithValidElseIfCondition()</name>
      <ncss>8</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.IfTest.test_case_IfTestWithElse()</name>
      <ncss>8</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.IfTest.test_case_IfTestWithNestedIfs()</name>
      <ncss>8</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.MathematicalExpressionTest.test_case_MulExpressionTest()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.MathematicalExpressionTest.test_case_SubExpressionTest()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.MathematicalExpressionTest.test_case_AddExpressionTest()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.MathematicalExpressionTest.test_case_DivExpressionTest()</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.MathematicalExpressionTest.test_case_ModExpressionTest()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.MathematicalExpressionTest.testMathematicalExpression(int,int,IMathematicalOperator)</name>
      <ncss>9</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.MathematicalExpressionTest.test_case_ComplexExpressionTest()</name>
      <ncss>12</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.PrintLexer.PrintLexer(PushbackReader)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.PrintLexer.filter()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.RecordTest.test_case_RecordTypeTest()</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.VariableManagerTest.test_case_VariableManagerAddVariableToScopeAndRetrieve()</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.VariableManagerTest.test_case_VariableManagerAddVariableToScopeAndRetrieveAfterEnteringNewScope()</name>
      <ncss>16</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.WhileTest.test_case_WhileTestWithValidCondition()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon.test.WhileTest.test_case_WhileTestWithImmediatelyTrueCondition()</name>
      <ncss>7</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function_averages>
      <ncss>3.47</ncss>
      <ccn>1.30</ccn>
      <javadocs>0.35</javadocs>
    </function_averages>
    <ncss>1,759.00</ncss>
  </functions>
</javancss>
