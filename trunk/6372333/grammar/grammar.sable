Package oberon;
Helpers 
    /* Our helpers */
    all = [0 .. 0xFFFF]; 
	lowercase = ['a' .. 'z'];
	uppercase = ['A' .. 'Z'];
	number = ['0' .. '9'];
    sp = ' ' ; 
    nl = 10 ;
    
   	cr = 13;
	lf = 10;
	next_line = 0x85;
	line_separator = 0x2028;
	paragraph_separator = 0x2029;
	horizontal_tab = 9;
	newline = cr | lf | cr lf | next_line | line_separator | paragraph_separator;
    
    plus = '+' sp*;
    min = '-' sp*;   
     
    ortxt = 'OR' sp*;
    
    letter = lowercase | uppercase; 
  
Tokens 
    /* Our simple token definition(s). */
    dot = '.';  
    l_bkt = '[' sp*;
	l_brc = '{' sp*;
	l_par = '(' sp*;
	r_bkt = ']' sp*;
	r_brc = '}' sp*;
	r_par = ')' sp*;
	til = '~';
        
    exeq = '=' sp*;
    exha = '#' sp*;
    exst = '<' sp*;
    exse = '<=' sp*;
    exgt = '>' sp*;
    exge = '>=' sp*;
	
	comma = ',' sp*;
	colon = ':' sp*;
	
	ass = ':=' sp*;  
    semi = ';' sp* nl?;
        
    moduletxt = 'MODULE' sp*;
    consttxt = 'CONST' sp*;
    typetxt = 'TYPE' sp*;
    vartxt = 'VAR' sp*;
    begintxt = 'BEGIN' sp*;
    endtxt = 'END' sp*;
    recordtxt = 'RECORD' sp*;
    arraytxt = 'ARRAY' sp*;
    oftxt = 'OF' sp*;
    whiletxt = 'WHILE' sp*;
    dotxt = 'DO' sp*;
    iftxt = 'IF' sp*;
    thentxt = 'THEN' sp*;
    elsiftxt = 'ELSIF' sp*;
    elsetxt = 'ELSE' sp*;
    proceduretxt = 'PROCEDURE' sp*;
    sptxt = sp;
		
	add = '+' sp*;
    sub = '-' sp*;   
	mul = '*' sp*;
    mod = 'MOD' sp*;
    amp = '&' sp*;
    div = 'DIV' sp*;
 	
    integer = number+ sp*;
    identifier = letter (letter | number)* sp*;
    
    blank_newline = newline* sp*;
    blank_whitespace = sp*;
    tab = horizontal_tab;
    
Ignored Tokens  
	blank_newline, blank_whitespace, tab;  
    
Productions 
    module {-> module}
    	=	{withstat} moduletxt [beginid]:identifier semi declarations begintxt sptxt* statements endtxt [endid]:identifier dot
    	{-> New module(beginid, declarations, [statements.statement])}
    	|	{nostat} moduletxt [beginid]:identifier semi declarations endtxt [endid]:identifier dot
    	{-> New module(beginid, declarations, [])};
    
    declarations {-> declarations}
     	= 	constdecl? typedecl? vardecl? proceduredeclaration*
     	{-> New declarations(constdecl, typedecl, vardecl, [proceduredeclaration])}
     	;
   	
   	statements {-> statement*} =
      {statement}   statement {-> [statement] }
    | {more}		statements semi statement {-> [statements.statement, statement] }
  	;
	statement {-> statement}= 
    	{statass} assignment |
    	{statproc} procedurecall | 
    	{statif} ifstatement |
    	{statwhile} whilestatement;
    
    constdeclarations {-> constdeclaration*} =
      {constdeclaration}   	constdeclaration {-> [constdeclaration] }
    | {more}				constdeclarations semi constdeclaration {-> [constdeclarations.constdeclaration, constdeclaration] }
  	;
	constdecl {-> constdecl} = 
		consttxt constdeclaration* {-> New constdecl([constdeclaration])};
    constdeclaration {-> constdeclaration} = 
    	identifier exeq sptxt* exp semi {-> New constdeclaration(identifier, exp)};
    
    typedeclarations {-> typedeclaration*} =
      {typedeclaration}   	typedeclaration {-> [typedeclaration] }
    | {more}				typedeclarations semi typedeclaration {-> [typedeclarations.typedeclaration, typedeclaration] }
  	;
	typedecl {-> typedecl} = 
		typetxt typedeclaration* {-> New typedecl([typedeclaration])};
    typedeclaration {-> typedeclaration} = 
    	identifier exeq sptxt* type semi {-> New typedeclaration(identifier, type)};
    
	vardeclarations {-> vardeclaration*} =
      {vardeclaration}   	vardeclaration {-> [vardeclaration] }
    | {more}				vardeclarations semi vardeclaration {-> [vardeclarations.vardeclaration, vardeclaration] }
  	;
	vardecl {-> vardecl} = 
		vartxt vardeclaration* {-> New vardecl([vardeclaration])};
    vardeclaration {-> vardeclaration} = 
    	identifiers colon type semi {-> New vardeclaration([identifiers.identifier], type)};
    
   	assignment {-> assignment} = 
   		selector ass exp {-> New assignment(selector, exp)};

	type {-> type}
    	= {array}	arraytxt exp oftxt type {-> New type.array(exp, type)}
    	| {record}	recordtxt fieldlsts endtxt {-> New type.record([fieldlsts.fieldlst])}
    	| {identifier} 	identifier
    	;	
    	
	identifiers {-> identifier*} =
      {identifier}   	identifier {-> [identifier] }
    | {more}			identifiers comma identifier {-> [identifiers.identifier, identifier] }
  	;

	proceduredeclaration {-> proceduredeclaration} = 
		procedureheading [beginsemi]:semi procedurebody identifier [endsemi]:semi 
		{-> New proceduredeclaration(procedureheading, procedurebody, identifier)};
  	procedurecall {-> procedurecall} = 
  		identifier actualparameters? {-> New procedurecall(identifier, [actualparameters.exp])}; 
    procedureheading {-> procedureheading} = 
    	proceduretxt identifier formalparameters? {-> New procedureheading(identifier, [formalparameters.fpsection])};
    procedurebody {-> procedurebody} 
    	= {withstat} declarations begintxt sptxt* statements endtxt {-> New procedurebody(declarations, [statements.statement])}
    	| {nostat} declarations endtxt {-> New procedurebody(declarations, [])}
    	; 
  	
	actualparameters {-> exp*} = 
		l_par exps r_par {-> [exps.exp]};
	
	formalparameters {-> fpsection*} = 
		l_par fpsections r_par {-> [fpsections.fpsection]};	
		
	fpsections {-> fpsection*} =
      {fpsection}   	fpsection {-> [fpsection] }
    | {more}			fpsections semi fpsection {-> [fpsections.fpsection, fpsection] }
  	;
	fpsection {-> fpsection} = 
		vartxt? identifiers colon type {-> New fpsection(vartxt, [identifiers.identifier], type)};
	
    whilestatement {-> whilestatement} = 
    	whiletxt exp dotxt statements endtxt {-> New whilestatement(exp, [statements.statement])};
    	
    ifstatement {-> ifstatement} = 
    	iftxt exp thentxt statements elsif* else? endtxt {-> New ifstatement(exp, [statements.statement], [elsif.ifstatement], [else.statement])};
    
    elsif {-> ifstatement} = 
    	elsiftxt exp thentxt statements {-> New ifstatement(exp, [statements.statement], [], [])};
    
	else {-> statement*} = 
		elsetxt statements {-> [statements.statement]};
		
	fieldlst = fieldlist*;
	fieldlsts {-> fieldlst*} =
      {fieldlst}   	fieldlst {-> [fieldlst] }
    | {more}		fieldlsts semi fieldlst {-> [fieldlsts.fieldlst, fieldlst] }
  	;
  		
	fieldlist {-> fieldlist} = 
		identifiers colon type {-> New fieldlist([identifiers.identifier], type)}; 
	
	exps {-> exp*} =
      {exp}   	exp {-> [exp] }
    | {more}	exps comma exp {-> [exps.exp, exp] }
  	;	 
    exp {-> exp}
		= {add}		[left]:exp add [right]:factor			{-> New exp.add(left, right.exp)}
		| {sub}		[left]:exp sub [right]:factor 			{-> New exp.sub(left, right.exp)}
		| {exeq}	[left]:exp exeq [right]:factor 			{-> New exp.exeq(left, right.exp)}
    	| {exha}	[left]:exp exha [right]:factor 			{-> New exp.exha(left, right.exp)}
    	| {exst}	[left]:exp exst [right]:factor 			{-> New exp.exst(left, right.exp)}
    	| {exse}	[left]:exp exse [right]:factor 			{-> New exp.exse(left, right.exp)}
    	| {exgt}	[left]:exp exgt [right]:factor 			{-> New exp.exgt(left, right.exp)}
    	| {exge}	[left]:exp exge [right]:factor 			{-> New exp.exge(left, right.exp)}
		| {factor}	factor									{-> factor.exp}
		;
		
	factor {-> exp}
		= {mul}		[left]:factor mul [right]:unary			{-> New exp.mul(left.exp, right.exp)}
		| {div}		[left]:factor div [right]:unary			{-> New exp.div(left.exp, right.exp)}
		| {mod}		[left]:factor mod [right]:unary			{-> New exp.mod(left.exp, right.exp)}
		| {amp}		[left]:factor amp [right]:unary			{-> New exp.amp(left.exp, right.exp)}
		| {til}		[left]:factor til [right]:unary			{-> New exp.amp(left.exp, right.exp)}
		| {unary}	unary									{-> unary.exp}
		;
		
	unary {-> exp}
		= {integer}	integer									{-> New exp.integer(integer)}
		| {selector} selector								{-> New exp.selector(selector)}
		| {paren}	l_par exp r_par							{-> New exp.paren(exp)}
		;
	
	selector {-> selector} 
		= {recordselector} selector dot identifier		{-> New selector.record(selector, identifier)}
		| {identifier} identifier 						{-> New selector.identifier(identifier)}
		| {arrayexpression} selector l_bkt exp r_bkt 	{-> New selector.arrayexpression(selector, exp)}
		;
   		
Abstract Syntax Tree
    module = [name]:identifier [decl]:declarations [statements]:statement*;
    
    declarations = constdecl? typedecl? vardecl? proceduredeclaration*;
    
    constdecl = constdeclaration*;
    constdeclaration = identifier exp;
    
    typedecl = typedeclaration*;
    typedeclaration = identifier type;
    
    vardecl = vardeclaration*;
    vardeclaration = identifier* type;
    
    fieldlst = fieldlist*;
    fieldlist = identifier* type;
    
    assignment = selector exp;
    
    type 
    	= {array} exp type
    	| {record} fieldlst*
    	| {identifier} identifier;
    
    proceduredeclaration = procedureheading procedurebody identifier;
    procedurecall = identifier exp*;
    procedureheading = identifier [formalparams]:fpsection*;
    procedurebody = [declarations]:declarations [body]:statement*;
    
    fpsection = [callbyref]:vartxt? [paramnames]:identifier* [type]:type;
	
    whilestatement = [condition]:exp [body]:statement*;
    ifstatement = [condition]:exp [body]:statement* [elseifs]:ifstatement* [else]:statement*;
    
	exp
		= {add}			[left]:exp [right]:exp
		| {sub}			[left]:exp [right]:exp
		| {mul}			[left]:exp [right]:exp
		| {div}			[left]:exp [right]:exp
		| {mod}			[left]:exp [right]:exp
		| {amp}			[left]:exp [right]:exp
		| {til}			[left]:exp [right]:exp
		| {exeq}		[left]:exp [right]:exp
    	| {exha}		[left]:exp [right]:exp
    	| {exst}		[left]:exp [right]:exp
    	| {exse}		[left]:exp [right]:exp
    	| {exgt}		[left]:exp [right]:exp
    	| {exge}		[left]:exp [right]:exp
		| {paren}		exp
		| {integer}		integer
		| {selector}	selector
		;
	
	selector
		= {record} selector identifier
		| {identifier} identifier
		| {arrayexpression} selector exp
		;
    
    statement = 
    	{statass} assignment |
    	{statproc} procedurecall | 
    	{statif} ifstatement |
    	{statwhile} whilestatement;