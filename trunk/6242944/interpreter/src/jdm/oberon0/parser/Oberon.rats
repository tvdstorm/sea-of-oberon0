module Oberon;

header {
	import xtc.util.Action;
	import java.util.*;
	import jdm.oberon0.ast.*;
}

body {
	static {
		add(KEYWORDS, new String[] {
			"BEGIN", "END",
			"IF", "THEN", "ELSE", 
			"DO", "WHILE",
			"MODULE", "PROCEDURE",
			"VAR", "CONST", "TYPE",
			"ARRAY", "RECORD", "OF",
			"AND", "OR", "MOD", "DIV"
		});
	}
}

option 
	setOfString(KEYWORDS), 
	parser(jdm.oberon0.parser.OberonParser);

transient String Digit = [0-9];
transient String Letter = [A-Za-z];

transient void Space = ' ' / '\t' / '\f' / '\n' / '\r';
transient void Spacing = Space*;
transient void EndOfFile = !_;

String Word = Letter (Letter / Digit)*;
String Ident = yyValue:Word &{ !contains(KEYWORDS, yyValue) };

transient String IntString = Digit+;

IntegerLiteral Integer = i:IntString
	{ yyValue = new IntegerLiteral(new Integer(i)); }
	;

Identifier Identifier = ident:Ident Spacing
	{ yyValue = new Identifier(ident); }
	;

constant Action<Expression> SelectorTail =
	  "[" Spacing expr:Expression Spacing "]"
	  	{ yyValue = new Action<Expression>() {
            public Expression run(Expression base) {
            	return new ArraySelector(base, expr);
        	}};
        }
	/ "." Spacing expr:Ident Spacing
		{ yyValue = new Action<Expression>() {
            public Expression run(Expression base) {
            	return new RecordSelector(base, expr);
        	}};
        }	
    ;

Expression IdentifierSelector = 
	seed:Identifier actions:SelectorTail*
	{ yyValue = apply(actions, seed); }
	;

Expression Factor = 
 	  IdentifierSelector Spacing
 	/ "(" Spacing yyValue:Expression Spacing ")"
	/ Integer Spacing
	/ "~" Spacing f:Factor { yyValue = new NotExpression(f); }
	;

constant Action<Expression> FactorTail =
	Spacing op:("*" / "DIV" / "MOD" / "&") Spacing rhs:Factor
	{
      yyValue = new Action<Expression>() {
        public Expression run(Expression lhs) {
        	Expression result = null;
        	if (op.equals("*")) result = new MulExpression(lhs, rhs);
        	if (op.equals("DIV")) result = new DivExpression(lhs, rhs);
        	if (op.equals("MOD")) result = new ModExpression(lhs, rhs);
        	if (op.equals("&")) result = new AndExpression(lhs, rhs);
        	assert (result != null);
        	return result;
        }};
  	}
	;

Expression Term = 
	seed:Factor actions:FactorTail* 
	{ yyValue = apply(actions, seed); }
	;

constant Action<Expression> SimpleExpressionTail =
	Spacing op:("+" / "-" / "OR") Spacing rhs:Term 
	{
      yyValue = new Action<Expression>() {
        public Expression run(Expression lhs) {
        	Expression result = null;
        	if (op.equals("+")) result = new AddExpression(lhs, rhs);
        	if (op.equals("-")) result = new SubExpression(lhs, rhs);
        	if (op.equals("OR")) result = new OrExpression(lhs, rhs);
        	assert (result != null);
        	return result;
        }};
  	}
	;

Expression PosNegTerm =
	  "+" Spacing t:Term { yyValue = new PosExpression(t); }
	/ "-" Spacing t:Term { yyValue = new NegExpression(t); }
	/ Term
	;

Expression SimpleExpression =
	  seed:PosNegTerm actions:SimpleExpressionTail* 
	  { yyValue = apply(actions, seed); }
	/ PosNegTerm
	;

Expression Expression = 
	  Spacing lhs:SimpleExpression 
	  Spacing op:("=" / "#" / "<=" / ">=" / "<" / ">") Spacing 
	  rhs:SimpleExpression Spacing
		{ yyValue = null;
		  if ("=".equals(op)) yyValue = new EqExpression(lhs, rhs);
		  if ("#".equals(op)) yyValue = new NeExpression(lhs, rhs);
		  if ("<".equals(op)) yyValue = new LtExpression(lhs, rhs);
		  if (">".equals(op)) yyValue = new GtExpression(lhs, rhs);
		  if ("<=".equals(op)) yyValue = new LeExpression(lhs, rhs);
		  if (">=".equals(op)) yyValue = new GeExpression(lhs, rhs);		  
		  assert (yyValue != null);
		}
	/ SimpleExpression
	;
	
Statement Assignment = 
	lhs:IdentifierSelector Spacing ":=" Spacing rhs:Expression
	{ yyValue = new Assignment(lhs, rhs); }
	;

IdentifierType IdentifierType = 
	ident:Ident Spacing
	{ yyValue = new IdentifierType(ident); }
	;

Array ArrayType = 
	"ARRAY" Spacing 
	length:Expression Spacing 
	"OF" Spacing 
	type:Type
	{ yyValue = new Array(length, type); }
	;

HashMap<String, AbstractType> FieldList = 
	idents:IdentList ":" Spacing t:Type Spacing
	{
		yyValue = new HashMap<String, AbstractType>();
		for(String s : idents) {
			yyValue.put(s, t);
		}
	}
	;

Record RecordType =
	"RECORD" Spacing 
	l1:FieldList l2:(void:";" Spacing FieldList)* Spacing 
	"END" Spacing
	{ 
		for(HashMap<String, AbstractType> map : l2.list()) {
			l1.putAll(map);
		}
		yyValue = new Record(l1); 
	}
	;

AbstractType Type = ArrayType / RecordType / IdentifierType;

Pair<String> IdentList = 
	ident1:Ident Spacing 
	ident2:("," Spacing yyValue:Ident Spacing)*
	{ yyValue = new Pair<String>(ident1, ident2); }
	;

ConstDeclaration ConstDeclaration = 
	ident:Ident Spacing 
	"=" Spacing 
	expr:Expression ";" Spacing
	{ yyValue = new ConstDeclaration(ident, expr); }
	;

VarDeclaration VarDeclaration = 
	idents:IdentList Spacing 
	":" Spacing 
	type:Type Spacing
	";" Spacing
	{ yyValue = new VarDeclaration(idents.list(), type); }
	;

TypeDeclaration TypeDeclaration = 
	name:Ident Spacing 
	"=" Spacing
	type:Type Spacing
	";" Spacing
	{ yyValue = new TypeDeclaration(name, type); }
	;

Declarations Declarations = 
	consts:("CONST" Spacing yyValue:ConstDeclaration*)?
	types:("TYPE" Spacing yyValue:TypeDeclaration*)?
	vars:("VAR" Spacing yyValue:VarDeclaration*)?
	procs:(yyValue:ProcedureDeclaration ";" Spacing)*
	{
		List<Declaration> decls = new ArrayList<Declaration>();
		if (consts != null) consts.addTo(decls);
		if (types != null) types.addTo(decls);
		if (vars != null) vars.addTo(decls);
		if (procs != null) procs.addTo(decls);
		yyValue = new Declarations(decls); 
	}
	;

List<Parameter> FPSection = 
	var:"VAR"? Spacing 
	names:IdentList Spacing 
	":" Spacing 
	type:Type
	{
		yyValue = new ArrayList<Parameter>();
		boolean byRef = ("VAR".equals(var));
		for(int i=0; i<names.size(); i++) {
			yyValue.add(new Parameter(names.get(i), type, byRef));
		}
	}
	;

List<Parameter> FormalParameters = 
	  "(" Spacing ")" yyValue:null
	/ "(" Spacing args1:FPSection args2:(";" Spacing yyValue:FPSection)* ")"
	{ 	List<Parameter> params = new ArrayList<Parameter>();
		if (args1 != null) params.addAll(args1);
		if (args2 != null) {
			for(List<Parameter> l : args2.list())
				params.addAll(l);
		}
		yyValue = params;
	}
	;

Procedure ProcedureDeclaration = 
	"PROCEDURE" Spacing 
	name:Ident Spacing
	params:FormalParameters? Spacing 
	";" Spacing
	decl:Declarations Spacing
	stat:("BEGIN" Spacing yyValue:StatementSequence)? Spacing
	"END" Spacing 
	Ident Spacing
	{	if (params == null) params = new ArrayList<Parameter>();
		yyValue = new Procedure(name, params, decl, stat);  }
	;

public Pair<Expression> ActualParameters = 
	  "(" Spacing ")" yyValue:null
	/ "(" Spacing expr1:Expression Spacing expr2:("," Spacing yyValue:Expression)* ")"
	  { yyValue = new Pair<Expression>(expr1, expr2); }
	;

public ProcedureCall ProcedureCall = 
	name:Ident Spacing params:ActualParameters?
	{ 	yyValue = new ProcedureCall(name, params != null ? params.list() : null); }
	;

public Statement ElseTail = 
	  "ELSE" Spacing yyValue:StatementSequence
	/ "ELSIF" Spacing expr:Expression 
	  "THEN" Spacing stat1:StatementSequence
	  stat2:ElseTail? Spacing 
	  { yyValue = new IfStatement(expr, stat1, stat2); }
	;

public IfStatement IfStatement = 
	"IF" Spacing expr:Expression 
	"THEN" stat1:StatementSequence
	stat2:ElseTail?
	"END" Spacing
	{ yyValue = new IfStatement(expr, stat1, stat2); }
	;

public WhileStatement WhileStatement =
	"WHILE" Spacing expr:Expression Spacing
	"DO" stat:StatementSequence
	"END" Spacing
	{ yyValue = new WhileStatement(expr, stat); }
	;

public Statement Statement = 
	  Assignment 
	/ IfStatement 
	/ WhileStatement 
	/ ProcedureCall
	;

StatementSequence StatementSequence = 
	Spacing s1:Statement Spacing
	s2:(";" Spacing yyValue:Statement Spacing)*
	{ yyValue = new StatementSequence((new Pair<Statement>(s1, s2)).list()); }
	;

public Module Module = 
	Spacing "MODULE" Spacing ident:Ident Spacing ";" Spacing
	decl:Declarations
	stat:("BEGIN" yyValue:StatementSequence)?
	"END" Spacing Ident "." Spacing EndOfFile
	{  	if (stat == null) stat = new StatementSequence(new ArrayList<Statement>());
		yyValue = new Module(ident, decl, stat);  }
	;
