module eu.wietsevenema.lang.oberon.parser.Declaration(
	Symbol, Identifier, Expression, Statement);

import Symbol;
import Identifier;
import Expression;
import Statement;

Declarations Declarations = 
	cd:ConstantDecls? td:TypeDecls? vd:VarDecls? pds:(ProcedureDecl void:";":Symbol)*
	{
		yyValue = new Declarations( cd, td, vd, pds.list());
	}
	;
		
//FIXME  / RecordType.
VarType Type = 
	"BOOLEAN":Word 
	{
		yyValue = new BooleanType();
	}
  / "INTEGER":Word
	{
		yyValue = new IntegerType();
	}
  / yyValue:ArrayType
	;

VarType ArrayType = 
	"ARRAY":Word exp:EqualityExpression "OF":Word type:Type
	{
		yyValue = new ArrayType( exp, type);
	}
	;


List<ConstantDecl> ConstantDecls = 
	"CONST":Word cds:(ConstantDecl)+
	{
		yyValue = new ArrayList<ConstantDecl>(cds.list());
	}
	;

ConstantDecl ConstantDecl = 
	id:Identifier void:"=":Symbol exp:EqualityExpression void:";":Symbol 
	{
		yyValue = new ConstantDecl(id, exp);
	}
	;

List<TypeDecl> TypeDecls = 
	"TYPE":Word tds:(TypeDecl)+
	{
		yyValue = new ArrayList<TypeDecl>(tds.list());
	}
	;

TypeDecl TypeDecl =
	id:Identifier void:"=":Symbol type:Type void:";":Symbol 
	{
		yyValue = new TypeDecl(id, type);
	}
	;

List<VarDecl> VarDecls = 
	"VAR":Word vds:(VarDecl)+
	{
		yyValue = new ArrayList<VarDecl>(vds.list());
	}
	;

VarDecl VarDecl = 
	ids:IdentList void:":":Symbol type:Type void:";":Symbol
	{
		yyValue = new VarDecl(ids, type);
	}
	;


generic FPSection = 
	("VAR":Word)? IdentList void:":":Symbol Type
	;

List<Node> FormalParameters = 
	fp:FPSection fps:(void:";":Symbol FPSection )*
	{ 
		yyValue = new Pair<Node>(fp, fps).list(); 
	}
	;

//TODO valideer idstart == idend;
ProcedureDecl ProcedureDecl = 
	void:"PROCEDURE":Word idstart:Identifier 
	formals:( void:"(":Symbol (FormalParameters)? void:")":Symbol )? void:";":Symbol 
	decls:Declarations 
	stats:(void:"BEGIN":Word StatementSequence)? 
	void:"END":Word idend:Identifier  
	{
		yyValue = new ProcedureDecl(idstart, formals, decls, stats);
	}
	;


//TODO valideer idstart == idend;
Module Module = 
	void:"MODULE":Word idstart:Identifier void:";":Symbol 
	decls:Declarations 
	stats:( void:"BEGIN":Word StatementSequence)? 
	void:"END":Word idend:Identifier void:".":Symbol
	{
		yyValue = new Module(idstart, decls, stats );
	}
	;