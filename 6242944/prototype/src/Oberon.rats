module Oberon;

// NOTE: a mess, need to clean this up

transient String Digit = [0-9];
transient String Letter = [A-Za-z];

transient void Space = ' ' / '\t' / '\f' ;
transient void Spacing = Space*;
transient void EndOfFile = !_ ;

String Ident = Letter (Letter / Digit)*;

transient String IntString = Digit+;

ast.IntegerLiteral Integer = 
	i:IntString
	{ yyValue = new ast.IntegerLiteral(new Integer(i)); }
	;

ast.Expression Term = Integer Spacing;

ast.Expression BinaryExpression =
	//FIXME
	lhs:Term op:("+" / "-") rhs:Term
		{ if (op == "+") 
			yyValue = new ast.AddExpression(lhs, rhs);
		  else //FIXME
		  	yyValue = new ast.SubExpression(lhs, rhs);
		}
	/
	Term
	;

ast.Expression Expression = BinaryExpression;

ast.Statement Assignment = 
	lhs:Ident Spacing ":=" Spacing rhs:Expression
	{ yyValue = new ast.Assignment(lhs, rhs); }
	;

ast.Declaration Declaration = ProcedureDeclaration void:";";

Pair<ast.Declaration> Declarations = Declaration*;


ast.Procedure ProcedureDeclaration = 
	"PROCEDURE" Spacing name:Ident ";" 
	Spacing
	decl:Declarations
	Spacing
	stat:(void:"BEGIN" Spacing StatementSequence)? 
	Spacing
	"END" Spacing 
	Ident Spacing
	{	
		if (stat == null) 
			stat = Pair.EMPTY;
		yyValue = new ast.Procedure(name, stat.list());  }
	;

public Pair<ast.Expression> ActualParameters = 
	void:"(" expr1:Expression expr2:(void:"," Expression)* void:")"
	{ yyValue = new Pair<ast.Expression>(expr1, expr2); }
	;

public ast.ProcedureCall ProcedureCall = 
	name:Ident params:ActualParameters
	{ yyValue = new ast.ProcedureCall(name, params.list()); }
	;
	
public ast.Statement Statement = Assignment Spacing / ProcedureCall Spacing;

Pair<ast.Statement> StatementSequence = 
	void:Spacing
	s1:Statement
	s2:(void:Spacing void:";" void:Spacing Statement)*
	{ yyValue = new Pair(s1, s2); }
	;

public ast.Node Module = 
	Spacing 
	"MODULE" Spacing ident:Ident Spacing ";" 
	Spacing
	decl:Declarations
	stat:(void:"BEGIN" StatementSequence)?
	"END" void:Spacing void:Ident void:"."
	EndOfFile
	{  yyValue = new ast.Module(ident, decl.list(), stat.list());  }
	;

