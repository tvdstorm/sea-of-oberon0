<?xml version="1.0"?>
<javancss>
  <date>2011-01-31</date>
  <time>07:05:39</time>
  <packages>
    <package>
      <name>jdm.oberon0.ast</name>
      <classes>43</classes>
      <functions>142</functions>
      <ncss>405</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>jdm.oberon0.builtins</name>
      <classes>2</classes>
      <functions>2</functions>
      <ncss>21</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>4</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>jdm.oberon0.builtins.procedures</name>
      <classes>4</classes>
      <functions>8</functions>
      <ncss>56</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>jdm.oberon0.exceptions</name>
      <classes>11</classes>
      <functions>11</functions>
      <ncss>56</ncss>
      <javadocs>11</javadocs>
      <javadoc_lines>34</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>jdm.oberon0.interpreter</name>
      <classes>5</classes>
      <functions>71</functions>
      <ncss>267</ncss>
      <javadocs>13</javadocs>
      <javadoc_lines>41</javadoc_lines>
      <single_comment_lines>14</single_comment_lines>
      <multi_comment_lines>6</multi_comment_lines>
    </package>
    <package>
      <name>jdm.oberon0.main</name>
      <classes>1</classes>
      <functions>2</functions>
      <ncss>37</ncss>
      <javadocs>1</javadocs>
      <javadoc_lines>3</javadoc_lines>
      <single_comment_lines>1</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>jdm.oberon0.types</name>
      <classes>4</classes>
      <functions>9</functions>
      <ncss>40</ncss>
      <javadocs>1</javadocs>
      <javadoc_lines>4</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>4</multi_comment_lines>
    </package>
    <package>
      <name>jdm.oberon0.values</name>
      <classes>6</classes>
      <functions>52</functions>
      <ncss>194</ncss>
      <javadocs>2</javadocs>
      <javadoc_lines>7</javadoc_lines>
      <single_comment_lines>2</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <total>
      <classes>76</classes>
      <functions>297</functions>
      <ncss>1076</ncss>
      <javadocs>28</javadocs>
      <javadoc_lines>89</javadoc_lines>
      <single_comment_lines>21</single_comment_lines>
      <multi_comment_lines>10</multi_comment_lines>
    </total>
    <table>
      <tr><td>Packages</td><td>Classes</td><td>Functions</td><td>NCSS</td><td>Javadocs</td><td>per</td></tr>
      <tr><td>8.00</td><td>76.00</td><td>297.00</td><td>1,076.00</td><td>28.00</td><td>Project</td></tr>
      <tr><td></td><td>9.50</td><td>37.13</td><td>134.50</td><td>3.50</td><td>Package</td></tr>
      <tr><td></td><td></td><td>3.91</td><td>14.16</td><td>0.37</td><td>Class</td></tr>
      <tr><td></td><td></td><td></td><td>3.62</td><td>0.09</td><td>Function</td></tr>
    </table>
  </packages>

  <objects>
    <object>
      <name>jdm.oberon0.ast.AbstractType</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.AddExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.AndExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.Array</name>
      <ncss>10</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.ArraySelector</name>
      <ncss>12</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.Assignment</name>
      <ncss>12</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.BinaryExpression</name>
      <ncss>10</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.ConstDeclaration</name>
      <ncss>12</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.Declaration</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.Declarations</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.DivExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.EqExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.Expression</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.GeExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.GtExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.Identifier</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.IdentifierType</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.IfStatement</name>
      <ncss>16</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.IntegerLiteral</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.LeExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.LtExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.ModExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.Module</name>
      <ncss>16</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.MulExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.NeExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.NegExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.Node</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.NotExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.OrExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.Parameter</name>
      <ncss>14</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.PosExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.Procedure</name>
      <ncss>20</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.ProcedureCall</name>
      <ncss>16</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.Record</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.RecordSelector</name>
      <ncss>12</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.Statement</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.StatementSequence</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.SubExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.TypeDeclaration</name>
      <ncss>12</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.UnaryExpression</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.VarDeclaration</name>
      <ncss>12</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.Visitor</name>
      <ncss>32</ncss>
      <functions>31</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.WhileStatement</name>
      <ncss>12</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.builtins.BuiltinProcedure</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.builtins.Builtins</name>
      <ncss>12</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.builtins.procedures.AssertEqProcedure</name>
      <ncss>8</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.builtins.procedures.ReadProcedure</name>
      <ncss>15</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.builtins.procedures.WriteLnProcedure</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.builtins.procedures.WriteProcedure</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.AssertionFailureException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.DivisionByZeroException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.InputException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.InvalidArgumentCountException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.InvalidArgumentTypeException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.InvalidIndexException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.InvalidInputException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.InvalidTypeException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.RuntimeException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.UndefinedTypeException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.UndefinedVariableException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.interpreter.Callable</name>
      <ncss>3</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.interpreter.Context</name>
      <ncss>21</ncss>
      <functions>9</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.interpreter.Interpreter</name>
      <ncss>158</ncss>
      <functions>45</functions>
      <classes>0</classes>
      <javadocs>9</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.interpreter.Scope</name>
      <ncss>41</ncss>
      <functions>11</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.interpreter.ScriptedProcedure</name>
      <ncss>10</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.main.Main</name>
      <ncss>24</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.types.ArrayType</name>
      <ncss>17</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.types.PrimitiveType</name>
      <ncss>5</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.types.RecordType</name>
      <ncss>11</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.types.Type</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.values.ArrayValue</name>
      <ncss>36</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.values.BooleanValue</name>
      <ncss>18</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.values.IntegerValue</name>
      <ncss>29</ncss>
      <functions>8</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.values.RecordValue</name>
      <ncss>28</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.values.ReferenceValue</name>
      <ncss>35</ncss>
      <functions>13</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.values.Value</name>
      <ncss>25</ncss>
      <functions>10</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <averages>
      <ncss>11.97</ncss>
      <functions>3.91</functions>
      <classes>0.00</classes>
      <javadocs>0.37</javadocs>
    </averages>
    <ncss>1,076.00</ncss>
  </objects>

  <functions>
    <function>
      <name>jdm.oberon0.ast.AddExpression.AddExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.AddExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.AndExpression.AndExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.AndExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Array.Array(Expression,AbstractType)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Array.getSize()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Array.getElementType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.ArraySelector.ArraySelector(Expression,Expression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.ArraySelector.getBase()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.ArraySelector.getIndex()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.ArraySelector.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Assignment.Assignment(Expression,Expression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Assignment.getLhs()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Assignment.getRhs()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Assignment.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.BinaryExpression.BinaryExpression(Expression,Expression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.BinaryExpression.getLhs()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.BinaryExpression.getRhs()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.ConstDeclaration.ConstDeclaration(String,Expression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.ConstDeclaration.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.ConstDeclaration.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.ConstDeclaration.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Declaration.accept(T)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Declarations.Declarations(Declaration)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Declarations.getDeclarations()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Declarations.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.DivExpression.DivExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.DivExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.EqExpression.EqExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.EqExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Expression.accept(T)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.GeExpression.GeExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.GeExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.GtExpression.GtExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.GtExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Identifier.Identifier(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Identifier.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Identifier.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.IdentifierType.IdentifierType(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.IdentifierType.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.IfStatement.IfStatement(Expression,StatementSequence,Statement)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.IfStatement.getTest()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.IfStatement.getThen()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.IfStatement.getElse()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.IfStatement.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.IntegerLiteral.IntegerLiteral(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.IntegerLiteral.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.IntegerLiteral.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.LeExpression.LeExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.LeExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.LtExpression.LtExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.LtExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.ModExpression.ModExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.ModExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Module.Module(String,Declarations,StatementSequence)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Module.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Module.getDeclarations()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Module.getStatements()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Module.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.MulExpression.MulExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.MulExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.NeExpression.NeExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.NeExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.NegExpression.NegExpression(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.NegExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.NotExpression.NotExpression(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.NotExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.OrExpression.OrExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.OrExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Parameter.Parameter(String,AbstractType,boolean)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Parameter.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Parameter.isByRef()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Parameter.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.PosExpression.PosExpression(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.PosExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Procedure.Procedure(String,jdm.oberon0.ast.Parameter,Declarations,StatementSequence)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Procedure.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Procedure.getStatements()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Procedure.getDeclarations()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Procedure.getParameters()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Procedure.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.ProcedureCall.ProcedureCall(String,Expression)</name>
      <ncss>7</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.ProcedureCall.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.ProcedureCall.getArgs()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.ProcedureCall.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Record.Record(AbstractType)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Record.getFields()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.RecordSelector.RecordSelector(Expression,String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.RecordSelector.getBase()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.RecordSelector.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.RecordSelector.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Statement.accept(T)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.StatementSequence.StatementSequence(Statement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.StatementSequence.getStatements()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.StatementSequence.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.SubExpression.SubExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.SubExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.TypeDeclaration.TypeDeclaration(String,AbstractType)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.TypeDeclaration.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.TypeDeclaration.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.TypeDeclaration.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.UnaryExpression.UnaryExpression(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.UnaryExpression.getArgument()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.VarDeclaration.VarDeclaration(String,AbstractType)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.VarDeclaration.getNames()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.VarDeclaration.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.VarDeclaration.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitModule(Module)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitDeclarations(Declarations)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitConstDeclaration(ConstDeclaration)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitVarDeclaration(VarDeclaration)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitTypeDeclaration(TypeDeclaration)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitStatementSequence(StatementSequence)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitProcedure(Procedure)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitProcedureCall(ProcedureCall)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitIfStatement(IfStatement)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitWhileStatement(WhileStatement)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitAssignment(Assignment)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitArraySelector(ArraySelector)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitRecordSelector(RecordSelector)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitAddExpression(AddExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitSubExpression(SubExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitMulExpression(MulExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitDivExpression(DivExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitModExpression(ModExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitAndExpression(AndExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitOrExpression(OrExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitLtExpression(LtExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitGtExpression(GtExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitLeExpression(LeExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitGeExpression(GeExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitEqExpression(EqExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitNeExpression(NeExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitIntegerLiteral(IntegerLiteral)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitIdentifier(Identifier)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitNegExpression(NegExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitPosExpression(PosExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Visitor.visitNotExpression(NotExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.WhileStatement.WhileStatement(Expression,StatementSequence)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.WhileStatement.getTest()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.WhileStatement.getBody()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.WhileStatement.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.builtins.BuiltinProcedure.getArgumentCount()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.builtins.Builtins.initBuiltins(Context)</name>
      <ncss>11</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.builtins.procedures.AssertEqProcedure.execute(Context,Value[])</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.builtins.procedures.AssertEqProcedure.getArgumentCount()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.builtins.procedures.ReadProcedure.execute(Context,Value[])</name>
      <ncss>12</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.builtins.procedures.ReadProcedure.getArgumentCount()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.builtins.procedures.WriteLnProcedure.execute(Context,Value[])</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.builtins.procedures.WriteLnProcedure.getArgumentCount()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.builtins.procedures.WriteProcedure.execute(Context,Value[])</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.builtins.procedures.WriteProcedure.getArgumentCount()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.AssertionFailureException.AssertionFailureException(String,String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.DivisionByZeroException.DivisionByZeroException()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.InputException.InputException(IOException)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.InvalidArgumentCountException.InvalidArgumentCountException(int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.InvalidArgumentTypeException.InvalidArgumentTypeException(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.InvalidIndexException.InvalidIndexException(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.InvalidInputException.InvalidInputException(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.InvalidTypeException.InvalidTypeException(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.RuntimeException.RuntimeException(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.UndefinedTypeException.UndefinedTypeException(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.UndefinedVariableException.UndefinedVariableException(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Callable.getArgumentCount()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Callable.execute(Context,Value[])</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Context.Context()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Context.registerBuiltin(String,BuiltinProcedure)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Context.getScope()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Context.defineConstant(String,Value)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Context.executeProcedure(ScriptedProcedure,Value[])</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Context.pushScope()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Context.popScope()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Context.wrapBoolean(boolean)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Context.wrapInteger(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.Interpreter(Context)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.interpret(Module)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.interpret(ScriptedProcedure,Value[])</name>
      <ncss>18</ncss>
      <ccn>5</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.wrapBoolean(boolean)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.wrapInteger(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitModule(Module)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitIntegerLiteral(IntegerLiteral)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitProcedureCall(ProcedureCall)</name>
      <ncss>10</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitStatementSequence(StatementSequence)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitIfStatement(IfStatement)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitWhileStatement(WhileStatement)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitDeclarations(Declarations)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitConstDeclaration(ConstDeclaration)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitTypeDeclaration(TypeDeclaration)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitVarDeclaration(VarDeclaration)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitIdentifier(Identifier)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.getRuntimeType(AbstractType)</name>
      <ncss>17</ncss>
      <ccn>6</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitAssignment(Assignment)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitArraySelector(ArraySelector)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitRecordSelector(RecordSelector)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitProcedure(Procedure)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.eval(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.evalBoolean(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.evalInteger(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.evalRef(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.evalArray(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.evalRecord(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.execute(Statement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.execute(Declarations)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitGtExpression(GtExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitGeExpression(GeExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitLtExpression(LtExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitLeExpression(LeExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitEqExpression(EqExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitNeExpression(NeExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitAddExpression(AddExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitSubExpression(SubExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitMulExpression(MulExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitDivExpression(DivExpression)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitModExpression(ModExpression)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitAndExpression(AndExpression)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitOrExpression(OrExpression)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitNegExpression(NegExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitPosExpression(PosExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.visitNotExpression(NotExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.Scope()</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.Scope(Scope)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.defineConstant(String,Value)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.defineType(String,Type)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.defineVar(String,Value)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.lookupVarOrConst(String)</name>
      <ncss>6</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.defineProcedure(String,Callable)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.lookupProcedure(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.getParentScope()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.lookupType(String)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.isGlobalScope()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.ScriptedProcedure.ScriptedProcedure(Procedure)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.ScriptedProcedure.execute(Context,Value[])</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.ScriptedProcedure.getNode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.ScriptedProcedure.getArgumentCount()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.main.Main.main(String[])</name>
      <ncss>8</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.main.Main.run(Reader,String)</name>
      <ncss>15</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.types.ArrayType.ArrayType(Type,int)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.types.ArrayType.getElementType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.types.ArrayType.getSize()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.types.ArrayType.equals(Type)</name>
      <ncss>7</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.types.PrimitiveType.equals(Type)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.types.RecordType.RecordType(Type)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.types.RecordType.getFields()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.types.RecordType.equals(Type)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.types.Type.equals(Type)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ArrayValue.ArrayValue(ArrayType)</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ArrayValue.toNativeString()</name>
      <ncss>9</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ArrayValue.getValueAt(int)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ArrayValue.valueEquals(Value)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ArrayValue.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ArrayValue.toArray()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ArrayValue.clone()</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.BooleanValue.BooleanValue(boolean)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.BooleanValue.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.BooleanValue.toNativeString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.BooleanValue.valueEquals(Value)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.BooleanValue.toBoolean()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.BooleanValue.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.BooleanValue.clone()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.IntegerValue.IntegerValue(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.IntegerValue.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.IntegerValue.equals(Object)</name>
      <ncss>11</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.IntegerValue.toNativeString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.IntegerValue.toInteger()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.IntegerValue.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.IntegerValue.valueEquals(Value)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.IntegerValue.clone()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.RecordValue.RecordValue(RecordType)</name>
      <ncss>7</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.RecordValue.toNativeString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.RecordValue.valueEquals(Value)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.RecordValue.getFieldValue(String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.RecordValue.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.RecordValue.toRecord()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.RecordValue.clone()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.ReferenceValue(Value)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.getValue()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.setValue(Value)</name>
      <ncss>6</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.toNativeString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.valueEquals(Value)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.toInteger()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.toBoolean()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.toArray()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.toRecord()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.toReference()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.getRef(Value)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.clone()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.Value.clone()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.Value.getType()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.Value.toNativeString()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.Value.valueEquals(Value)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.Value.toInteger()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.Value.toBoolean()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.Value.toArray()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.Value.toRecord()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.Value.toReference()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.Value.fromType(Type)</name>
      <ncss>10</ncss>
      <ccn>10</ccn>
      <javadocs>0</javadocs>
    </function>
    <function_averages>
      <ncss>2.58</ncss>
      <ccn>1.31</ccn>
      <javadocs>0.03</javadocs>
    </function_averages>
    <ncss>1,076.00</ncss>
  </functions>
</javancss>
