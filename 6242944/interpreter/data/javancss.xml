<?xml version="1.0"?>
<javancss>
  <date>2011-02-05</date>
  <time>17:49:42</time>
  <packages>
    <package>
      <name>jdm.oberon0.ast</name>
      <classes>2</classes>
      <functions>4</functions>
      <ncss>19</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>jdm.oberon0.ast.declarations</name>
      <classes>8</classes>
      <functions>31</functions>
      <ncss>105</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>jdm.oberon0.ast.expressions</name>
      <classes>24</classes>
      <functions>72</functions>
      <ncss>184</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>jdm.oberon0.ast.statements</name>
      <classes>7</classes>
      <functions>26</functions>
      <ncss>86</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>jdm.oberon0.ast.types</name>
      <classes>5</classes>
      <functions>14</functions>
      <ncss>42</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>jdm.oberon0.builtins</name>
      <classes>2</classes>
      <functions>2</functions>
      <ncss>21</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>4</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>jdm.oberon0.builtins.procedures</name>
      <classes>4</classes>
      <functions>8</functions>
      <ncss>56</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>jdm.oberon0.exceptions</name>
      <classes>11</classes>
      <functions>11</functions>
      <ncss>56</ncss>
      <javadocs>11</javadocs>
      <javadoc_lines>34</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>jdm.oberon0.interpreter</name>
      <classes>6</classes>
      <functions>28</functions>
      <ncss>140</ncss>
      <javadocs>4</javadocs>
      <javadoc_lines>13</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>jdm.oberon0.interpreter.eval</name>
      <classes>5</classes>
      <functions>49</functions>
      <ncss>220</ncss>
      <javadocs>6</javadocs>
      <javadoc_lines>18</javadoc_lines>
      <single_comment_lines>14</single_comment_lines>
      <multi_comment_lines>6</multi_comment_lines>
    </package>
    <package>
      <name>jdm.oberon0.main</name>
      <classes>1</classes>
      <functions>1</functions>
      <ncss>14</ncss>
      <javadocs>1</javadocs>
      <javadoc_lines>3</javadoc_lines>
      <single_comment_lines>1</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>jdm.oberon0.types</name>
      <classes>4</classes>
      <functions>9</functions>
      <ncss>40</ncss>
      <javadocs>1</javadocs>
      <javadoc_lines>4</javadoc_lines>
      <single_comment_lines>0</single_comment_lines>
      <multi_comment_lines>4</multi_comment_lines>
    </package>
    <package>
      <name>jdm.oberon0.values</name>
      <classes>6</classes>
      <functions>51</functions>
      <ncss>185</ncss>
      <javadocs>2</javadocs>
      <javadoc_lines>7</javadoc_lines>
      <single_comment_lines>2</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <total>
      <classes>85</classes>
      <functions>306</functions>
      <ncss>1168</ncss>
      <javadocs>25</javadocs>
      <javadoc_lines>79</javadoc_lines>
      <single_comment_lines>21</single_comment_lines>
      <multi_comment_lines>10</multi_comment_lines>
    </total>
    <table>
      <tr><td>Packages</td><td>Classes</td><td>Functions</td><td>NCSS</td><td>Javadocs</td><td>per</td></tr>
      <tr><td>13.00</td><td>85.00</td><td>306.00</td><td>1,168.00</td><td>25.00</td><td>Project</td></tr>
      <tr><td></td><td>6.54</td><td>23.54</td><td>89.85</td><td>1.92</td><td>Package</td></tr>
      <tr><td></td><td></td><td>3.60</td><td>13.74</td><td>0.29</td><td>Class</td></tr>
      <tr><td></td><td></td><td></td><td>3.82</td><td>0.08</td><td>Function</td></tr>
    </table>
  </packages>

  <objects>
    <object>
      <name>jdm.oberon0.ast.declarations.ConstDeclaration</name>
      <ncss>12</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.declarations.Declaration</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.declarations.Declarations</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.declarations.DeclarationVisitor</name>
      <ncss>6</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.declarations.Parameter</name>
      <ncss>14</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.declarations.Procedure</name>
      <ncss>20</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.declarations.TypeDeclaration</name>
      <ncss>12</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.declarations.VarDeclaration</name>
      <ncss>12</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.AddExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.AndExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.ArraySelector</name>
      <ncss>12</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.BinaryExpression</name>
      <ncss>10</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.DivExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.EqExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.Expression</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor</name>
      <ncss>21</ncss>
      <functions>20</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.GeExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.GtExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.Identifier</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.IntegerLiteral</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.LeExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.LtExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.ModExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.MulExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.NeExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.NegExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.NotExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.OrExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.PosExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.RecordSelector</name>
      <ncss>12</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.SubExpression</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.expressions.UnaryExpression</name>
      <ncss>6</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.Module</name>
      <ncss>14</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.Node</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.statements.Assignment</name>
      <ncss>12</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.statements.IfStatement</name>
      <ncss>16</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.statements.ProcedureCall</name>
      <ncss>16</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.statements.Statement</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.statements.StatementSequence</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.statements.StatementVisitor</name>
      <ncss>6</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.statements.WhileStatement</name>
      <ncss>12</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.types.ArrayType</name>
      <ncss>12</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.types.IdentifierType</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.types.RecordType</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.types.Type</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.ast.types.TypeVisitor</name>
      <ncss>4</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.builtins.BuiltinProcedure</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.builtins.Builtins</name>
      <ncss>12</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.builtins.procedures.AssertEqProcedure</name>
      <ncss>8</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.builtins.procedures.ReadProcedure</name>
      <ncss>15</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.builtins.procedures.WriteLnProcedure</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.builtins.procedures.WriteProcedure</name>
      <ncss>5</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.AssertionFailureException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.DivisionByZeroException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.InputException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.InvalidArgumentCountException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.InvalidArgumentTypeException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.InvalidIndexException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.InvalidInputException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.InvalidTypeException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.RuntimeException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.UndefinedTypeException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.exceptions.UndefinedVariableException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.interpreter.Callable</name>
      <ncss>3</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.interpreter.Context</name>
      <ncss>21</ncss>
      <functions>9</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.interpreter.eval.DeclarationEvaluator</name>
      <ncss>26</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.interpreter.eval.Evaluator</name>
      <ncss>30</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator</name>
      <ncss>72</ncss>
      <functions>29</functions>
      <classes>0</classes>
      <javadocs>5</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.interpreter.eval.StatementEvaluator</name>
      <ncss>32</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.interpreter.eval.TypeEvaluator</name>
      <ncss>19</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.interpreter.Interpreter</name>
      <ncss>16</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.interpreter.Scope</name>
      <ncss>41</ncss>
      <functions>11</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.interpreter.ScriptedProcedure</name>
      <ncss>10</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.interpreter.ValueConstructor</name>
      <ncss>11</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.main.Main</name>
      <ncss>9</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.types.ArrayType</name>
      <ncss>17</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.types.PrimitiveType</name>
      <ncss>5</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.types.RecordType</name>
      <ncss>11</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.types.Type</name>
      <ncss>2</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.values.ArrayValue</name>
      <ncss>36</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.values.BooleanValue</name>
      <ncss>18</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.values.IntegerValue</name>
      <ncss>29</ncss>
      <functions>8</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.values.RecordValue</name>
      <ncss>30</ncss>
      <functions>7</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.values.ReferenceValue</name>
      <ncss>35</ncss>
      <functions>13</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <object>
      <name>jdm.oberon0.values.Value</name>
      <ncss>15</ncss>
      <functions>9</functions>
      <classes>0</classes>
      <javadocs>1</javadocs>
    </object>
    <averages>
      <ncss>11.12</ncss>
      <functions>3.60</functions>
      <classes>0.00</classes>
      <javadocs>0.29</javadocs>
    </averages>
    <ncss>1,168.00</ncss>
  </objects>

  <functions>
    <function>
      <name>jdm.oberon0.ast.declarations.ConstDeclaration.ConstDeclaration(String,Expression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.ConstDeclaration.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.ConstDeclaration.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.ConstDeclaration.accept(DeclarationVisitor)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.Declaration.accept(DeclarationVisitor)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.Declarations.Declarations(Declaration)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.Declarations.getDeclarations()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.Declarations.accept(DeclarationVisitor)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.DeclarationVisitor.visitDeclarations(Declarations)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.DeclarationVisitor.visitConstDeclaration(ConstDeclaration)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.DeclarationVisitor.visitVarDeclaration(VarDeclaration)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.DeclarationVisitor.visitTypeDeclaration(TypeDeclaration)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.DeclarationVisitor.visitProcedure(Procedure)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.Parameter.Parameter(String,Type,boolean)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.Parameter.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.Parameter.isByRef()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.Parameter.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.Procedure.Procedure(String,jdm.oberon0.ast.declarations.Parameter,Declarations,StatementSequence)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.Procedure.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.Procedure.getStatements()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.Procedure.getDeclarations()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.Procedure.getParameters()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.Procedure.accept(DeclarationVisitor)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.TypeDeclaration.TypeDeclaration(String,Type)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.TypeDeclaration.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.TypeDeclaration.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.TypeDeclaration.accept(DeclarationVisitor)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.VarDeclaration.VarDeclaration(String,Type)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.VarDeclaration.getNames()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.VarDeclaration.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.declarations.VarDeclaration.accept(DeclarationVisitor)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.AddExpression.AddExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.AddExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.AndExpression.AndExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.AndExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ArraySelector.ArraySelector(Expression,Expression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ArraySelector.getBase()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ArraySelector.getIndex()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ArraySelector.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.BinaryExpression.BinaryExpression(Expression,Expression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.BinaryExpression.getLhs()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.BinaryExpression.getRhs()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.DivExpression.DivExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.DivExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.EqExpression.EqExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.EqExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.Expression.accept(T)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor.visitArraySelector(ArraySelector)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor.visitRecordSelector(RecordSelector)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor.visitAddExpression(AddExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor.visitSubExpression(SubExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor.visitMulExpression(MulExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor.visitDivExpression(DivExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor.visitModExpression(ModExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor.visitAndExpression(AndExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor.visitOrExpression(OrExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor.visitLtExpression(LtExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor.visitGtExpression(GtExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor.visitLeExpression(LeExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor.visitGeExpression(GeExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor.visitEqExpression(EqExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor.visitNeExpression(NeExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor.visitIntegerLiteral(IntegerLiteral)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor.visitIdentifier(Identifier)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor.visitNegExpression(NegExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor.visitPosExpression(PosExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ExpressionVisitor.visitNotExpression(NotExpression)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.GeExpression.GeExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.GeExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.GtExpression.GtExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.GtExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.Identifier.Identifier(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.Identifier.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.Identifier.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.IntegerLiteral.IntegerLiteral(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.IntegerLiteral.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.IntegerLiteral.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.LeExpression.LeExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.LeExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.LtExpression.LtExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.LtExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ModExpression.ModExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.ModExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.MulExpression.MulExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.MulExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.NeExpression.NeExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.NeExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.NegExpression.NegExpression(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.NegExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.NotExpression.NotExpression(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.NotExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.OrExpression.OrExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.OrExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.PosExpression.PosExpression(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.PosExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.RecordSelector.RecordSelector(Expression,String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.RecordSelector.getBase()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.RecordSelector.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.RecordSelector.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.SubExpression.SubExpression(Expression,Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.SubExpression.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.UnaryExpression.UnaryExpression(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.expressions.UnaryExpression.getArgument()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Module.Module(String,Declarations,StatementSequence)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Module.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Module.getDeclarations()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.Module.getStatements()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.Assignment.Assignment(Expression,Expression)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.Assignment.getLhs()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.Assignment.getRhs()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.Assignment.accept(StatementVisitor)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.IfStatement.IfStatement(Expression,StatementSequence,Statement)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.IfStatement.getTest()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.IfStatement.getThen()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.IfStatement.getElse()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.IfStatement.accept(StatementVisitor)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.ProcedureCall.ProcedureCall(String,Expression)</name>
      <ncss>7</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.ProcedureCall.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.ProcedureCall.getArgs()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.ProcedureCall.accept(StatementVisitor)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.Statement.accept(StatementVisitor)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.StatementSequence.StatementSequence(Statement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.StatementSequence.getStatements()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.StatementSequence.accept(StatementVisitor)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.StatementVisitor.visitStatementSequence(StatementSequence)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.StatementVisitor.visitAssignment(Assignment)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.StatementVisitor.visitProcedureCall(ProcedureCall)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.StatementVisitor.visitIfStatement(IfStatement)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.StatementVisitor.visitWhileStatement(WhileStatement)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.WhileStatement.WhileStatement(Expression,StatementSequence)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.WhileStatement.getTest()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.WhileStatement.getBody()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.statements.WhileStatement.accept(StatementVisitor)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.types.ArrayType.ArrayType(Expression,Type)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.types.ArrayType.getSize()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.types.ArrayType.getElementType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.types.ArrayType.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.types.IdentifierType.IdentifierType(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.types.IdentifierType.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.types.IdentifierType.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.types.RecordType.RecordType(Type)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.types.RecordType.getFields()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.types.RecordType.accept(T)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.types.Type.accept(T)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.types.TypeVisitor.visitIdentifierType(IdentifierType)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.types.TypeVisitor.visitArray(ArrayType)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.ast.types.TypeVisitor.visitRecord(RecordType)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.builtins.BuiltinProcedure.getArgumentCount()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.builtins.Builtins.initBuiltins(Context)</name>
      <ncss>11</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.builtins.procedures.AssertEqProcedure.execute(Context,Value[])</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.builtins.procedures.AssertEqProcedure.getArgumentCount()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.builtins.procedures.ReadProcedure.execute(Context,Value[])</name>
      <ncss>12</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.builtins.procedures.ReadProcedure.getArgumentCount()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.builtins.procedures.WriteLnProcedure.execute(Context,Value[])</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.builtins.procedures.WriteLnProcedure.getArgumentCount()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.builtins.procedures.WriteProcedure.execute(Context,Value[])</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.builtins.procedures.WriteProcedure.getArgumentCount()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.AssertionFailureException.AssertionFailureException(String,String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.DivisionByZeroException.DivisionByZeroException()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.InputException.InputException(IOException)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.InvalidArgumentCountException.InvalidArgumentCountException(int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.InvalidArgumentTypeException.InvalidArgumentTypeException(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.InvalidIndexException.InvalidIndexException(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.InvalidInputException.InvalidInputException(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.InvalidTypeException.InvalidTypeException(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.RuntimeException.RuntimeException(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.UndefinedTypeException.UndefinedTypeException(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.exceptions.UndefinedVariableException.UndefinedVariableException(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Callable.getArgumentCount()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Callable.execute(Context,Value[])</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Context.Context()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Context.registerBuiltin(String,BuiltinProcedure)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Context.getScope()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Context.defineConstant(String,Value)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Context.executeProcedure(ScriptedProcedure,Value[])</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Context.pushScope()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Context.popScope()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Context.wrapBoolean(boolean)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Context.wrapInteger(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.DeclarationEvaluator.DeclarationEvaluator(Context)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.DeclarationEvaluator.visitDeclarations(Declarations)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.DeclarationEvaluator.visitConstDeclaration(ConstDeclaration)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.DeclarationEvaluator.visitTypeDeclaration(TypeDeclaration)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.DeclarationEvaluator.visitVarDeclaration(VarDeclaration)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.DeclarationEvaluator.visitProcedure(Procedure)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.Evaluator.Evaluator(Context)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.Evaluator.evaluate(Module)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.Evaluator.evaluate(ScriptedProcedure,Value[])</name>
      <ncss>19</ncss>
      <ccn>5</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.ExpressionEvaluator(Context)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.eval(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.evalBoolean(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.evalInteger(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.evalRef(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.evalArray(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.evalRecord(Expression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>1</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.visitIdentifier(Identifier)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.visitArraySelector(ArraySelector)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.visitRecordSelector(RecordSelector)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.visitIntegerLiteral(IntegerLiteral)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.wrapBoolean(boolean)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.wrapInteger(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.visitGtExpression(GtExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.visitGeExpression(GeExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.visitLtExpression(LtExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.visitLeExpression(LeExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.visitEqExpression(EqExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.visitNeExpression(NeExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.visitAddExpression(AddExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.visitSubExpression(SubExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.visitMulExpression(MulExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.visitDivExpression(DivExpression)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.visitModExpression(ModExpression)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.visitAndExpression(AndExpression)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.visitOrExpression(OrExpression)</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.visitNegExpression(NegExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.visitPosExpression(PosExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.ExpressionEvaluator.visitNotExpression(NotExpression)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.StatementEvaluator.StatementEvaluator(Context)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.StatementEvaluator.visitProcedureCall(ProcedureCall)</name>
      <ncss>10</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.StatementEvaluator.visitStatementSequence(StatementSequence)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.StatementEvaluator.visitIfStatement(IfStatement)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.StatementEvaluator.visitWhileStatement(WhileStatement)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.StatementEvaluator.visitAssignment(Assignment)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.StatementEvaluator.execute(Statement)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.TypeEvaluator.TypeEvaluator(Context)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.TypeEvaluator.visitIdentifierType(IdentifierType)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.TypeEvaluator.visitArray(jdm.oberon0.ast.types.ArrayType)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.eval.TypeEvaluator.visitRecord(jdm.oberon0.ast.types.RecordType)</name>
      <ncss>7</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Interpreter.run(Reader,String)</name>
      <ncss>15</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.Scope()</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.Scope(Scope)</name>
      <ncss>6</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.defineConstant(String,Value)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.defineType(String,Type)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.defineVar(String,Value)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.lookupVarOrConst(String)</name>
      <ncss>6</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.defineProcedure(String,Callable)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.lookupProcedure(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.getParentScope()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.lookupType(String)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.Scope.isGlobalScope()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.ScriptedProcedure.ScriptedProcedure(Procedure)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.ScriptedProcedure.execute(Context,Value[])</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.ScriptedProcedure.getNode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.ScriptedProcedure.getArgumentCount()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.interpreter.ValueConstructor.fromType(Type)</name>
      <ncss>10</ncss>
      <ccn>10</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.main.Main.main(String[])</name>
      <ncss>8</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.types.ArrayType.ArrayType(Type,int)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.types.ArrayType.getElementType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.types.ArrayType.getSize()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.types.ArrayType.equals(Type)</name>
      <ncss>7</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.types.PrimitiveType.equals(Type)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.types.RecordType.RecordType(Type)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.types.RecordType.getFields()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.types.RecordType.equals(Type)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.types.Type.equals(Type)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ArrayValue.ArrayValue(ArrayType)</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ArrayValue.toNativeString()</name>
      <ncss>9</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ArrayValue.getValueAt(int)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ArrayValue.valueEquals(Value)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ArrayValue.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ArrayValue.toArray()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ArrayValue.clone()</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.BooleanValue.BooleanValue(boolean)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.BooleanValue.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.BooleanValue.toNativeString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.BooleanValue.valueEquals(Value)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.BooleanValue.toBoolean()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.BooleanValue.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.BooleanValue.clone()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.IntegerValue.IntegerValue(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.IntegerValue.getValue()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.IntegerValue.equals(Object)</name>
      <ncss>11</ncss>
      <ccn>9</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.IntegerValue.toNativeString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.IntegerValue.toInteger()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.IntegerValue.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.IntegerValue.valueEquals(Value)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.IntegerValue.clone()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.RecordValue.RecordValue(RecordType)</name>
      <ncss>9</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.RecordValue.toNativeString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.RecordValue.valueEquals(Value)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.RecordValue.getFieldValue(String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.RecordValue.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.RecordValue.toRecord()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.RecordValue.clone()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.ReferenceValue(Value)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.getValue()</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.setValue(Value)</name>
      <ncss>6</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.toNativeString()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.valueEquals(Value)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.toInteger()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.toBoolean()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.toArray()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.toRecord()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.toReference()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.getType()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.getRef(Value)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.ReferenceValue.clone()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.Value.clone()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.Value.getType()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.Value.toNativeString()</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.Value.valueEquals(Value)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.Value.toInteger()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.Value.toBoolean()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.Value.toArray()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.Value.toRecord()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>jdm.oberon0.values.Value.toReference()</name>
      <ncss>2</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function_averages>
      <ncss>2.55</ncss>
      <ccn>1.29</ccn>
      <javadocs>0.02</javadocs>
    </function_averages>
    <ncss>1,168.00</ncss>
  </functions>
</javancss>
