<?xml version="1.0"?>
<javancss>
  <date>2011-01-31</date>
  <time>17:41:07</time>
  <packages>
    <package>
      <name>ASTnodes</name>
      <classes>35</classes>
      <functions>124</functions>
      <ncss>944</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>65</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>management</name>
      <classes>9</classes>
      <functions>41</functions>
      <ncss>306</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>10</single_comment_lines>
      <multi_comment_lines>17</multi_comment_lines>
    </package>
    <package>
      <name>oberon0</name>
      <classes>4</classes>
      <functions>11</functions>
      <ncss>108</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>15</single_comment_lines>
      <multi_comment_lines>32</multi_comment_lines>
    </package>
    <package>
      <name>parseErrorLog</name>
      <classes>2</classes>
      <functions>4</functions>
      <ncss>26</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>1</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <package>
      <name>system</name>
      <classes>3</classes>
      <functions>9</functions>
      <ncss>52</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>2</single_comment_lines>
      <multi_comment_lines>0</multi_comment_lines>
    </package>
    <total>
      <classes>53</classes>
      <functions>189</functions>
      <ncss>1436</ncss>
      <javadocs>0</javadocs>
      <javadoc_lines>0</javadoc_lines>
      <single_comment_lines>93</single_comment_lines>
      <multi_comment_lines>49</multi_comment_lines>
    </total>
    <table>
      <tr><td>Packages</td><td>Classes</td><td>Functions</td><td>NCSS</td><td>Javadocs</td><td>per</td></tr>
      <tr><td>5.00</td><td>53.00</td><td>189.00</td><td>1,436.00</td><td>0.00</td><td>Project</td></tr>
      <tr><td></td><td>10.60</td><td>37.80</td><td>287.20</td><td>0.00</td><td>Package</td></tr>
      <tr><td></td><td></td><td>3.57</td><td>27.09</td><td>0.00</td><td>Class</td></tr>
      <tr><td></td><td></td><td></td><td>7.60</td><td>0.00</td><td>Function</td></tr>
    </table>
  </packages>

  <objects>
    <object>
      <name>ASTnodes.ASTnode</name>
      <ncss>3</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.ArrayNode</name>
      <ncss>35</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.AssignmentNode</name>
      <ncss>19</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.ConstantNode</name>
      <ncss>21</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.DeclarationsNode</name>
      <ncss>42</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.ElseStatementNode</name>
      <ncss>11</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.ExpressionNode</name>
      <ncss>46</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.FieldlistNode</name>
      <ncss>45</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.FieldsNode</name>
      <ncss>27</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.FormalParameterNode</name>
      <ncss>20</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.FpSectionNode</name>
      <ncss>57</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.IdentListNode</name>
      <ncss>38</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.IfStatementNode</name>
      <ncss>33</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.IntegerNode</name>
      <ncss>8</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.MinusNode</name>
      <ncss>10</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.ModuleNode</name>
      <ncss>24</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.NotNode</name>
      <ncss>12</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.ParamNode</name>
      <ncss>23</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.ProcedureBodyNode</name>
      <ncss>28</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.ProcedureCallNode</name>
      <ncss>30</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.ProcedureDeclarationNode</name>
      <ncss>23</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.ProcedureHeadingNode</name>
      <ncss>24</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.ProcedureListNode</name>
      <ncss>18</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.RecordNode</name>
      <ncss>15</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.SelectorArrayNode</name>
      <ncss>25</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.SelectorNode</name>
      <ncss>15</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.SelectorRecordNode</name>
      <ncss>22</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.SimpleExpression</name>
      <ncss>35</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.StatementNode</name>
      <ncss>1</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.StatementSequenceNode</name>
      <ncss>17</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.TermNode</name>
      <ncss>38</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.TypeDefNode</name>
      <ncss>22</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.TypeNode</name>
      <ncss>11</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.VarNode</name>
      <ncss>22</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>ASTnodes.WhileStatementNode</name>
      <ncss>23</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>management.Memory</name>
      <ncss>19</ncss>
      <functions>5</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>management.MemoryManager</name>
      <ncss>138</ncss>
      <functions>12</functions>
      <classes>1</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>management.MemoryManager.MemoryMap</name>
      <ncss>25</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>management.OberonSystemcalls</name>
      <ncss>23</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>management.ParamContainer</name>
      <ncss>3</ncss>
      <functions>0</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>management.ProcedureManager</name>
      <ncss>52</ncss>
      <functions>5</functions>
      <classes>1</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>management.ProcedureManager.ProcedureContainer</name>
      <ncss>14</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>management.TypeDefinitionManager</name>
      <ncss>53</ncss>
      <functions>5</functions>
      <classes>1</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>management.TypeDefinitionManager.DefinitionContainer</name>
      <ncss>14</ncss>
      <functions>4</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon0.CommandLineOptions</name>
      <ncss>32</ncss>
      <functions>6</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon0.ParserInput</name>
      <ncss>13</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon0.ParserOutput</name>
      <ncss>16</ncss>
      <functions>2</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>oberon0.oberon0</name>
      <ncss>27</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>parseErrorLog.OberonException</name>
      <ncss>4</ncss>
      <functions>1</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>parseErrorLog.parseErrorLog</name>
      <ncss>19</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>system.Read</name>
      <ncss>18</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>system.Write</name>
      <ncss>10</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <object>
      <name>system.WriteLn</name>
      <ncss>7</ncss>
      <functions>3</functions>
      <classes>0</classes>
      <javadocs>0</javadocs>
    </object>
    <averages>
      <ncss>25.09</ncss>
      <functions>3.57</functions>
      <classes>0.06</classes>
      <javadocs>0.00</javadocs>
    </averages>
    <ncss>1,436.00</ncss>
  </objects>

  <functions>
    <function>
      <name>ASTnodes.ASTnode.printNode(int)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ASTnode.eval(String)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ArrayNode.ArrayNode(ExpressionNode,ASTnode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ArrayNode.printNode(int)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ArrayNode.eval(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ArrayNode.getArrayElementList()</name>
      <ncss>20</ncss>
      <ccn>10</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.AssignmentNode.AssignmentNode(VarNode,ExpressionNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.AssignmentNode.printNode(int)</name>
      <ncss>9</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.AssignmentNode.eval(String)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ConstantNode.ConstantNode(String,ExpressionNode,ConstantNode)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ConstantNode.printNode(int)</name>
      <ncss>8</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ConstantNode.eval(String)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.DeclarationsNode.DeclarationsNode(ConstantNode,TypeDefNode,FieldsNode,ProcedureListNode)</name>
      <ncss>5</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.DeclarationsNode.printNode(int)</name>
      <ncss>19</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.DeclarationsNode.addWhitespace(int)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.DeclarationsNode.eval(String)</name>
      <ncss>10</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ElseStatementNode.ElseStatementNode(StatementSequenceNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ElseStatementNode.printNode(int)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ElseStatementNode.eval(String)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ExpressionNode.ExpressionNode(SimpleExpression,String,SimpleExpression)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ExpressionNode.printNode(int)</name>
      <ncss>7</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ExpressionNode.eval(String)</name>
      <ncss>27</ncss>
      <ccn>14</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ExpressionNode.getVariableName()</name>
      <ncss>4</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.FieldlistNode.FieldlistNode(IdentListNode,ASTnode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.FieldlistNode.printNode(int)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.FieldlistNode.eval(String)</name>
      <ncss>13</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.FieldlistNode.getVariableList()</name>
      <ncss>19</ncss>
      <ccn>10</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.FieldsNode.FieldsNode(FieldlistNode,FieldsNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.FieldsNode.printNode(int)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.FieldsNode.eval(String)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.FieldsNode.getVariableList()</name>
      <ncss>10</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.FormalParameterNode.FormalParameterNode(FpSectionNode,FormalParameterNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.FormalParameterNode.printNode(int)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.FormalParameterNode.eval(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.FormalParameterNode.eval(String,ParamContainer)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.FpSectionNode.FpSectionNode(String,IdentListNode,ASTnode)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.FpSectionNode.printNode(int)</name>
      <ncss>8</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.FpSectionNode.eval(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.FpSectionNode.eval(String,ParamContainer)</name>
      <ncss>27</ncss>
      <ccn>8</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.FpSectionNode.getAdditions()</name>
      <ncss>12</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.IdentListNode.IdentListNode(String,IdentListNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.IdentListNode.printNode(int)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.IdentListNode.eval(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.IdentListNode.allocateIdentifiers(String,String)</name>
      <ncss>8</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.IdentListNode.getIdentList()</name>
      <ncss>8</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.IdentListNode.getFormalIdentList()</name>
      <ncss>8</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.IfStatementNode.IfStatementNode(ExpressionNode,StatementSequenceNode,StatementNode)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.IfStatementNode.printNode(int)</name>
      <ncss>17</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.IfStatementNode.eval(String)</name>
      <ncss>8</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.IntegerNode.IntegerNode(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.IntegerNode.printNode(int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.IntegerNode.eval(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.MinusNode.MinusNode(TermNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.MinusNode.printNode(int)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.MinusNode.eval(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ModuleNode.ModuleNode(String,String,DeclarationsNode,StatementSequenceNode)</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ModuleNode.printNode(int)</name>
      <ncss>8</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ModuleNode.eval(String)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.NotNode.NotNode(ASTnode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.NotNode.printNode(int)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.NotNode.eval(String)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ParamNode.ParamNode(ExpressionNode,ParamNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ParamNode.printNode(int)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ParamNode.eval(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ParamNode.getVarValueList(String)</name>
      <ncss>9</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ProcedureBodyNode.ProcedureBodyNode(DeclarationsNode,StatementSequenceNode,String)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ProcedureBodyNode.printNode(int)</name>
      <ncss>12</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ProcedureBodyNode.eval(String)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ProcedureBodyNode.getIdentifier()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ProcedureCallNode.ProcedureCallNode(String,ParamNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ProcedureCallNode.printNode(int)</name>
      <ncss>10</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ProcedureCallNode.eval(String)</name>
      <ncss>14</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ProcedureDeclarationNode.ProcedureDeclarationNode(ProcedureHeadingNode,ProcedureBodyNode)</name>
      <ncss>7</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ProcedureDeclarationNode.printNode(int)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ProcedureDeclarationNode.eval(String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ProcedureDeclarationNode.eval(String,ParamContainer)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ProcedureHeadingNode.ProcedureHeadingNode(String,FormalParameterNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ProcedureHeadingNode.printNode(int)</name>
      <ncss>10</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ProcedureHeadingNode.eval(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ProcedureHeadingNode.eval(String,ParamContainer)</name>
      <ncss>4</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ProcedureHeadingNode.getIdentifier()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ProcedureListNode.ProcedureListNode(ProcedureDeclarationNode,ProcedureListNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ProcedureListNode.printNode(int)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.ProcedureListNode.eval(String)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.RecordNode.RecordNode(FieldsNode)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.RecordNode.printNode(int)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.RecordNode.eval(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.RecordNode.getRecordElementList()</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.SelectorArrayNode.SelectorArrayNode(ExpressionNode,ASTnode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.SelectorArrayNode.printNode(int)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.SelectorArrayNode.eval(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.SelectorArrayNode.getString(String)</name>
      <ncss>10</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.SelectorNode.SelectorNode(ASTnode,ASTnode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.SelectorNode.printNode(int)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.SelectorNode.eval(String)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.SelectorRecordNode.SelectorRecordNode(String,ASTnode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.SelectorRecordNode.printNode(int)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.SelectorRecordNode.eval(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.SelectorRecordNode.getString(String)</name>
      <ncss>9</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.SimpleExpression.SimpleExpression(String,ASTnode,SimpleExpression)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.SimpleExpression.printNode(int)</name>
      <ncss>7</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.SimpleExpression.eval(String)</name>
      <ncss>16</ncss>
      <ccn>12</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.SimpleExpression.getVariableName()</name>
      <ncss>4</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.StatementSequenceNode.StatementSequenceNode(StatementNode,StatementSequenceNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.StatementSequenceNode.printNode(int)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.StatementSequenceNode.eval(String)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.TermNode.TermNode(ASTnode,String,TermNode)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.TermNode.printNode(int)</name>
      <ncss>7</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.TermNode.eval(String)</name>
      <ncss>19</ncss>
      <ccn>14</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.TermNode.getVariableName()</name>
      <ncss>4</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.TypeDefNode.TypeDefNode(String,ASTnode,TypeDefNode)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.TypeDefNode.printNode(int)</name>
      <ncss>8</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.TypeDefNode.eval(String)</name>
      <ncss>6</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.TypeNode.TypeNode(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.TypeNode.printNode(int)</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.TypeNode.eval(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.TypeNode.getIdentName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.VarNode.VarNode(String,ASTnode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.VarNode.printNode(int)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.VarNode.eval(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.VarNode.getVarname(String)</name>
      <ncss>9</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.WhileStatementNode.WhileStatementNode(ExpressionNode,StatementSequenceNode)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.WhileStatementNode.printNode(int)</name>
      <ncss>12</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>ASTnodes.WhileStatementNode.eval(String)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.Memory.put(Integer)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.Memory.get(int)</name>
      <ncss>4</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.Memory.set(int,int)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.Memory.remove(Integer)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.Memory.print()</name>
      <ncss>3</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.MemoryManager.allocate(String,String,int,String,boolean)</name>
      <ncss>12</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.MemoryManager.get(String)</name>
      <ncss>10</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.MemoryManager.getFromOtherScope(String,String)</name>
      <ncss>12</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.MemoryManager.set(String,int)</name>
      <ncss>11</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.MemoryManager.deallocateScope(String)</name>
      <ncss>8</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.MemoryManager.print()</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.MemoryManager.isArrayOrRecord(String)</name>
      <ncss>7</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.MemoryManager.isWriteable(String)</name>
      <ncss>9</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.MemoryManager.varLocation(String)</name>
      <ncss>9</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.MemoryManager.getLocationNotInScope(String,String)</name>
      <ncss>9</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.MemoryManager.getLocationOf(String,String)</name>
      <ncss>9</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.MemoryManager.previousScope(String)</name>
      <ncss>9</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.MemoryManager.MemoryMap.MemoryMap(String,String,int,String,boolean)</name>
      <ncss>6</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.MemoryManager.MemoryMap.print()</name>
      <ncss>8</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.MemoryManager.MemoryMap.printXWide(String,int)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.OberonSystemcalls.doSystemCall(String,ParamContainer)</name>
      <ncss>1</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.OberonSystemcalls.read(ParamContainer)</name>
      <ncss>13</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.OberonSystemcalls.write(ParamContainer,boolean)</name>
      <ncss>8</ncss>
      <ccn>4</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.ProcedureManager.addProcedure(String,String,ProcedureDeclarationNode)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.ProcedureManager.getProcedure(String)</name>
      <ncss>7</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.ProcedureManager.deleteScope(String)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.ProcedureManager.printProcedures()</name>
      <ncss>11</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.ProcedureManager.procedureDoesNotExistInScope(String,String)</name>
      <ncss>7</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.ProcedureManager.ProcedureContainer.ProcedureContainer(String,String,ProcedureDeclarationNode)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.ProcedureManager.ProcedureContainer.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.ProcedureManager.ProcedureContainer.getScope()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.ProcedureManager.ProcedureContainer.getProcedure()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.TypeDefinitionManager.addTypeDefinition(String,ASTnode,String)</name>
      <ncss>3</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.TypeDefinitionManager.getTypeDefinition(String)</name>
      <ncss>8</ncss>
      <ccn>5</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.TypeDefinitionManager.printDefinitions()</name>
      <ncss>13</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.TypeDefinitionManager.deleteScope(String)</name>
      <ncss>6</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.TypeDefinitionManager.DefinitionContainer.DefinitionContainer(String,ASTnode,String)</name>
      <ncss>4</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.TypeDefinitionManager.DefinitionContainer.getName()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.TypeDefinitionManager.DefinitionContainer.getDefinition()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.TypeDefinitionManager.DefinitionContainer.getScope()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>management.TypeDefinitionManager.correctType(ASTnode)</name>
      <ncss>7</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon0.CommandLineOptions.CommandLineOptions(String[])</name>
      <ncss>16</ncss>
      <ccn>6</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon0.CommandLineOptions.doPrint()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon0.CommandLineOptions.doMemoryDump()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon0.CommandLineOptions.sourceFile()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon0.CommandLineOptions.doPrintTypeDefinitions()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon0.CommandLineOptions.doPrintProcedureDefinitions()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon0.ParserInput.getInputFile(String)</name>
      <ncss>7</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon0.ParserInput.file_exists(String)</name>
      <ncss>5</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon0.ParserOutput.setFile(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon0.ParserOutput.getAST()</name>
      <ncss>12</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>oberon0.oberon0.main(String[])</name>
      <ncss>26</ncss>
      <ccn>7</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>parseErrorLog.OberonException.OberonException(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>parseErrorLog.parseErrorLog.addMessage(String)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>parseErrorLog.parseErrorLog.hasErrors()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>parseErrorLog.parseErrorLog.printMessages()</name>
      <ncss>13</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>system.Read.Read()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>system.Read.printNode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>system.Read.eval(String,ParamContainer)</name>
      <ncss>13</ncss>
      <ccn>3</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>system.Write.Write()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>system.Write.printNode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>system.Write.eval(String,ParamContainer)</name>
      <ncss>5</ncss>
      <ccn>2</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>system.WriteLn.WriteLn()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>system.WriteLn.printNode()</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function>
      <name>system.WriteLn.eval(String,ParamContainer)</name>
      <ncss>2</ncss>
      <ccn>1</ccn>
      <javadocs>0</javadocs>
    </function>
    <function_averages>
      <ncss>5.97</ncss>
      <ccn>2.68</ccn>
      <javadocs>0.00</javadocs>
    </function_averages>
    <ncss>1,436.00</ncss>
  </functions>
</javancss>
